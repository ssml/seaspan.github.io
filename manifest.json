{"metadata": {"dbt_schema_version": "https://schemas.getdbt.com/dbt/manifest/v8.json", "dbt_version": "1.4.5", "generated_at": "2024-07-09T17:17:31.322490Z", "invocation_id": "d299b5fb-00f6-4326-80e0-35fec7feb3b5", "env": {}, "project_id": "2e8d0de76ac72e21364e7de58d9111dd", "user_id": "460d00f6-9fa0-4e2a-abf3-5ac9f9175de9", "send_anonymous_usage_stats": true, "adapter_type": "sqlserver"}, "nodes": {"model.dbtProject_v2.bto_legsummary": {"database": "Bronze", "schema": "dbo", "name": "bto_legsummary", "resource_type": "model", "package_name": "dbtProject_v2", "path": "bronze\\bto_legsummary.sql", "original_file_path": "models\\bronze\\bto_legsummary.sql", "unique_id": "model.dbtProject_v2.bto_legsummary", "fqn": ["dbtProject_v2", "bronze", "bto_legsummary"], "alias": "bto_legsummary", "checksum": {"name": "sha256", "checksum": "d1bdb514954e07a34a515519a5c64cb435e307e564869eec19b03efb6ee27f8d"}, "config": {"enabled": true, "alias": null, "schema": "dbo", "database": "Bronze", "tags": [], "meta": {}, "materialized": "incremental", "incremental_strategy": "delete+insert", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": "legEventId", "on_schema_change": "sync_all_columns", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "as_columnstore": false, "post-hook": [{"sql": "\n            UPDATE {{ source('stage', 'api_bto_LegSummary_Delta') }}\n            SET isNormalized = 1\n            WHERE LOAD_ID = {{ max_loadid('source', 'api_bto_LegSummary_Delta') }}\n            AND isError = 0", "transaction": true, "index": null}], "pre-hook": []}, "tags": [], "description": "", "columns": {"legEventId": {"name": "legEventId", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "dbtProject_v2://models\\schema.yml", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "incremental", "schema": "dbo", "database": "Bronze", "as_columnstore": false, "unique_key": "legEventId", "incremental_strategy": "delete+insert", "on_schema_change": "sync_all_columns", "post-hook": ["\n            UPDATE {{ source('stage', 'api_bto_LegSummary_Delta') }}\n            SET isNormalized = 1\n            WHERE LOAD_ID = {{ max_loadid('source', 'api_bto_LegSummary_Delta') }}\n            AND isError = 0"]}, "created_at": 1720537838.761201, "relation_name": "\"Bronze\".\"dbo\".\"bto_legsummary\"", "raw_code": "{{ config(\r\n        materialized = 'incremental',\r\n        as_columnstore = false,\r\n        unique_key = 'legEventId',\r\n        incremental_strategy = 'delete+insert',\r\n        on_schema_change = 'sync_all_columns',\r\n        post_hook = \"\r\n            UPDATE {{ source('stage', 'api_bto_LegSummary_Delta') }}\r\n            SET isNormalized = 1\r\n            WHERE LOAD_ID = {{ max_loadid('source', 'api_bto_LegSummary_Delta') }}\r\n            AND isError = 0\"\r\n) }}\r\n\r\nselect \r\n    main.legEventId,\r\n\tj.id,\r\n\tj.IMO,\r\n    rawdata as json_data,\r\n    getdate() as LoadDateTime,\r\n    main.Load_ID\r\nfrom {{ source('stage','api_bto_LegSummary_Delta') }} as main\r\nCROSS APPLY OPENJSON(main.rawdata)\r\nwith(\r\n\tid INT '$.id',\r\n\tIMO INT '$.ship.imoNumber'\r\n) j\r\nwhere load_id = {{ max_loadid('source', 'api_bto_LegSummary_Delta') }}", "language": "sql", "refs": [], "sources": [["stage", "api_bto_LegSummary_Delta"], ["stage", "api_bto_LegSummary_Delta"]], "metrics": [], "depends_on": {"macros": ["macro.dbtProject_v2.max_loadid"], "nodes": ["source.dbtProject_v2.stage.api_bto_LegSummary_Delta", "source.dbtProject_v2.stage.api_bto_LegSummary_Delta"]}, "compiled_path": "target\\compiled\\dbtProject_v2\\models\\bronze\\bto_legsummary.sql", "compiled": true, "compiled_code": "\n\nselect \n    main.legEventId,\n\tj.id,\n\tj.IMO,\n    rawdata as json_data,\n    getdate() as LoadDateTime,\n    main.Load_ID\nfrom \"StageData\".\"dbo\".\"api_bto_LegSummary_Delta\" as main\nCROSS APPLY OPENJSON(main.rawdata)\nwith(\n\tid INT '$.id',\n\tIMO INT '$.ship.imoNumber'\n) j\nwhere load_id = 782399", "extra_ctes_injected": true, "extra_ctes": []}, "model.dbtProject_v2.BTO_LegSummary": {"database": "Silver", "schema": "dbo", "name": "BTO_LegSummary", "resource_type": "model", "package_name": "dbtProject_v2", "path": "silver\\BTO_LegSummary.sql", "original_file_path": "models\\silver\\BTO_LegSummary.sql", "unique_id": "model.dbtProject_v2.BTO_LegSummary", "fqn": ["dbtProject_v2", "silver", "BTO_LegSummary"], "alias": "BTO_LegSummary", "checksum": {"name": "sha256", "checksum": "243a8b7403748b5272e31e5876290efd98e184254b2281f1c50e161d5fcd9b48"}, "config": {"enabled": true, "alias": null, "schema": "dbo", "database": "Silver", "tags": [], "meta": {}, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "dbtProject_v2://models\\schema.yml", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "schema": "dbo", "database": "Silver"}, "created_at": 1720537838.761201, "relation_name": "\"Silver\".\"dbo\".\"BTO_LegSummary\"", "raw_code": "SELECT\r\n    json_data.legEventId,\r\n    json_data.id,\r\n\tjson_data.versionStamp,\r\n\tjson_data.shipId,\r\n\tjson_data.shipImoNumber,\r\n\tjson_data.shipName,\r\n\tjson_data.shipShortName,\r\n\tjson_data.shipAlternativeName,\r\n\tjson_data.shipCallSign,\r\n\tjson_data.shipCurrentVersionStamp,\r\n\tjson_data.shipClassId,\r\n\tjson_data.shipClassName,\r\n\tjson_data.shipOwnerName,\r\n\tjson_data.shipPortOfRegistryUnloc,\r\n\tjson_data.shipIsHidden,\r\n\tjson_data.shipLink,\r\n\tjson_data.voyageId,\r\n\tjson_data.voyageName,\r\n\tjson_data.voyageServiceName,\r\n\tjson_data.voyageLink,\r\n\tjson_data.portOfOrigin_Id,\r\n\tjson_data.portOfOrigin_Unloc,\r\n\tjson_data.portOfOrigin_Name,\r\n\tjson_data.portOfOrigin_Link,\r\n\tjson_data.portOfDestination_Id,\r\n\tjson_data.portOfDestination_Unloc,\r\n\tjson_data.portOfDestination_Name,\r\n\tjson_data.portOfDestination_Link,\r\n\tjson_data.portOfOriginUnloc,\r\n\tjson_data.portOfDestinationUnloc,\r\n\tjson_data.portOfOriginName,\r\n\tjson_data.portOfDestinationName,\r\n\tjson_data.departureTime,\r\n\tjson_data.arrivalTime,\r\n\tjson_data.captain,\r\n\tjson_data.chiefEng,\r\n\tjson_data.duration,\r\n\tjson_data.sailingTime,\r\n\tjson_data.distanceSailedOverGround,\r\n\tjson_data.distanceSailedThroughWater,\r\n\tjson_data.cargoWeight,\r\n\tjson_data.ballastWeight,\r\n\tjson_data.cargoTeuFull,\r\n\tjson_data.cargoTeuEmpty,\r\n\tjson_data.cargoReefers,\r\n\tjson_data.cargoVolume,\r\n\tjson_data.cargoPassengers,\r\n\tjson_data.totalFoc,\r\n\tjson_data.totalFocIso,\r\n\tjson_data.totalFocMe,\r\n\tjson_data.totalFocMeIso,\r\n\tjson_data.totalFocAe,\r\n\tjson_data.totalFocAeIso,\r\n\tjson_data.totalFocAb,\r\n\tjson_data.totalFocAbIso,\r\n\tjson_data.totalFocIgs,\r\n\tjson_data.totalFocIgsIso,\r\n\tjson_data.totalFocInc,\r\n\tjson_data.totalFocIncIso,\r\n\tjson_data.totalCo2,\r\n\tjson_data.totalCo2Me,\r\n\tjson_data.totalCo2Ae,\r\n\tjson_data.totalCo2Ab,\r\n\tjson_data.totalCo2Igs,\r\n\tjson_data.totalCo2Inc,\r\n\tjson_data.totalFocHfo,\r\n\tjson_data.totalFocHfoHs,\r\n\tjson_data.totalFocHfoLs,\r\n\tjson_data.totalFocHfoLls,\r\n\tjson_data.totalFocLfo,\r\n\tjson_data.totalFocMdo,\r\n\tjson_data.totalFocMgo,\r\n\tjson_data.totalFocPropane,\r\n\tjson_data.totalFocButane,\r\n\tjson_data.totalFocLng,\r\n\tjson_data.totalFocMethanol,\r\n\tjson_data.totalFocEthanol,\r\n\tjson_data.totalFocBtl,\r\n\tjson_data.totalFocFame,\r\n\tjson_data.totalFocHvo,\r\n\tjson_data.totalFocBioFuelBlend,\r\n\tjson_data.eeoiTeu,\r\n\tjson_data.eeoiWeight,\r\n\tjson_data.totalCylinderOilConsumption,\r\n\tjson_data.totalCirculationLubOilMeConsumption,\r\n\tjson_data.totalCirculationLubOilAeConsumption,\r\n\tjson_data.totalFreshWaterConsumptionUndef,\r\n\tjson_data.totalFreshWaterConsumptionDomestic,\r\n\tjson_data.totalFreshWaterConsumptionBoiler,\r\n\tjson_data.totalFreshWaterConsumptionWashing,\r\n\tjson_data.totalOilyWaterDischargeUndef,\r\n\tjson_data.totalOilyWaterDischargeViaOws,\r\n\tjson_data.totalOilyWaterDischargeViaOdme,\r\n\tjson_data.soxEmissionsMe,\r\n\tjson_data.soxEmissionsAe,\r\n\tjson_data.soxEmissionsAb,\r\n\tjson_data.totalSoxEmissions,\r\n\tjson_data.noxEmissionsMe,\r\n\tjson_data.noxEmissionsAe,\r\n\tjson_data.noxEmissionsAb,\r\n\tjson_data.totalNoxEmissions,\r\n\tjson_data.bunkerFreshWaterBunkered,\r\n\tjson_data.bunkerFreshWaterProduced,\r\n\tjson_data.engineDistance,\r\n\tjson_data.estimationScore,\r\n\tjson_data.completenessScore,\r\n\tjson_data.plausibilityScore,\r\n    load_id\r\nFROM {{ ref(\"bto_legsummary\") }}\r\nCROSS APPLY OPENJSON(json_data) WITH (\r\n    id INT '$.id',\r\n    legEventId INT '$.legEventId',\r\n    versionStamp INT '$.versionStamp',\r\n    shipId INT '$.ship.id',\r\n    shipImoNumber INT '$.ship.imoNumber',\r\n    shipName varchar(max) '$.ship.name',\r\n    shipShortName varchar(max) '$.ship.shortName',\r\n\tshipAlternativeName varchar(max) '$.ship.alternativeName',\r\n    shipCallSign varchar(max) '$.ship.callSign',\r\n    shipCurrentVersionStamp INT '$.ship.currentVersionStamp',\r\n    shipClassId INT '$.ship.shipClassId',\r\n\tshipClassName varchar(max) '$.ship.shipClassName',\r\n\tshipOwnerName varchar(max) '$.ship.ownerName',\r\n    shipPortOfRegistryUnloc varchar(max) '$.ship.portOfRegistryUnloc',\r\n    shipIsHidden BIT '$.ship.isHidden',\r\n    shipLink varchar(max) '$.ship.link',\r\n    voyageId INT '$.voyage.id',\r\n    voyageName varchar(max) '$.voyage.name',\r\n    voyageServiceName varchar(max) '$.voyage.serviceName',\r\n    voyageLink varchar(max) '$.voyage.link',\r\n    portOfOrigin_Id INT '$.portOfOrigin.id',\r\n    portOfOrigin_Unloc varchar(max) '$.portOfOrigin.unloc',\r\n    portOfOrigin_Name varchar(max) '$.portOfOrigin.name',\r\n    portOfOrigin_Link varchar(max) '$.portOfOrigin.link',\r\n    portOfDestination_Id INT '$.portOfDestination.id',\r\n    portOfDestination_Unloc varchar(max) '$.portOfDestination.unloc',\r\n    portOfDestination_Name varchar(max) '$.portOfDestination.name',\r\n    portOfDestination_Link varchar(max) '$.portOfDestination.link',\r\n    portOfOriginUnloc varchar(max) '$.portOfOriginUnloc',\r\n    portOfDestinationUnloc varchar(max) '$.portOfDestinationUnloc',\r\n    portOfOriginName varchar(max) '$.portOfOriginName',\r\n    portOfDestinationName varchar(max) '$.portOfDestinationName',\r\n    departureTime DATETIMEOFFSET '$.departureTime',\r\n    arrivalTime DATETIMEOFFSET '$.arrivalTime',\r\n    captain varchar(max) '$.captain',\r\n    chiefEng varchar(max) '$.chiefEng',\r\n    duration FLOAT '$.duration',\r\n    sailingTime FLOAT '$.sailingTime',\r\n    distanceSailedOverGround FLOAT '$.distanceSailedOverGround',\r\n    distanceSailedThroughWater FLOAT '$.distanceSailedThroughWater',\r\n    cargoWeight FLOAT '$.cargoWeight',\r\n    ballastWeight FLOAT '$.ballastWeight',\r\n    cargoTeuFull FLOAT '$.cargoTeuFull',\r\n    cargoTeuEmpty FLOAT '$.cargoTeuEmpty',\r\n    cargoReefers INT '$.cargoReefers',\r\n    cargoVolume FLOAT '$.cargoVolume',\r\n    cargoPassengers INT '$.cargoPassengers',\r\n    totalFoc FLOAT '$.totalFoc',\r\n    totalFocIso FLOAT '$.totalFocIso',\r\n    totalFocMe FLOAT '$.totalFocMe',\r\n    totalFocMeIso FLOAT '$.totalFocMeIso',\r\n    totalFocAe FLOAT '$.totalFocAe',\r\n    totalFocAeIso FLOAT '$.totalFocAeIso',\r\n    totalFocAb FLOAT '$.totalFocAb',\r\n    totalFocAbIso FLOAT '$.totalFocAbIso',\r\n    totalFocIgs FLOAT '$.totalFocIgs',\r\n    totalFocIgsIso FLOAT '$.totalFocIgsIso',\r\n    totalFocInc FLOAT '$.totalFocInc',\r\n    totalFocIncIso FLOAT '$.totalFocIncIso',\r\n    totalCo2 FLOAT '$.totalCo2',\r\n    totalCo2Me FLOAT '$.totalCo2Me',\r\n    totalCo2Ae FLOAT '$.totalCo2Ae',\r\n    totalCo2Ab FLOAT '$.totalCo2Ab',\r\n    totalCo2Igs FLOAT '$.totalCo2Igs',\r\n    totalCo2Inc FLOAT '$.totalCo2Inc',\r\n    totalFocHfo FLOAT '$.totalFocHfo',\r\n    totalFocHfoHs FLOAT '$.totalFocHfoHs',\r\n    totalFocHfoLs FLOAT '$.totalFocHfoLs',\r\n    totalFocHfoLls FLOAT '$.totalFocHfoLls',\r\n    totalFocLfo FLOAT '$.totalFocLfo',\r\n    totalFocMdo FLOAT '$.totalFocMdo',\r\n    totalFocMgo FLOAT '$.totalFocMgo',\r\n    totalFocPropane FLOAT '$.totalFocPropane',\r\n    totalFocButane FLOAT '$.totalFocButane',\r\n    totalFocLng FLOAT '$.totalFocLng',\r\n    totalFocMethanol FLOAT '$.totalFocMethanol',\r\n    totalFocEthanol FLOAT '$.totalFocEthanol',\r\n    totalFocBtl FLOAT '$.totalFocBtl',\r\n    totalFocFame FLOAT '$.totalFocFame',\r\n    totalFocHvo FLOAT '$.totalFocHvo',\r\n    totalFocBioFuelBlend FLOAT '$.totalFocBioFuelBlend',\r\n    eeoiTeu FLOAT '$.eeoiTeu',\r\n    eeoiWeight FLOAT '$.eeoiWeight',\r\n    totalCylinderOilConsumption FLOAT '$.totalCylinderOilConsumption',\r\n    totalCirculationLubOilMeConsumption FLOAT '$.totalCirculationLubOilMeConsumption',\r\n    totalCirculationLubOilAeConsumption FLOAT '$.totalCirculationLubOilAeConsumption',\r\n    totalFreshWaterConsumptionUndef FLOAT '$.totalFreshWaterConsumptionUndef',\r\n    totalFreshWaterConsumptionDomestic FLOAT '$.totalFreshWaterConsumptionDomestic',\r\n    totalFreshWaterConsumptionBoiler FLOAT '$.totalFreshWaterConsumptionBoiler',\r\n    totalFreshWaterConsumptionWashing FLOAT '$.totalFreshWaterConsumptionWashing',\r\n    totalOilyWaterDischargeUndef FLOAT '$.totalOilyWaterDischargeUndef',\r\n    totalOilyWaterDischargeViaOws FLOAT '$.totalOilyWaterDischargeViaOws',\r\n    totalOilyWaterDischargeViaOdme FLOAT '$.totalOilyWaterDischargeViaOdme',\r\n    soxEmissionsMe FLOAT '$.soxEmissionsMe',\r\n    soxEmissionsAe FLOAT '$.soxEmissionsAe',\r\n    soxEmissionsAb FLOAT '$.soxEmissionsAb',\r\n    totalSoxEmissions FLOAT '$.totalSoxEmissions',\r\n    noxEmissionsMe FLOAT '$.noxEmissionsMe',\r\n    noxEmissionsAe FLOAT '$.noxEmissionsAe',\r\n    noxEmissionsAb FLOAT '$.noxEmissionsAb',\r\n    totalNoxEmissions FLOAT '$.totalNoxEmissions',\r\n    bunkerFreshWaterBunkered FLOAT '$.bunkerFreshWaterBunkered',\r\n    bunkerFreshWaterProduced FLOAT '$.bunkerFreshWaterProduced',\r\n    engineDistance FLOAT '$.engineDistance',\r\n    estimationScore FLOAT '$.estimationScore',\r\n    completenessScore FLOAT '$.completenessScore',\r\n    plausibilityScore FLOAT '$.plausibilityScore'\r\n) AS json_data;", "language": "sql", "refs": [["bto_legsummary"]], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.dbtProject_v2.bto_legsummary"]}, "compiled_path": "target\\compiled\\dbtProject_v2\\models\\silver\\BTO_LegSummary.sql", "compiled": true, "compiled_code": "SELECT\n    json_data.legEventId,\n    json_data.id,\n\tjson_data.versionStamp,\n\tjson_data.shipId,\n\tjson_data.shipImoNumber,\n\tjson_data.shipName,\n\tjson_data.shipShortName,\n\tjson_data.shipAlternativeName,\n\tjson_data.shipCallSign,\n\tjson_data.shipCurrentVersionStamp,\n\tjson_data.shipClassId,\n\tjson_data.shipClassName,\n\tjson_data.shipOwnerName,\n\tjson_data.shipPortOfRegistryUnloc,\n\tjson_data.shipIsHidden,\n\tjson_data.shipLink,\n\tjson_data.voyageId,\n\tjson_data.voyageName,\n\tjson_data.voyageServiceName,\n\tjson_data.voyageLink,\n\tjson_data.portOfOrigin_Id,\n\tjson_data.portOfOrigin_Unloc,\n\tjson_data.portOfOrigin_Name,\n\tjson_data.portOfOrigin_Link,\n\tjson_data.portOfDestination_Id,\n\tjson_data.portOfDestination_Unloc,\n\tjson_data.portOfDestination_Name,\n\tjson_data.portOfDestination_Link,\n\tjson_data.portOfOriginUnloc,\n\tjson_data.portOfDestinationUnloc,\n\tjson_data.portOfOriginName,\n\tjson_data.portOfDestinationName,\n\tjson_data.departureTime,\n\tjson_data.arrivalTime,\n\tjson_data.captain,\n\tjson_data.chiefEng,\n\tjson_data.duration,\n\tjson_data.sailingTime,\n\tjson_data.distanceSailedOverGround,\n\tjson_data.distanceSailedThroughWater,\n\tjson_data.cargoWeight,\n\tjson_data.ballastWeight,\n\tjson_data.cargoTeuFull,\n\tjson_data.cargoTeuEmpty,\n\tjson_data.cargoReefers,\n\tjson_data.cargoVolume,\n\tjson_data.cargoPassengers,\n\tjson_data.totalFoc,\n\tjson_data.totalFocIso,\n\tjson_data.totalFocMe,\n\tjson_data.totalFocMeIso,\n\tjson_data.totalFocAe,\n\tjson_data.totalFocAeIso,\n\tjson_data.totalFocAb,\n\tjson_data.totalFocAbIso,\n\tjson_data.totalFocIgs,\n\tjson_data.totalFocIgsIso,\n\tjson_data.totalFocInc,\n\tjson_data.totalFocIncIso,\n\tjson_data.totalCo2,\n\tjson_data.totalCo2Me,\n\tjson_data.totalCo2Ae,\n\tjson_data.totalCo2Ab,\n\tjson_data.totalCo2Igs,\n\tjson_data.totalCo2Inc,\n\tjson_data.totalFocHfo,\n\tjson_data.totalFocHfoHs,\n\tjson_data.totalFocHfoLs,\n\tjson_data.totalFocHfoLls,\n\tjson_data.totalFocLfo,\n\tjson_data.totalFocMdo,\n\tjson_data.totalFocMgo,\n\tjson_data.totalFocPropane,\n\tjson_data.totalFocButane,\n\tjson_data.totalFocLng,\n\tjson_data.totalFocMethanol,\n\tjson_data.totalFocEthanol,\n\tjson_data.totalFocBtl,\n\tjson_data.totalFocFame,\n\tjson_data.totalFocHvo,\n\tjson_data.totalFocBioFuelBlend,\n\tjson_data.eeoiTeu,\n\tjson_data.eeoiWeight,\n\tjson_data.totalCylinderOilConsumption,\n\tjson_data.totalCirculationLubOilMeConsumption,\n\tjson_data.totalCirculationLubOilAeConsumption,\n\tjson_data.totalFreshWaterConsumptionUndef,\n\tjson_data.totalFreshWaterConsumptionDomestic,\n\tjson_data.totalFreshWaterConsumptionBoiler,\n\tjson_data.totalFreshWaterConsumptionWashing,\n\tjson_data.totalOilyWaterDischargeUndef,\n\tjson_data.totalOilyWaterDischargeViaOws,\n\tjson_data.totalOilyWaterDischargeViaOdme,\n\tjson_data.soxEmissionsMe,\n\tjson_data.soxEmissionsAe,\n\tjson_data.soxEmissionsAb,\n\tjson_data.totalSoxEmissions,\n\tjson_data.noxEmissionsMe,\n\tjson_data.noxEmissionsAe,\n\tjson_data.noxEmissionsAb,\n\tjson_data.totalNoxEmissions,\n\tjson_data.bunkerFreshWaterBunkered,\n\tjson_data.bunkerFreshWaterProduced,\n\tjson_data.engineDistance,\n\tjson_data.estimationScore,\n\tjson_data.completenessScore,\n\tjson_data.plausibilityScore,\n    load_id\nFROM \"Bronze\".\"dbo\".\"bto_legsummary\"\nCROSS APPLY OPENJSON(json_data) WITH (\n    id INT '$.id',\n    legEventId INT '$.legEventId',\n    versionStamp INT '$.versionStamp',\n    shipId INT '$.ship.id',\n    shipImoNumber INT '$.ship.imoNumber',\n    shipName varchar(max) '$.ship.name',\n    shipShortName varchar(max) '$.ship.shortName',\n\tshipAlternativeName varchar(max) '$.ship.alternativeName',\n    shipCallSign varchar(max) '$.ship.callSign',\n    shipCurrentVersionStamp INT '$.ship.currentVersionStamp',\n    shipClassId INT '$.ship.shipClassId',\n\tshipClassName varchar(max) '$.ship.shipClassName',\n\tshipOwnerName varchar(max) '$.ship.ownerName',\n    shipPortOfRegistryUnloc varchar(max) '$.ship.portOfRegistryUnloc',\n    shipIsHidden BIT '$.ship.isHidden',\n    shipLink varchar(max) '$.ship.link',\n    voyageId INT '$.voyage.id',\n    voyageName varchar(max) '$.voyage.name',\n    voyageServiceName varchar(max) '$.voyage.serviceName',\n    voyageLink varchar(max) '$.voyage.link',\n    portOfOrigin_Id INT '$.portOfOrigin.id',\n    portOfOrigin_Unloc varchar(max) '$.portOfOrigin.unloc',\n    portOfOrigin_Name varchar(max) '$.portOfOrigin.name',\n    portOfOrigin_Link varchar(max) '$.portOfOrigin.link',\n    portOfDestination_Id INT '$.portOfDestination.id',\n    portOfDestination_Unloc varchar(max) '$.portOfDestination.unloc',\n    portOfDestination_Name varchar(max) '$.portOfDestination.name',\n    portOfDestination_Link varchar(max) '$.portOfDestination.link',\n    portOfOriginUnloc varchar(max) '$.portOfOriginUnloc',\n    portOfDestinationUnloc varchar(max) '$.portOfDestinationUnloc',\n    portOfOriginName varchar(max) '$.portOfOriginName',\n    portOfDestinationName varchar(max) '$.portOfDestinationName',\n    departureTime DATETIMEOFFSET '$.departureTime',\n    arrivalTime DATETIMEOFFSET '$.arrivalTime',\n    captain varchar(max) '$.captain',\n    chiefEng varchar(max) '$.chiefEng',\n    duration FLOAT '$.duration',\n    sailingTime FLOAT '$.sailingTime',\n    distanceSailedOverGround FLOAT '$.distanceSailedOverGround',\n    distanceSailedThroughWater FLOAT '$.distanceSailedThroughWater',\n    cargoWeight FLOAT '$.cargoWeight',\n    ballastWeight FLOAT '$.ballastWeight',\n    cargoTeuFull FLOAT '$.cargoTeuFull',\n    cargoTeuEmpty FLOAT '$.cargoTeuEmpty',\n    cargoReefers INT '$.cargoReefers',\n    cargoVolume FLOAT '$.cargoVolume',\n    cargoPassengers INT '$.cargoPassengers',\n    totalFoc FLOAT '$.totalFoc',\n    totalFocIso FLOAT '$.totalFocIso',\n    totalFocMe FLOAT '$.totalFocMe',\n    totalFocMeIso FLOAT '$.totalFocMeIso',\n    totalFocAe FLOAT '$.totalFocAe',\n    totalFocAeIso FLOAT '$.totalFocAeIso',\n    totalFocAb FLOAT '$.totalFocAb',\n    totalFocAbIso FLOAT '$.totalFocAbIso',\n    totalFocIgs FLOAT '$.totalFocIgs',\n    totalFocIgsIso FLOAT '$.totalFocIgsIso',\n    totalFocInc FLOAT '$.totalFocInc',\n    totalFocIncIso FLOAT '$.totalFocIncIso',\n    totalCo2 FLOAT '$.totalCo2',\n    totalCo2Me FLOAT '$.totalCo2Me',\n    totalCo2Ae FLOAT '$.totalCo2Ae',\n    totalCo2Ab FLOAT '$.totalCo2Ab',\n    totalCo2Igs FLOAT '$.totalCo2Igs',\n    totalCo2Inc FLOAT '$.totalCo2Inc',\n    totalFocHfo FLOAT '$.totalFocHfo',\n    totalFocHfoHs FLOAT '$.totalFocHfoHs',\n    totalFocHfoLs FLOAT '$.totalFocHfoLs',\n    totalFocHfoLls FLOAT '$.totalFocHfoLls',\n    totalFocLfo FLOAT '$.totalFocLfo',\n    totalFocMdo FLOAT '$.totalFocMdo',\n    totalFocMgo FLOAT '$.totalFocMgo',\n    totalFocPropane FLOAT '$.totalFocPropane',\n    totalFocButane FLOAT '$.totalFocButane',\n    totalFocLng FLOAT '$.totalFocLng',\n    totalFocMethanol FLOAT '$.totalFocMethanol',\n    totalFocEthanol FLOAT '$.totalFocEthanol',\n    totalFocBtl FLOAT '$.totalFocBtl',\n    totalFocFame FLOAT '$.totalFocFame',\n    totalFocHvo FLOAT '$.totalFocHvo',\n    totalFocBioFuelBlend FLOAT '$.totalFocBioFuelBlend',\n    eeoiTeu FLOAT '$.eeoiTeu',\n    eeoiWeight FLOAT '$.eeoiWeight',\n    totalCylinderOilConsumption FLOAT '$.totalCylinderOilConsumption',\n    totalCirculationLubOilMeConsumption FLOAT '$.totalCirculationLubOilMeConsumption',\n    totalCirculationLubOilAeConsumption FLOAT '$.totalCirculationLubOilAeConsumption',\n    totalFreshWaterConsumptionUndef FLOAT '$.totalFreshWaterConsumptionUndef',\n    totalFreshWaterConsumptionDomestic FLOAT '$.totalFreshWaterConsumptionDomestic',\n    totalFreshWaterConsumptionBoiler FLOAT '$.totalFreshWaterConsumptionBoiler',\n    totalFreshWaterConsumptionWashing FLOAT '$.totalFreshWaterConsumptionWashing',\n    totalOilyWaterDischargeUndef FLOAT '$.totalOilyWaterDischargeUndef',\n    totalOilyWaterDischargeViaOws FLOAT '$.totalOilyWaterDischargeViaOws',\n    totalOilyWaterDischargeViaOdme FLOAT '$.totalOilyWaterDischargeViaOdme',\n    soxEmissionsMe FLOAT '$.soxEmissionsMe',\n    soxEmissionsAe FLOAT '$.soxEmissionsAe',\n    soxEmissionsAb FLOAT '$.soxEmissionsAb',\n    totalSoxEmissions FLOAT '$.totalSoxEmissions',\n    noxEmissionsMe FLOAT '$.noxEmissionsMe',\n    noxEmissionsAe FLOAT '$.noxEmissionsAe',\n    noxEmissionsAb FLOAT '$.noxEmissionsAb',\n    totalNoxEmissions FLOAT '$.totalNoxEmissions',\n    bunkerFreshWaterBunkered FLOAT '$.bunkerFreshWaterBunkered',\n    bunkerFreshWaterProduced FLOAT '$.bunkerFreshWaterProduced',\n    engineDistance FLOAT '$.engineDistance',\n    estimationScore FLOAT '$.estimationScore',\n    completenessScore FLOAT '$.completenessScore',\n    plausibilityScore FLOAT '$.plausibilityScore'\n) AS json_data;", "extra_ctes_injected": true, "extra_ctes": []}, "model.dbtProject_v2.BTO_Reports_Boiler": {"database": "Silver", "schema": "dbo", "name": "BTO_Reports_Boiler", "resource_type": "model", "package_name": "dbtProject_v2", "path": "silver\\BTO_Reports_Boiler.sql", "original_file_path": "models\\silver\\BTO_Reports_Boiler.sql", "unique_id": "model.dbtProject_v2.BTO_Reports_Boiler", "fqn": ["dbtProject_v2", "silver", "BTO_Reports_Boiler"], "alias": "BTO_Reports_Boiler", "checksum": {"name": "sha256", "checksum": "5503435ee44908cbf6ecd8c6763da98e808e91f854a9708ab49bf58881e8885a"}, "config": {"enabled": true, "alias": null, "schema": "dbo", "database": "Silver", "tags": [], "meta": {}, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "dbtProject_v2://models\\schema.yml", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "schema": "dbo", "database": "Silver"}, "created_at": 1720542776.0880628, "relation_name": "\"Silver\".\"dbo\".\"BTO_Reports_Boiler\"", "raw_code": "select\r\n\trs.reportId as reportId,\r\n    rs.IMO as IMO,  \r\n    'Boiler' as EngineCategory, \r\n    CAST(JSON_VALUE(rsEngine.value, '$.name') as varchar(max)) as name,\r\n    CAST(JSON_VALUE(rsEngine.value, '$.runningHoursShaftGenerator') as float) as runningHoursShaftGenerator,\r\n    CAST(JSON_VALUE(rsEngine.value, '$.averageShaftRpm') as float) as averageShaftRpm,\r\n    CAST(JSON_VALUE(rsEngine.value, '$.shaftRevolutions') as float) as shaftRevolutions,\r\n    CAST(JSON_VALUE(rsEngine.value, '$.generatorEfficiency') as float) as generatorEfficiency ,\r\n    CAST(JSON_VALUE(rsEngine.value, '$.averageShaftPower') as float) as averageShaftPower ,\r\n    CAST(JSON_VALUE(rsEngine.value, '$.generatedShaftEnergy') as float) as generatedShaftEnergy ,\r\n    CAST(JSON_VALUE(rsEngine.value, '$.averageGeneratorPower') as float) as averageGeneratorPower ,\r\n    CAST(JSON_VALUE(rsEngine.value, '$.relativePower') as float) as relativePower,\r\n    CAST(JSON_VALUE(rsEngine.value, '$.generatedGeneratorEnergy') as float) as generatedGeneratorEnergy,\r\n    CAST(JSON_VALUE(rsEngine.value, '$.propellerPitch') as float) as propellerPitch,\r\n    CAST(JSON_VALUE(rsEngine.value, '$.slipThroughWater') as float) as slipThroughWater,\r\n    CAST(JSON_VALUE(rsEngine.value, '$.slipOverGround') as float) as slipOverGround,\r\n    CAST(JSON_VALUE(rsEngine.value, '$.engineDistance') as float) as engineDistance,\r\n    CAST(JSON_VALUE(rsEngine.value, '$.relativeGeneratorPower') as float) as relativeGeneratorPower,\r\n    CAST(JSON_VALUE(rsEngine.value, '$.load') as float) as load,\r\n    --CAST(JSON_QUERY(rsEngine.value, '$.lubOilConsumptions') as nvarchar(max)) as lubOilConsumptions,\r\n    CAST(JSON_VALUE(rsEngine.value, '$.averagePower') as float) as averagePower,  \r\n    CAST(JSON_VALUE(rsEngine.value, '$.generatedEnergy') as float) as generatedEnergy,  \r\n    CAST(JSON_VALUE(rsEngine.value, '$.sfoc') as float) as sfoc,  \r\n    CAST(JSON_VALUE(rsEngine.value, '$.sfocIso') as float) as sfocIso,  \r\n    CAST(JSON_VALUE(rsEngine.value, '$.averageNoxValue') as float) as averageNoxValue,  \r\n    --CAST(JSON_QUERY(rsEngine.value, '$.consumptions') as nvarchar(max)) as consumptions,\r\n    CAST(JSON_VALUE(rsEngine.value, '$.totalFoc') as float) as totalFoc,  \r\n    CAST(JSON_VALUE(rsEngine.value, '$.totalFocIso') as float) as totalFocIso,  \r\n    CAST(JSON_VALUE(rsEngine.value, '$.totalCo2') as float) as totalCo2,  \r\n    CAST(JSON_VALUE(rsEngine.value, '$.no') as int) as no, \r\n    CAST(JSON_VALUE(rsEngine.value, '$.runningHours') as float) as runningHours,  \r\n    getdate() as LoadDateTime,\r\n    rs.LOAD_ID as load_ID,\r\n    rs.isdeleted\r\nfrom {{ ref('bto_reportsummaries') }} rs\r\ncross apply openjson(rs.json_data, '$.aggregationDetails.boilers') as rsEngine", "language": "sql", "refs": [["bto_reportsummaries"]], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.dbtProject_v2.bto_reportsummaries", "model.dbtProject_v2.bto_reportsummaries"]}, "compiled_path": "target\\compiled\\dbtProject_v2\\models\\silver\\BTO_Reports_Boiler.sql", "compiled": true, "compiled_code": "select\n\trs.reportId as reportId,\n    rs.IMO as IMO,  \n    'Boiler' as EngineCategory, \n    CAST(JSON_VALUE(rsEngine.value, '$.name') as varchar(max)) as name,\n    CAST(JSON_VALUE(rsEngine.value, '$.runningHoursShaftGenerator') as float) as runningHoursShaftGenerator,\n    CAST(JSON_VALUE(rsEngine.value, '$.averageShaftRpm') as float) as averageShaftRpm,\n    CAST(JSON_VALUE(rsEngine.value, '$.shaftRevolutions') as float) as shaftRevolutions,\n    CAST(JSON_VALUE(rsEngine.value, '$.generatorEfficiency') as float) as generatorEfficiency ,\n    CAST(JSON_VALUE(rsEngine.value, '$.averageShaftPower') as float) as averageShaftPower ,\n    CAST(JSON_VALUE(rsEngine.value, '$.generatedShaftEnergy') as float) as generatedShaftEnergy ,\n    CAST(JSON_VALUE(rsEngine.value, '$.averageGeneratorPower') as float) as averageGeneratorPower ,\n    CAST(JSON_VALUE(rsEngine.value, '$.relativePower') as float) as relativePower,\n    CAST(JSON_VALUE(rsEngine.value, '$.generatedGeneratorEnergy') as float) as generatedGeneratorEnergy,\n    CAST(JSON_VALUE(rsEngine.value, '$.propellerPitch') as float) as propellerPitch,\n    CAST(JSON_VALUE(rsEngine.value, '$.slipThroughWater') as float) as slipThroughWater,\n    CAST(JSON_VALUE(rsEngine.value, '$.slipOverGround') as float) as slipOverGround,\n    CAST(JSON_VALUE(rsEngine.value, '$.engineDistance') as float) as engineDistance,\n    CAST(JSON_VALUE(rsEngine.value, '$.relativeGeneratorPower') as float) as relativeGeneratorPower,\n    CAST(JSON_VALUE(rsEngine.value, '$.load') as float) as load,\n    --CAST(JSON_QUERY(rsEngine.value, '$.lubOilConsumptions') as nvarchar(max)) as lubOilConsumptions,\n    CAST(JSON_VALUE(rsEngine.value, '$.averagePower') as float) as averagePower,  \n    CAST(JSON_VALUE(rsEngine.value, '$.generatedEnergy') as float) as generatedEnergy,  \n    CAST(JSON_VALUE(rsEngine.value, '$.sfoc') as float) as sfoc,  \n    CAST(JSON_VALUE(rsEngine.value, '$.sfocIso') as float) as sfocIso,  \n    CAST(JSON_VALUE(rsEngine.value, '$.averageNoxValue') as float) as averageNoxValue,  \n    --CAST(JSON_QUERY(rsEngine.value, '$.consumptions') as nvarchar(max)) as consumptions,\n    CAST(JSON_VALUE(rsEngine.value, '$.totalFoc') as float) as totalFoc,  \n    CAST(JSON_VALUE(rsEngine.value, '$.totalFocIso') as float) as totalFocIso,  \n    CAST(JSON_VALUE(rsEngine.value, '$.totalCo2') as float) as totalCo2,  \n    CAST(JSON_VALUE(rsEngine.value, '$.no') as int) as no, \n    CAST(JSON_VALUE(rsEngine.value, '$.runningHours') as float) as runningHours,  \n    getdate() as LoadDateTime,\n    rs.LOAD_ID as load_ID,\n    rs.isdeleted\nfrom \"Bronze\".\"dbo\".\"bto_reportsummaries\" rs\ncross apply openjson(rs.json_data, '$.aggregationDetails.boilers') as rsEngine", "extra_ctes_injected": true, "extra_ctes": []}, "model.dbtProject_v2.BTO_Reports_Consumptions": {"database": "Silver", "schema": "dbo", "name": "BTO_Reports_Consumptions", "resource_type": "model", "package_name": "dbtProject_v2", "path": "silver\\BTO_Reports_Consumptions.sql", "original_file_path": "models\\silver\\BTO_Reports_Consumptions.sql", "unique_id": "model.dbtProject_v2.BTO_Reports_Consumptions", "fqn": ["dbtProject_v2", "silver", "BTO_Reports_Consumptions"], "alias": "BTO_Reports_Consumptions", "checksum": {"name": "sha256", "checksum": "c2690c47db16303567155d4ba577ad1f1316952d0ff94edd788290c569d51c03"}, "config": {"enabled": true, "alias": null, "schema": "dbo", "database": "Silver", "tags": [], "meta": {}, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "dbtProject_v2://models\\schema.yml", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "schema": "dbo", "database": "Silver"}, "created_at": 1720542776.0880628, "relation_name": "\"Silver\".\"dbo\".\"BTO_Reports_Consumptions\"", "raw_code": "with source as (\r\n    select\r\n\trs.reportId as reportId,\r\n    rs.IMO as IMO, \r\n    'Main' as EngineCategory, \r\n    CAST(JSON_VALUE(rsEngine.value, '$.name') as varchar(max)) as name,\r\n    CAST(JSON_VALUE(rsEngine.value, '$.runningHoursShaftGenerator') as varchar(max)) as runningHoursShaftGenerator,\r\n    CAST(JSON_VALUE(rsEngine.value, '$.averageShaftRpm') as varchar(max)) as averageShaftRpm,\r\n    CAST(JSON_VALUE(rsEngine.value, '$.shaftRevolutions') as varchar(max)) as shaftRevolutions,\r\n    CAST(JSON_VALUE(rsEngine.value, '$.generatorEfficiency') as varchar(max)) as generatorEfficiency ,\r\n    CAST(JSON_VALUE(rsEngine.value, '$.averageShaftPower') as varchar(max)) as averageShaftPower ,\r\n    CAST(JSON_VALUE(rsEngine.value, '$.generatedShaftEnergy') as varchar(max)) as generatedShaftEnergy ,\r\n    CAST(JSON_VALUE(rsEngine.value, '$.averageGeneratorPower') as varchar(max)) as averageGeneratorPower ,\r\n    CAST(JSON_VALUE(rsEngine.value, '$.relativePower') as varchar(max)) as relativePower,\r\n    CAST(JSON_VALUE(rsEngine.value, '$.generatedGeneratorEnergy') as varchar(max)) as generatedGeneratorEnergy,\r\n    CAST(JSON_VALUE(rsEngine.value, '$.propellerPitch') as varchar(max)) as propellerPitch,\r\n    CAST(JSON_VALUE(rsEngine.value, '$.slipThroughWater') as varchar(max)) as slipThroughWater,\r\n    CAST(JSON_VALUE(rsEngine.value, '$.slipOverGround') as varchar(max)) as slipOverGround,\r\n    CAST(JSON_VALUE(rsEngine.value, '$.engineDistance') as varchar(max)) as engineDistance,\r\n    CAST(JSON_VALUE(rsEngine.value, '$.relativeGeneratorPower') as varchar(max)) as relativeGeneratorPower,\r\n    CAST(JSON_VALUE(rsEngine.value, '$.load') as varchar(max)) as load,\r\n    CAST(JSON_QUERY(rsEngine.value, '$.lubOilConsumptions') as varchar(max)) as lubOilConsumptions,\r\n    CAST(JSON_VALUE(rsEngine.value, '$.averagePower') as varchar(max)) as averagePower,  \r\n    CAST(JSON_VALUE(rsEngine.value, '$.generatedEnergy') as varchar(max)) as generatedEnergy,  \r\n    CAST(JSON_VALUE(rsEngine.value, '$.sfoc') as varchar(max)) as sfoc,  \r\n    CAST(JSON_VALUE(rsEngine.value, '$.sfocIso') as varchar(max)) as sfocIso,  \r\n    CAST(JSON_VALUE(rsEngine.value, '$.averageNoxValue') as varchar(max)) as averageNoxValue,  \r\n    CAST(JSON_QUERY(rsEngine.value, '$.consumptions') as varchar(max)) as consumptions,\r\n    CAST(JSON_VALUE(rsEngine.value, '$.totalFoc') as varchar(max)) as totalFoc,  \r\n    CAST(JSON_VALUE(rsEngine.value, '$.totalFocIso') as varchar(max)) as totalFocIso,  \r\n    CAST(JSON_VALUE(rsEngine.value, '$.totalCo2') as varchar(max)) as totalCo2,  \r\n    CAST(JSON_VALUE(rsEngine.value, '$.no') as varchar(max)) as no, \r\n    CAST(JSON_VALUE(rsEngine.value, '$.runningHours') as varchar(max)) as runningHours, \r\n    getdate() as LoadDateTime, \r\n    rs.LOAD_ID as load_ID,\r\n    rs.isdeleted\r\nfrom {{ ref('bto_reportsummaries') }} as rs\r\ncross apply openjson(rs.json_data, '$.aggregationDetails.mainEngines') as rsEngine\r\nUNION ALL\r\nselect \r\n\trs.reportId as reportId,\r\n    rs.IMO as IMO,  \r\n    'Aux' as EngineCategory, \r\n    CAST(JSON_VALUE(rsEngine.value, '$.name') as varchar(max)) as name,\r\n    CAST(JSON_VALUE(rsEngine.value, '$.runningHoursShaftGenerator') as varchar(max)) as runningHoursShaftGenerator,\r\n    CAST(JSON_VALUE(rsEngine.value, '$.averageShaftRpm') as varchar(max)) as averageShaftRpm,\r\n    CAST(JSON_VALUE(rsEngine.value, '$.shaftRevolutions') as varchar(max)) as shaftRevolutions,\r\n    CAST(JSON_VALUE(rsEngine.value, '$.generatorEfficiency') as varchar(max)) as generatorEfficiency ,\r\n    CAST(JSON_VALUE(rsEngine.value, '$.averageShaftPower') as varchar(max)) as averageShaftPower ,\r\n    CAST(JSON_VALUE(rsEngine.value, '$.generatedShaftEnergy') as varchar(max)) as generatedShaftEnergy ,\r\n    CAST(JSON_VALUE(rsEngine.value, '$.averageGeneratorPower') as varchar(max)) as averageGeneratorPower ,\r\n    CAST(JSON_VALUE(rsEngine.value, '$.relativePower') as varchar(max)) as relativePower,\r\n    CAST(JSON_VALUE(rsEngine.value, '$.generatedGeneratorEnergy') as varchar(max)) as generatedGeneratorEnergy,\r\n    CAST(JSON_VALUE(rsEngine.value, '$.propellerPitch') as varchar(max)) as propellerPitch,\r\n    CAST(JSON_VALUE(rsEngine.value, '$.slipThroughWater') as varchar(max)) as slipThroughWater,\r\n    CAST(JSON_VALUE(rsEngine.value, '$.slipOverGround') as varchar(max)) as slipOverGround,\r\n    CAST(JSON_VALUE(rsEngine.value, '$.engineDistance') as varchar(max)) as engineDistance,\r\n    CAST(JSON_VALUE(rsEngine.value, '$.relativeGeneratorPower') as varchar(max)) as relativeGeneratorPower,\r\n    CAST(JSON_VALUE(rsEngine.value, '$.load') as varchar(max)) as load,\r\n    CAST(JSON_QUERY(rsEngine.value, '$.lubOilConsumptions') as varchar(max)) as lubOilConsumptions,\r\n    CAST(JSON_VALUE(rsEngine.value, '$.averagePower') as varchar(max)) as averagePower,  \r\n    CAST(JSON_VALUE(rsEngine.value, '$.generatedEnergy') as varchar(max)) as generatedEnergy,  \r\n    CAST(JSON_VALUE(rsEngine.value, '$.sfoc') as varchar(max)) as sfoc,  \r\n    CAST(JSON_VALUE(rsEngine.value, '$.sfocIso') as varchar(max)) as sfocIso,  \r\n    CAST(JSON_VALUE(rsEngine.value, '$.averageNoxValue') as varchar(max)) as averageNoxValue,  \r\n    CAST(JSON_QUERY(rsEngine.value, '$.consumptions') as varchar(max)) as consumptions,\r\n    CAST(JSON_VALUE(rsEngine.value, '$.totalFoc') as varchar(max)) as totalFoc,  \r\n    CAST(JSON_VALUE(rsEngine.value, '$.totalFocIso') as varchar(max)) as totalFocIso,  \r\n    CAST(JSON_VALUE(rsEngine.value, '$.totalCo2') as varchar(max)) as totalCo2,  \r\n    CAST(JSON_VALUE(rsEngine.value, '$.no') as varchar(max)) as no, \r\n    CAST(JSON_VALUE(rsEngine.value, '$.runningHours') as varchar(max)) as runningHours,  \r\n    getdate() as LoadDateTime,\r\n    rs.LOAD_ID as load_ID,\r\n    rs.isdeleted\r\nfrom {{ ref('bto_reportsummaries') }} as rs\r\ncross apply openjson(rs.json_data, '$.aggregationDetails.auxEngines') as rsEngine\r\n), source2 as (\r\nselect\r\n\trs.reportId as reportId,\r\n    rs.IMO as IMO,\r\n    CAST(JSON_VALUE(rsConsumptions.value, '$.aggregate') as varchar(max)) as engineName,\r\n    'AggregateConsumption' as ConsumptionCategory,\r\n    CAST(JSON_VALUE(rsConsumptions.value, '$.kind') as varchar(max)) as kind,\r\n    CAST(JSON_VALUE(rsConsumptions.value, '$.amount') as float) as amount,\r\n    CAST(JSON_VALUE(rsConsumptions.value, '$.amountIso') as float) as amountIso,\r\n    CAST(JSON_VALUE(rsConsumptions.value, '$.amountCo2') as float) as amountCo2,\r\n    CAST(JSON_VALUE(rsConsumptions.value, '$.volume') as float) as volume,\r\n    CAST(JSON_VALUE(rsConsumptions.value, '$.density') as float) as density,\r\n    CAST(JSON_VALUE(rsConsumptions.value, '$.temp') as float) as temp,\r\n    --CAST(JSON_QUERY(rsConsumptions.value, '$.type') as varchar(max)) as type,\r\n    CAST(JSON_VALUE(rsConsumptions.value, '$.type.grade') as varchar(max)) as type_grade,\r\n    CAST(JSON_VALUE(rsConsumptions.value, '$.type.density') as float) as type_density,\r\n    CAST(JSON_VALUE(rsConsumptions.value, '$.type.lcv') as float) as type_lcv,\r\n    CAST(JSON_VALUE(rsConsumptions.value, '$.type.sulphur') as float) as type_sulphur,\r\n    CAST(JSON_VALUE(rsConsumptions.value, '$.type.sulphurEstimated') as BIT) as type_sulphurEstimated,\r\n    CAST(JSON_VALUE(rsConsumptions.value, '$.type.co2Factor') as float) as type_co2Factor,\r\n    CAST(JSON_VALUE(rsConsumptions.value, '$.type.energyContent') as float) as type_energyContent,\r\n    CAST(JSON_VALUE(rsConsumptions.value, '$.type.kinematicViscosity') as float) as type_kinematicViscosity,\r\n    CAST(JSON_QUERY(rsConsumptions.value, '$.bioFuelBlendDetails') as varchar(Max)) as bioFuelBlendDetails,\r\n    CAST(JSON_VALUE(rsConsumptions.value, '$.bioFuelBlendDetails.bioBlend') as varchar(max)) as bioFuelBlendDetails_bioBlend,\r\n    CAST(JSON_VALUE(rsConsumptions.value, '$.bioFuelBlendDetails.fossilBlend') as varchar(max)) as bioFuelBlendDetails_fossilBlend,\r\n    CAST(JSON_VALUE(rsConsumptions.value, '$.bioFuelBlendDetails.percentageOfBioFuelInBlend') as float) as bioFuelBlendDetails_percentageOfBioFuelInBlend,\r\n    getdate() as LoadDateTime,\r\n    rs.LOAD_ID as LOAD_ID,\r\n    rs.isdeleted\r\nfrom {{ ref('bto_reportsummaries') }}  as rs\r\ncross apply openjson(rs.json_data, '$.aggregationDetails.aggregateConsumptions') as rsConsumptions\r\nUNION ALL\r\nselect\r\n\trsEngine.reportId as reportId,\r\n    rsEngine.IMO as IMO,\r\n    rsEngine.name as engineName,\r\n    'Consumption' as ConsumptionCategory,\r\n    CAST(JSON_VALUE(rsConsumptions.value, '$.kind') as varchar(max)) as kind,\r\n    CAST(JSON_VALUE(rsConsumptions.value, '$.amount') as float) as amount,\r\n    CAST(JSON_VALUE(rsConsumptions.value, '$.amountIso') as float) as amountIso,\r\n    CAST(JSON_VALUE(rsConsumptions.value, '$.amountCo2') as float) as amountCo2,\r\n    CAST(JSON_VALUE(rsConsumptions.value, '$.volume') as float) as volume,\r\n    CAST(JSON_VALUE(rsConsumptions.value, '$.density') as float) as density,\r\n    CAST(JSON_VALUE(rsConsumptions.value, '$.temp') as float) as temp,\r\n    --CAST(JSON_QUERY(rsConsumptions.value, '$.type') as varchar(Max)) as type,\r\n    CAST(JSON_VALUE(rsConsumptions.value, '$.type.grade') as varchar(max)) as type_grade,\r\n    CAST(JSON_VALUE(rsConsumptions.value, '$.type.density') as float) as type_density,\r\n    CAST(JSON_VALUE(rsConsumptions.value, '$.type.lcv') as float) as type_lcv,\r\n    CAST(JSON_VALUE(rsConsumptions.value, '$.type.sulphur') as float) as type_sulphur,\r\n    CAST(JSON_VALUE(rsConsumptions.value, '$.type.sulphurEstimated') as BIT) as type_sulphurEstimated,\r\n    CAST(JSON_VALUE(rsConsumptions.value, '$.type.co2Factor') as float) as type_co2Factor,\r\n    CAST(JSON_VALUE(rsConsumptions.value, '$.type.energyContent') as float) as type_energyContent,\r\n    CAST(JSON_VALUE(rsConsumptions.value, '$.type.kinematicViscosity') as float) as type_kinematicViscosity,\r\n    CAST(JSON_QUERY(rsConsumptions.value, '$.type.bioFuelBlendDetails') as varchar(Max)) as type_bioFuelBlendDetails,\r\n    CAST(JSON_VALUE(rsConsumptions.value, '$.type.bioFuelBlendDetails.bioBlend') as varchar(max)) as type_bioFuelBlendDetails_bioBlend,\r\n    CAST(JSON_VALUE(rsConsumptions.value, '$.type.bioFuelBlendDetails.fossilBlend') as varchar(max)) as type_bioFuelBlendDetails_fossilBlend,\r\n    CAST(JSON_VALUE(rsConsumptions.value, '$.type.bioFuelBlendDetails.percentageOfBioFuelInBlend') as float) as type_bioFuelBlendDetails_percentageOfBioFuelInBlend,\r\n    getdate() as LoadDateTime,\r\n    rsEngine.load_Id as LOAD_ID,\r\n    rsEngine.isdeleted\r\n    \r\nfrom source as rsEngine\r\ncross apply openjson(rsEngine.consumptions, '$') as rsConsumptions\r\n)\r\nselect * from source2", "language": "sql", "refs": [["bto_reportsummaries"], ["bto_reportsummaries"], ["bto_reportsummaries"]], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.dbtProject_v2.bto_reportsummaries", "model.dbtProject_v2.bto_reportsummaries", "model.dbtProject_v2.bto_reportsummaries", "model.dbtProject_v2.bto_reportsummaries", "model.dbtProject_v2.bto_reportsummaries", "model.dbtProject_v2.bto_reportsummaries"]}, "compiled_path": "target\\compiled\\dbtProject_v2\\models\\silver\\BTO_Reports_Consumptions.sql", "compiled": true, "compiled_code": "with source as (\n    select\n\trs.reportId as reportId,\n    rs.IMO as IMO, \n    'Main' as EngineCategory, \n    CAST(JSON_VALUE(rsEngine.value, '$.name') as varchar(max)) as name,\n    CAST(JSON_VALUE(rsEngine.value, '$.runningHoursShaftGenerator') as varchar(max)) as runningHoursShaftGenerator,\n    CAST(JSON_VALUE(rsEngine.value, '$.averageShaftRpm') as varchar(max)) as averageShaftRpm,\n    CAST(JSON_VALUE(rsEngine.value, '$.shaftRevolutions') as varchar(max)) as shaftRevolutions,\n    CAST(JSON_VALUE(rsEngine.value, '$.generatorEfficiency') as varchar(max)) as generatorEfficiency ,\n    CAST(JSON_VALUE(rsEngine.value, '$.averageShaftPower') as varchar(max)) as averageShaftPower ,\n    CAST(JSON_VALUE(rsEngine.value, '$.generatedShaftEnergy') as varchar(max)) as generatedShaftEnergy ,\n    CAST(JSON_VALUE(rsEngine.value, '$.averageGeneratorPower') as varchar(max)) as averageGeneratorPower ,\n    CAST(JSON_VALUE(rsEngine.value, '$.relativePower') as varchar(max)) as relativePower,\n    CAST(JSON_VALUE(rsEngine.value, '$.generatedGeneratorEnergy') as varchar(max)) as generatedGeneratorEnergy,\n    CAST(JSON_VALUE(rsEngine.value, '$.propellerPitch') as varchar(max)) as propellerPitch,\n    CAST(JSON_VALUE(rsEngine.value, '$.slipThroughWater') as varchar(max)) as slipThroughWater,\n    CAST(JSON_VALUE(rsEngine.value, '$.slipOverGround') as varchar(max)) as slipOverGround,\n    CAST(JSON_VALUE(rsEngine.value, '$.engineDistance') as varchar(max)) as engineDistance,\n    CAST(JSON_VALUE(rsEngine.value, '$.relativeGeneratorPower') as varchar(max)) as relativeGeneratorPower,\n    CAST(JSON_VALUE(rsEngine.value, '$.load') as varchar(max)) as load,\n    CAST(JSON_QUERY(rsEngine.value, '$.lubOilConsumptions') as varchar(max)) as lubOilConsumptions,\n    CAST(JSON_VALUE(rsEngine.value, '$.averagePower') as varchar(max)) as averagePower,  \n    CAST(JSON_VALUE(rsEngine.value, '$.generatedEnergy') as varchar(max)) as generatedEnergy,  \n    CAST(JSON_VALUE(rsEngine.value, '$.sfoc') as varchar(max)) as sfoc,  \n    CAST(JSON_VALUE(rsEngine.value, '$.sfocIso') as varchar(max)) as sfocIso,  \n    CAST(JSON_VALUE(rsEngine.value, '$.averageNoxValue') as varchar(max)) as averageNoxValue,  \n    CAST(JSON_QUERY(rsEngine.value, '$.consumptions') as varchar(max)) as consumptions,\n    CAST(JSON_VALUE(rsEngine.value, '$.totalFoc') as varchar(max)) as totalFoc,  \n    CAST(JSON_VALUE(rsEngine.value, '$.totalFocIso') as varchar(max)) as totalFocIso,  \n    CAST(JSON_VALUE(rsEngine.value, '$.totalCo2') as varchar(max)) as totalCo2,  \n    CAST(JSON_VALUE(rsEngine.value, '$.no') as varchar(max)) as no, \n    CAST(JSON_VALUE(rsEngine.value, '$.runningHours') as varchar(max)) as runningHours, \n    getdate() as LoadDateTime, \n    rs.LOAD_ID as load_ID,\n    rs.isdeleted\nfrom \"Bronze\".\"dbo\".\"bto_reportsummaries\" as rs\ncross apply openjson(rs.json_data, '$.aggregationDetails.mainEngines') as rsEngine\nUNION ALL\nselect \n\trs.reportId as reportId,\n    rs.IMO as IMO,  \n    'Aux' as EngineCategory, \n    CAST(JSON_VALUE(rsEngine.value, '$.name') as varchar(max)) as name,\n    CAST(JSON_VALUE(rsEngine.value, '$.runningHoursShaftGenerator') as varchar(max)) as runningHoursShaftGenerator,\n    CAST(JSON_VALUE(rsEngine.value, '$.averageShaftRpm') as varchar(max)) as averageShaftRpm,\n    CAST(JSON_VALUE(rsEngine.value, '$.shaftRevolutions') as varchar(max)) as shaftRevolutions,\n    CAST(JSON_VALUE(rsEngine.value, '$.generatorEfficiency') as varchar(max)) as generatorEfficiency ,\n    CAST(JSON_VALUE(rsEngine.value, '$.averageShaftPower') as varchar(max)) as averageShaftPower ,\n    CAST(JSON_VALUE(rsEngine.value, '$.generatedShaftEnergy') as varchar(max)) as generatedShaftEnergy ,\n    CAST(JSON_VALUE(rsEngine.value, '$.averageGeneratorPower') as varchar(max)) as averageGeneratorPower ,\n    CAST(JSON_VALUE(rsEngine.value, '$.relativePower') as varchar(max)) as relativePower,\n    CAST(JSON_VALUE(rsEngine.value, '$.generatedGeneratorEnergy') as varchar(max)) as generatedGeneratorEnergy,\n    CAST(JSON_VALUE(rsEngine.value, '$.propellerPitch') as varchar(max)) as propellerPitch,\n    CAST(JSON_VALUE(rsEngine.value, '$.slipThroughWater') as varchar(max)) as slipThroughWater,\n    CAST(JSON_VALUE(rsEngine.value, '$.slipOverGround') as varchar(max)) as slipOverGround,\n    CAST(JSON_VALUE(rsEngine.value, '$.engineDistance') as varchar(max)) as engineDistance,\n    CAST(JSON_VALUE(rsEngine.value, '$.relativeGeneratorPower') as varchar(max)) as relativeGeneratorPower,\n    CAST(JSON_VALUE(rsEngine.value, '$.load') as varchar(max)) as load,\n    CAST(JSON_QUERY(rsEngine.value, '$.lubOilConsumptions') as varchar(max)) as lubOilConsumptions,\n    CAST(JSON_VALUE(rsEngine.value, '$.averagePower') as varchar(max)) as averagePower,  \n    CAST(JSON_VALUE(rsEngine.value, '$.generatedEnergy') as varchar(max)) as generatedEnergy,  \n    CAST(JSON_VALUE(rsEngine.value, '$.sfoc') as varchar(max)) as sfoc,  \n    CAST(JSON_VALUE(rsEngine.value, '$.sfocIso') as varchar(max)) as sfocIso,  \n    CAST(JSON_VALUE(rsEngine.value, '$.averageNoxValue') as varchar(max)) as averageNoxValue,  \n    CAST(JSON_QUERY(rsEngine.value, '$.consumptions') as varchar(max)) as consumptions,\n    CAST(JSON_VALUE(rsEngine.value, '$.totalFoc') as varchar(max)) as totalFoc,  \n    CAST(JSON_VALUE(rsEngine.value, '$.totalFocIso') as varchar(max)) as totalFocIso,  \n    CAST(JSON_VALUE(rsEngine.value, '$.totalCo2') as varchar(max)) as totalCo2,  \n    CAST(JSON_VALUE(rsEngine.value, '$.no') as varchar(max)) as no, \n    CAST(JSON_VALUE(rsEngine.value, '$.runningHours') as varchar(max)) as runningHours,  \n    getdate() as LoadDateTime,\n    rs.LOAD_ID as load_ID,\n    rs.isdeleted\nfrom \"Bronze\".\"dbo\".\"bto_reportsummaries\" as rs\ncross apply openjson(rs.json_data, '$.aggregationDetails.auxEngines') as rsEngine\n), source2 as (\nselect\n\trs.reportId as reportId,\n    rs.IMO as IMO,\n    CAST(JSON_VALUE(rsConsumptions.value, '$.aggregate') as varchar(max)) as engineName,\n    'AggregateConsumption' as ConsumptionCategory,\n    CAST(JSON_VALUE(rsConsumptions.value, '$.kind') as varchar(max)) as kind,\n    CAST(JSON_VALUE(rsConsumptions.value, '$.amount') as float) as amount,\n    CAST(JSON_VALUE(rsConsumptions.value, '$.amountIso') as float) as amountIso,\n    CAST(JSON_VALUE(rsConsumptions.value, '$.amountCo2') as float) as amountCo2,\n    CAST(JSON_VALUE(rsConsumptions.value, '$.volume') as float) as volume,\n    CAST(JSON_VALUE(rsConsumptions.value, '$.density') as float) as density,\n    CAST(JSON_VALUE(rsConsumptions.value, '$.temp') as float) as temp,\n    --CAST(JSON_QUERY(rsConsumptions.value, '$.type') as varchar(max)) as type,\n    CAST(JSON_VALUE(rsConsumptions.value, '$.type.grade') as varchar(max)) as type_grade,\n    CAST(JSON_VALUE(rsConsumptions.value, '$.type.density') as float) as type_density,\n    CAST(JSON_VALUE(rsConsumptions.value, '$.type.lcv') as float) as type_lcv,\n    CAST(JSON_VALUE(rsConsumptions.value, '$.type.sulphur') as float) as type_sulphur,\n    CAST(JSON_VALUE(rsConsumptions.value, '$.type.sulphurEstimated') as BIT) as type_sulphurEstimated,\n    CAST(JSON_VALUE(rsConsumptions.value, '$.type.co2Factor') as float) as type_co2Factor,\n    CAST(JSON_VALUE(rsConsumptions.value, '$.type.energyContent') as float) as type_energyContent,\n    CAST(JSON_VALUE(rsConsumptions.value, '$.type.kinematicViscosity') as float) as type_kinematicViscosity,\n    CAST(JSON_QUERY(rsConsumptions.value, '$.bioFuelBlendDetails') as varchar(Max)) as bioFuelBlendDetails,\n    CAST(JSON_VALUE(rsConsumptions.value, '$.bioFuelBlendDetails.bioBlend') as varchar(max)) as bioFuelBlendDetails_bioBlend,\n    CAST(JSON_VALUE(rsConsumptions.value, '$.bioFuelBlendDetails.fossilBlend') as varchar(max)) as bioFuelBlendDetails_fossilBlend,\n    CAST(JSON_VALUE(rsConsumptions.value, '$.bioFuelBlendDetails.percentageOfBioFuelInBlend') as float) as bioFuelBlendDetails_percentageOfBioFuelInBlend,\n    getdate() as LoadDateTime,\n    rs.LOAD_ID as LOAD_ID,\n    rs.isdeleted\nfrom \"Bronze\".\"dbo\".\"bto_reportsummaries\"  as rs\ncross apply openjson(rs.json_data, '$.aggregationDetails.aggregateConsumptions') as rsConsumptions\nUNION ALL\nselect\n\trsEngine.reportId as reportId,\n    rsEngine.IMO as IMO,\n    rsEngine.name as engineName,\n    'Consumption' as ConsumptionCategory,\n    CAST(JSON_VALUE(rsConsumptions.value, '$.kind') as varchar(max)) as kind,\n    CAST(JSON_VALUE(rsConsumptions.value, '$.amount') as float) as amount,\n    CAST(JSON_VALUE(rsConsumptions.value, '$.amountIso') as float) as amountIso,\n    CAST(JSON_VALUE(rsConsumptions.value, '$.amountCo2') as float) as amountCo2,\n    CAST(JSON_VALUE(rsConsumptions.value, '$.volume') as float) as volume,\n    CAST(JSON_VALUE(rsConsumptions.value, '$.density') as float) as density,\n    CAST(JSON_VALUE(rsConsumptions.value, '$.temp') as float) as temp,\n    --CAST(JSON_QUERY(rsConsumptions.value, '$.type') as varchar(Max)) as type,\n    CAST(JSON_VALUE(rsConsumptions.value, '$.type.grade') as varchar(max)) as type_grade,\n    CAST(JSON_VALUE(rsConsumptions.value, '$.type.density') as float) as type_density,\n    CAST(JSON_VALUE(rsConsumptions.value, '$.type.lcv') as float) as type_lcv,\n    CAST(JSON_VALUE(rsConsumptions.value, '$.type.sulphur') as float) as type_sulphur,\n    CAST(JSON_VALUE(rsConsumptions.value, '$.type.sulphurEstimated') as BIT) as type_sulphurEstimated,\n    CAST(JSON_VALUE(rsConsumptions.value, '$.type.co2Factor') as float) as type_co2Factor,\n    CAST(JSON_VALUE(rsConsumptions.value, '$.type.energyContent') as float) as type_energyContent,\n    CAST(JSON_VALUE(rsConsumptions.value, '$.type.kinematicViscosity') as float) as type_kinematicViscosity,\n    CAST(JSON_QUERY(rsConsumptions.value, '$.type.bioFuelBlendDetails') as varchar(Max)) as type_bioFuelBlendDetails,\n    CAST(JSON_VALUE(rsConsumptions.value, '$.type.bioFuelBlendDetails.bioBlend') as varchar(max)) as type_bioFuelBlendDetails_bioBlend,\n    CAST(JSON_VALUE(rsConsumptions.value, '$.type.bioFuelBlendDetails.fossilBlend') as varchar(max)) as type_bioFuelBlendDetails_fossilBlend,\n    CAST(JSON_VALUE(rsConsumptions.value, '$.type.bioFuelBlendDetails.percentageOfBioFuelInBlend') as float) as type_bioFuelBlendDetails_percentageOfBioFuelInBlend,\n    getdate() as LoadDateTime,\n    rsEngine.load_Id as LOAD_ID,\n    rsEngine.isdeleted\n    \nfrom source as rsEngine\ncross apply openjson(rsEngine.consumptions, '$') as rsConsumptions\n)\nselect * from source2", "extra_ctes_injected": true, "extra_ctes": []}, "model.dbtProject_v2.BTO_Reports_Engines_AUX": {"database": "Silver", "schema": "dbo", "name": "BTO_Reports_Engines_AUX", "resource_type": "model", "package_name": "dbtProject_v2", "path": "silver\\BTO_Reports_Engines_AUX.sql", "original_file_path": "models\\silver\\BTO_Reports_Engines_AUX.sql", "unique_id": "model.dbtProject_v2.BTO_Reports_Engines_AUX", "fqn": ["dbtProject_v2", "silver", "BTO_Reports_Engines_AUX"], "alias": "BTO_Reports_Engines_AUX", "checksum": {"name": "sha256", "checksum": "5a7ae456e90c9785a422e2c19b7428113b7ee1973df8d5163a9a55619a1f31cd"}, "config": {"enabled": true, "alias": null, "schema": "dbo", "database": "Silver", "tags": [], "meta": {}, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "dbtProject_v2://models\\schema.yml", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "schema": "dbo", "database": "Silver"}, "created_at": 1720542776.103063, "relation_name": "\"Silver\".\"dbo\".\"BTO_Reports_Engines_AUX\"", "raw_code": "with source as (\r\nselect \r\n\trs.reportId as reportId,\r\n    rs.IMO as IMO,  \r\n    'Aux' as EngineCategory, \r\n    CAST(JSON_VALUE(rsEngine.value, '$.name') as nvarchar(max)) as name,\r\n    CAST(JSON_VALUE(rsEngine.value, '$.runningHoursShaftGenerator') as nvarchar(max)) as runningHoursShaftGenerator,\r\n    CAST(JSON_VALUE(rsEngine.value, '$.averageShaftRpm') as nvarchar(max)) as averageShaftRpm,\r\n    CAST(JSON_VALUE(rsEngine.value, '$.shaftRevolutions') as nvarchar(max)) as shaftRevolutions,\r\n    CAST(JSON_VALUE(rsEngine.value, '$.generatorEfficiency') as nvarchar(max)) as generatorEfficiency ,\r\n    CAST(JSON_VALUE(rsEngine.value, '$.averageShaftPower') as nvarchar(max)) as averageShaftPower ,\r\n    CAST(JSON_VALUE(rsEngine.value, '$.generatedShaftEnergy') as nvarchar(max)) as generatedShaftEnergy ,\r\n    CAST(JSON_VALUE(rsEngine.value, '$.averageGeneratorPower') as nvarchar(max)) as averageGeneratorPower ,\r\n    CAST(JSON_VALUE(rsEngine.value, '$.relativePower') as nvarchar(max)) as relativePower,\r\n    CAST(JSON_VALUE(rsEngine.value, '$.generatedGeneratorEnergy') as nvarchar(max)) as generatedGeneratorEnergy,\r\n    CAST(JSON_VALUE(rsEngine.value, '$.propellerPitch') as nvarchar(max)) as propellerPitch,\r\n    CAST(JSON_VALUE(rsEngine.value, '$.slipThroughWater') as nvarchar(max)) as slipThroughWater,\r\n    CAST(JSON_VALUE(rsEngine.value, '$.slipOverGround') as nvarchar(max)) as slipOverGround,\r\n    CAST(JSON_VALUE(rsEngine.value, '$.engineDistance') as nvarchar(max)) as engineDistance,\r\n    CAST(JSON_VALUE(rsEngine.value, '$.relativeGeneratorPower') as nvarchar(max)) as relativeGeneratorPower,\r\n    CAST(JSON_VALUE(rsEngine.value, '$.load') as nvarchar(max)) as load,\r\n    CAST(JSON_QUERY(rsEngine.value, '$.lubOilConsumptions') as nvarchar(max)) as lubOilConsumptions,\r\n    CAST(JSON_VALUE(rsEngine.value, '$.averagePower') as nvarchar(max)) as averagePower,  \r\n    CAST(JSON_VALUE(rsEngine.value, '$.generatedEnergy') as nvarchar(max)) as generatedEnergy,  \r\n    CAST(JSON_VALUE(rsEngine.value, '$.sfoc') as nvarchar(max)) as sfoc,  \r\n    CAST(JSON_VALUE(rsEngine.value, '$.sfocIso') as nvarchar(max)) as sfocIso,  \r\n    CAST(JSON_VALUE(rsEngine.value, '$.averageNoxValue') as nvarchar(max)) as averageNoxValue,  \r\n    CAST(JSON_QUERY(rsEngine.value, '$.consumptions') as nvarchar(max)) as consumptions,\r\n    CAST(JSON_VALUE(rsEngine.value, '$.totalFoc') as nvarchar(max)) as totalFoc,  \r\n    CAST(JSON_VALUE(rsEngine.value, '$.totalFocIso') as nvarchar(max)) as totalFocIso,  \r\n    CAST(JSON_VALUE(rsEngine.value, '$.totalCo2') as nvarchar(max)) as totalCo2,  \r\n    CAST(JSON_VALUE(rsEngine.value, '$.no') as nvarchar(max)) as no, \r\n    CAST(JSON_VALUE(rsEngine.value, '$.runningHours') as nvarchar(max)) as runningHours,  \r\n    rs.LOAD_ID as load_ID,\r\n    rs.isdeleted\r\nfrom {{ ref('bto_reportsummaries') }} as rs\r\ncross apply openjson(rs.json_data, '$.aggregationDetails.auxEngines') as rsEngine\r\n)\r\nselect\r\ncast(reportId as integer) as reportId,\r\ncast(IMO as integer) as IMO,\r\ncast(EngineCategory as varchar(max)) AS EngineCategory,\r\ncast(name as varchar(max)) as name,\r\ncast(runningHoursShaftGenerator as float) as runningHoursShaftGenerator,\r\ncast(averageShaftRpm as float) as averageShaftRpm,\r\ncast(shaftRevolutions as float) as shaftRevolutions,\r\ncast(generatorEfficiency as float) as generatorEfficiency,\r\ncast((case when averageShaftPower = 'NaN' or averageShaftPower= 'Infinity'  then null else averageShaftPower end) as float) as averageShaftPower,\r\ncast(generatedShaftEnergy as float) as generatedShaftEnergy,\r\ncast((case when averageGeneratorPower = 'Infinity' then null else averageGeneratorPower end) as float) as averageGeneratorPower,\r\ncast(relativePower as float) as relativePower,\r\ncast(generatedGeneratorEnergy as float) as generatedGeneratorEnergy, \r\ncast(propellerPitch as float) as propellerPitch,\r\ncast(slipThroughWater as float) as slipThroughWater,\r\ncast(slipOverGround as float) as slipOverGround,\r\ncast(engineDistance as float) as engineDistance,\r\ncast(load as float) as load,\r\ncast((case when averagePower = 'NaN' or averagePower= 'Infinity'  then null else averagePower end) as float) as averagePower,\r\ncast(generatedEnergy as float) as generatedEnergy,\r\ncast(sfoc as float) as sfoc,\r\ncast((case when sfocIso = 'NaN' or sfocIso= 'Infinity'  then null else sfocIso end) as float) as sfocIso,\r\ncast(averageNoxValue as float) as averageNoxValue,\r\ncast(totalFoc as float) as totalFoc,\r\ncast(totalFocIso as float) as totalFocIso,\r\ncast(totalCo2 as float) as totalCo2,\r\ncast(no as integer) as no,\r\ncast(runningHours as float) as runningHours,\r\ncast(relativeGeneratorPower as float) as relativeGeneratorPower,\r\ngetdate() as LoadDateTime,\r\nload_id,\r\nisdeleted\r\nfrom source", "language": "sql", "refs": [["bto_reportsummaries"]], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.dbtProject_v2.bto_reportsummaries", "model.dbtProject_v2.bto_reportsummaries"]}, "compiled_path": "target\\compiled\\dbtProject_v2\\models\\silver\\BTO_Reports_Engines_AUX.sql", "compiled": true, "compiled_code": "with source as (\nselect \n\trs.reportId as reportId,\n    rs.IMO as IMO,  \n    'Aux' as EngineCategory, \n    CAST(JSON_VALUE(rsEngine.value, '$.name') as nvarchar(max)) as name,\n    CAST(JSON_VALUE(rsEngine.value, '$.runningHoursShaftGenerator') as nvarchar(max)) as runningHoursShaftGenerator,\n    CAST(JSON_VALUE(rsEngine.value, '$.averageShaftRpm') as nvarchar(max)) as averageShaftRpm,\n    CAST(JSON_VALUE(rsEngine.value, '$.shaftRevolutions') as nvarchar(max)) as shaftRevolutions,\n    CAST(JSON_VALUE(rsEngine.value, '$.generatorEfficiency') as nvarchar(max)) as generatorEfficiency ,\n    CAST(JSON_VALUE(rsEngine.value, '$.averageShaftPower') as nvarchar(max)) as averageShaftPower ,\n    CAST(JSON_VALUE(rsEngine.value, '$.generatedShaftEnergy') as nvarchar(max)) as generatedShaftEnergy ,\n    CAST(JSON_VALUE(rsEngine.value, '$.averageGeneratorPower') as nvarchar(max)) as averageGeneratorPower ,\n    CAST(JSON_VALUE(rsEngine.value, '$.relativePower') as nvarchar(max)) as relativePower,\n    CAST(JSON_VALUE(rsEngine.value, '$.generatedGeneratorEnergy') as nvarchar(max)) as generatedGeneratorEnergy,\n    CAST(JSON_VALUE(rsEngine.value, '$.propellerPitch') as nvarchar(max)) as propellerPitch,\n    CAST(JSON_VALUE(rsEngine.value, '$.slipThroughWater') as nvarchar(max)) as slipThroughWater,\n    CAST(JSON_VALUE(rsEngine.value, '$.slipOverGround') as nvarchar(max)) as slipOverGround,\n    CAST(JSON_VALUE(rsEngine.value, '$.engineDistance') as nvarchar(max)) as engineDistance,\n    CAST(JSON_VALUE(rsEngine.value, '$.relativeGeneratorPower') as nvarchar(max)) as relativeGeneratorPower,\n    CAST(JSON_VALUE(rsEngine.value, '$.load') as nvarchar(max)) as load,\n    CAST(JSON_QUERY(rsEngine.value, '$.lubOilConsumptions') as nvarchar(max)) as lubOilConsumptions,\n    CAST(JSON_VALUE(rsEngine.value, '$.averagePower') as nvarchar(max)) as averagePower,  \n    CAST(JSON_VALUE(rsEngine.value, '$.generatedEnergy') as nvarchar(max)) as generatedEnergy,  \n    CAST(JSON_VALUE(rsEngine.value, '$.sfoc') as nvarchar(max)) as sfoc,  \n    CAST(JSON_VALUE(rsEngine.value, '$.sfocIso') as nvarchar(max)) as sfocIso,  \n    CAST(JSON_VALUE(rsEngine.value, '$.averageNoxValue') as nvarchar(max)) as averageNoxValue,  \n    CAST(JSON_QUERY(rsEngine.value, '$.consumptions') as nvarchar(max)) as consumptions,\n    CAST(JSON_VALUE(rsEngine.value, '$.totalFoc') as nvarchar(max)) as totalFoc,  \n    CAST(JSON_VALUE(rsEngine.value, '$.totalFocIso') as nvarchar(max)) as totalFocIso,  \n    CAST(JSON_VALUE(rsEngine.value, '$.totalCo2') as nvarchar(max)) as totalCo2,  \n    CAST(JSON_VALUE(rsEngine.value, '$.no') as nvarchar(max)) as no, \n    CAST(JSON_VALUE(rsEngine.value, '$.runningHours') as nvarchar(max)) as runningHours,  \n    rs.LOAD_ID as load_ID,\n    rs.isdeleted\nfrom \"Bronze\".\"dbo\".\"bto_reportsummaries\" as rs\ncross apply openjson(rs.json_data, '$.aggregationDetails.auxEngines') as rsEngine\n)\nselect\ncast(reportId as integer) as reportId,\ncast(IMO as integer) as IMO,\ncast(EngineCategory as varchar(max)) AS EngineCategory,\ncast(name as varchar(max)) as name,\ncast(runningHoursShaftGenerator as float) as runningHoursShaftGenerator,\ncast(averageShaftRpm as float) as averageShaftRpm,\ncast(shaftRevolutions as float) as shaftRevolutions,\ncast(generatorEfficiency as float) as generatorEfficiency,\ncast((case when averageShaftPower = 'NaN' or averageShaftPower= 'Infinity'  then null else averageShaftPower end) as float) as averageShaftPower,\ncast(generatedShaftEnergy as float) as generatedShaftEnergy,\ncast((case when averageGeneratorPower = 'Infinity' then null else averageGeneratorPower end) as float) as averageGeneratorPower,\ncast(relativePower as float) as relativePower,\ncast(generatedGeneratorEnergy as float) as generatedGeneratorEnergy, \ncast(propellerPitch as float) as propellerPitch,\ncast(slipThroughWater as float) as slipThroughWater,\ncast(slipOverGround as float) as slipOverGround,\ncast(engineDistance as float) as engineDistance,\ncast(load as float) as load,\ncast((case when averagePower = 'NaN' or averagePower= 'Infinity'  then null else averagePower end) as float) as averagePower,\ncast(generatedEnergy as float) as generatedEnergy,\ncast(sfoc as float) as sfoc,\ncast((case when sfocIso = 'NaN' or sfocIso= 'Infinity'  then null else sfocIso end) as float) as sfocIso,\ncast(averageNoxValue as float) as averageNoxValue,\ncast(totalFoc as float) as totalFoc,\ncast(totalFocIso as float) as totalFocIso,\ncast(totalCo2 as float) as totalCo2,\ncast(no as integer) as no,\ncast(runningHours as float) as runningHours,\ncast(relativeGeneratorPower as float) as relativeGeneratorPower,\ngetdate() as LoadDateTime,\nload_id,\nisdeleted\nfrom source", "extra_ctes_injected": true, "extra_ctes": []}, "model.dbtProject_v2.BTO_Reports_Engines_MAIN": {"database": "Silver", "schema": "dbo", "name": "BTO_Reports_Engines_MAIN", "resource_type": "model", "package_name": "dbtProject_v2", "path": "silver\\BTO_Reports_Engines_MAIN.sql", "original_file_path": "models\\silver\\BTO_Reports_Engines_MAIN.sql", "unique_id": "model.dbtProject_v2.BTO_Reports_Engines_MAIN", "fqn": ["dbtProject_v2", "silver", "BTO_Reports_Engines_MAIN"], "alias": "BTO_Reports_Engines_MAIN", "checksum": {"name": "sha256", "checksum": "87a396349fa0879a97e55a143457157c9f7ac583d078f3b5e98a56fbf2e2d261"}, "config": {"enabled": true, "alias": null, "schema": "dbo", "database": "Silver", "tags": [], "meta": {}, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "dbtProject_v2://models\\schema.yml", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "schema": "dbo", "database": "Silver"}, "created_at": 1720542776.103063, "relation_name": "\"Silver\".\"dbo\".\"BTO_Reports_Engines_MAIN\"", "raw_code": "with source as (\r\nselect\r\n\trs.reportId as reportId,\r\n    rs.IMO as IMO, \r\n    'Main' as EngineCategory, \r\n    CAST(JSON_VALUE(rsEngine.value, '$.name') as nvarchar(max)) as name,\r\n    CAST(JSON_VALUE(rsEngine.value, '$.runningHoursShaftGenerator') as nvarchar(max)) as runningHoursShaftGenerator,\r\n    CAST(JSON_VALUE(rsEngine.value, '$.averageShaftRpm') as nvarchar(max)) as averageShaftRpm,\r\n    CAST(JSON_VALUE(rsEngine.value, '$.shaftRevolutions') as nvarchar(max)) as shaftRevolutions,\r\n    CAST(JSON_VALUE(rsEngine.value, '$.generatorEfficiency') as nvarchar(max)) as generatorEfficiency ,\r\n    CAST(JSON_VALUE(rsEngine.value, '$.averageShaftPower') as nvarchar(max)) as averageShaftPower ,\r\n    CAST(JSON_VALUE(rsEngine.value, '$.generatedShaftEnergy') as nvarchar(max)) as generatedShaftEnergy ,\r\n    CAST(JSON_VALUE(rsEngine.value, '$.averageGeneratorPower') as nvarchar(max)) as averageGeneratorPower ,\r\n    CAST(JSON_VALUE(rsEngine.value, '$.relativePower') as nvarchar(max)) as relativePower,\r\n    CAST(JSON_VALUE(rsEngine.value, '$.generatedGeneratorEnergy') as nvarchar(max)) as generatedGeneratorEnergy,\r\n    CAST(JSON_VALUE(rsEngine.value, '$.propellerPitch') as nvarchar(max)) as propellerPitch,\r\n    CAST(JSON_VALUE(rsEngine.value, '$.slipThroughWater') as nvarchar(max)) as slipThroughWater,\r\n    CAST(JSON_VALUE(rsEngine.value, '$.slipOverGround') as nvarchar(max)) as slipOverGround,\r\n    CAST(JSON_VALUE(rsEngine.value, '$.engineDistance') as nvarchar(max)) as engineDistance,\r\n    CAST(JSON_VALUE(rsEngine.value, '$.relativeGeneratorPower') as nvarchar(max)) as relativeGeneratorPower,\r\n    CAST(JSON_VALUE(rsEngine.value, '$.load') as nvarchar(max)) as load,\r\n    CAST(JSON_QUERY(rsEngine.value, '$.lubOilConsumptions') as nvarchar(max)) as lubOilConsumptions,\r\n    CAST(JSON_VALUE(rsEngine.value, '$.averagePower') as nvarchar(max)) as averagePower,  \r\n    CAST(JSON_VALUE(rsEngine.value, '$.generatedEnergy') as nvarchar(max)) as generatedEnergy,  \r\n    CAST(JSON_VALUE(rsEngine.value, '$.sfoc') as nvarchar(max)) as sfoc,  \r\n    CAST(JSON_VALUE(rsEngine.value, '$.sfocIso') as nvarchar(max)) as sfocIso,  \r\n    CAST(JSON_VALUE(rsEngine.value, '$.averageNoxValue') as nvarchar(max)) as averageNoxValue,  \r\n    CAST(JSON_QUERY(rsEngine.value, '$.consumptions') as nvarchar(max)) as consumptions,\r\n    CAST(JSON_VALUE(rsEngine.value, '$.totalFoc') as nvarchar(max)) as totalFoc,  \r\n    CAST(JSON_VALUE(rsEngine.value, '$.totalFocIso') as nvarchar(max)) as totalFocIso,  \r\n    CAST(JSON_VALUE(rsEngine.value, '$.totalCo2') as nvarchar(max)) as totalCo2,  \r\n    CAST(JSON_VALUE(rsEngine.value, '$.no') as nvarchar(max)) as no, \r\n    CAST(JSON_VALUE(rsEngine.value, '$.runningHours') as nvarchar(max)) as runningHours,  \r\n    rs.LOAD_ID as load_ID,\r\n    rs.isdeleted\r\nfrom {{ ref('bto_reportsummaries') }} as rs\r\ncross apply openjson(rs.json_data, '$.aggregationDetails.mainEngines') as rsEngine\r\n)\r\nselect\r\ncast(reportId as integer) as reportId,\r\ncast(IMO as integer) as IMO,\r\ncast(EngineCategory as varchar(max)) AS EngineCategory,\r\ncast(name as varchar(max)) as name,\r\ncast(runningHoursShaftGenerator as float) as runningHoursShaftGenerator,\r\ncast(averageShaftRpm as float) as averageShaftRpm,\r\ncast(shaftRevolutions as float) as shaftRevolutions,\r\ncast(generatorEfficiency as float) as generatorEfficiency,\r\ncast((case when averageShaftPower in ('Infinity', 'NaN') then null else averageShaftPower end) as float) as averageShaftPower,\r\ncast(generatedShaftEnergy as float) as generatedShaftEnergy,\r\ncast((case when averageGeneratorPower = 'Infinity' then null else averageGeneratorPower end) as float) as averageGeneratorPower,\r\ncast(relativePower as float) as relativePower,\r\ncast(generatedGeneratorEnergy as float) as generatedGeneratorEnergy, \r\ncast(propellerPitch as float) as propellerPitch,\r\ncast(slipThroughWater as float) as slipThroughWater,\r\ncast(slipOverGround as float) as slipOverGround,\r\ncast(engineDistance as float) as engineDistance,\r\ncast(load as float) as load,\r\ncast((case when averagePower = 'NaN' or averagePower= 'Infinity'  then null else averagePower end) as float) as averagePower,\r\ncast(generatedEnergy as float) as generatedEnergy,\r\ncast(sfoc as float) as sfoc,\r\ncast((case when sfocIso = 'NaN' or sfocIso= 'Infinity'  then null else sfocIso end) as float) as sfocIso,\r\ncast(averageNoxValue as float) as averageNoxValue,\r\ncast(totalFoc as float) as totalFoc,\r\ncast(totalFocIso as float) as totalFocIso,\r\ncast(totalCo2 as float) as totalCo2,\r\ncast(no as integer) as no,\r\ncast(runningHours as float) as runningHours,\r\ncast(relativeGeneratorPower as float) as relativeGeneratorPower,\r\ngetdate() as LoadDateTime,\r\nload_id,\r\nisdeleted\r\nfrom source", "language": "sql", "refs": [["bto_reportsummaries"]], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.dbtProject_v2.bto_reportsummaries", "model.dbtProject_v2.bto_reportsummaries"]}, "compiled_path": "target\\compiled\\dbtProject_v2\\models\\silver\\BTO_Reports_Engines_MAIN.sql", "compiled": true, "compiled_code": "with source as (\nselect\n\trs.reportId as reportId,\n    rs.IMO as IMO, \n    'Main' as EngineCategory, \n    CAST(JSON_VALUE(rsEngine.value, '$.name') as nvarchar(max)) as name,\n    CAST(JSON_VALUE(rsEngine.value, '$.runningHoursShaftGenerator') as nvarchar(max)) as runningHoursShaftGenerator,\n    CAST(JSON_VALUE(rsEngine.value, '$.averageShaftRpm') as nvarchar(max)) as averageShaftRpm,\n    CAST(JSON_VALUE(rsEngine.value, '$.shaftRevolutions') as nvarchar(max)) as shaftRevolutions,\n    CAST(JSON_VALUE(rsEngine.value, '$.generatorEfficiency') as nvarchar(max)) as generatorEfficiency ,\n    CAST(JSON_VALUE(rsEngine.value, '$.averageShaftPower') as nvarchar(max)) as averageShaftPower ,\n    CAST(JSON_VALUE(rsEngine.value, '$.generatedShaftEnergy') as nvarchar(max)) as generatedShaftEnergy ,\n    CAST(JSON_VALUE(rsEngine.value, '$.averageGeneratorPower') as nvarchar(max)) as averageGeneratorPower ,\n    CAST(JSON_VALUE(rsEngine.value, '$.relativePower') as nvarchar(max)) as relativePower,\n    CAST(JSON_VALUE(rsEngine.value, '$.generatedGeneratorEnergy') as nvarchar(max)) as generatedGeneratorEnergy,\n    CAST(JSON_VALUE(rsEngine.value, '$.propellerPitch') as nvarchar(max)) as propellerPitch,\n    CAST(JSON_VALUE(rsEngine.value, '$.slipThroughWater') as nvarchar(max)) as slipThroughWater,\n    CAST(JSON_VALUE(rsEngine.value, '$.slipOverGround') as nvarchar(max)) as slipOverGround,\n    CAST(JSON_VALUE(rsEngine.value, '$.engineDistance') as nvarchar(max)) as engineDistance,\n    CAST(JSON_VALUE(rsEngine.value, '$.relativeGeneratorPower') as nvarchar(max)) as relativeGeneratorPower,\n    CAST(JSON_VALUE(rsEngine.value, '$.load') as nvarchar(max)) as load,\n    CAST(JSON_QUERY(rsEngine.value, '$.lubOilConsumptions') as nvarchar(max)) as lubOilConsumptions,\n    CAST(JSON_VALUE(rsEngine.value, '$.averagePower') as nvarchar(max)) as averagePower,  \n    CAST(JSON_VALUE(rsEngine.value, '$.generatedEnergy') as nvarchar(max)) as generatedEnergy,  \n    CAST(JSON_VALUE(rsEngine.value, '$.sfoc') as nvarchar(max)) as sfoc,  \n    CAST(JSON_VALUE(rsEngine.value, '$.sfocIso') as nvarchar(max)) as sfocIso,  \n    CAST(JSON_VALUE(rsEngine.value, '$.averageNoxValue') as nvarchar(max)) as averageNoxValue,  \n    CAST(JSON_QUERY(rsEngine.value, '$.consumptions') as nvarchar(max)) as consumptions,\n    CAST(JSON_VALUE(rsEngine.value, '$.totalFoc') as nvarchar(max)) as totalFoc,  \n    CAST(JSON_VALUE(rsEngine.value, '$.totalFocIso') as nvarchar(max)) as totalFocIso,  \n    CAST(JSON_VALUE(rsEngine.value, '$.totalCo2') as nvarchar(max)) as totalCo2,  \n    CAST(JSON_VALUE(rsEngine.value, '$.no') as nvarchar(max)) as no, \n    CAST(JSON_VALUE(rsEngine.value, '$.runningHours') as nvarchar(max)) as runningHours,  \n    rs.LOAD_ID as load_ID,\n    rs.isdeleted\nfrom \"Bronze\".\"dbo\".\"bto_reportsummaries\" as rs\ncross apply openjson(rs.json_data, '$.aggregationDetails.mainEngines') as rsEngine\n)\nselect\ncast(reportId as integer) as reportId,\ncast(IMO as integer) as IMO,\ncast(EngineCategory as varchar(max)) AS EngineCategory,\ncast(name as varchar(max)) as name,\ncast(runningHoursShaftGenerator as float) as runningHoursShaftGenerator,\ncast(averageShaftRpm as float) as averageShaftRpm,\ncast(shaftRevolutions as float) as shaftRevolutions,\ncast(generatorEfficiency as float) as generatorEfficiency,\ncast((case when averageShaftPower in ('Infinity', 'NaN') then null else averageShaftPower end) as float) as averageShaftPower,\ncast(generatedShaftEnergy as float) as generatedShaftEnergy,\ncast((case when averageGeneratorPower = 'Infinity' then null else averageGeneratorPower end) as float) as averageGeneratorPower,\ncast(relativePower as float) as relativePower,\ncast(generatedGeneratorEnergy as float) as generatedGeneratorEnergy, \ncast(propellerPitch as float) as propellerPitch,\ncast(slipThroughWater as float) as slipThroughWater,\ncast(slipOverGround as float) as slipOverGround,\ncast(engineDistance as float) as engineDistance,\ncast(load as float) as load,\ncast((case when averagePower = 'NaN' or averagePower= 'Infinity'  then null else averagePower end) as float) as averagePower,\ncast(generatedEnergy as float) as generatedEnergy,\ncast(sfoc as float) as sfoc,\ncast((case when sfocIso = 'NaN' or sfocIso= 'Infinity'  then null else sfocIso end) as float) as sfocIso,\ncast(averageNoxValue as float) as averageNoxValue,\ncast(totalFoc as float) as totalFoc,\ncast(totalFocIso as float) as totalFocIso,\ncast(totalCo2 as float) as totalCo2,\ncast(no as integer) as no,\ncast(runningHours as float) as runningHours,\ncast(relativeGeneratorPower as float) as relativeGeneratorPower,\ngetdate() as LoadDateTime,\nload_id,\nisdeleted\nfrom source", "extra_ctes_injected": true, "extra_ctes": []}, "model.dbtProject_v2.BTO_Reports_LubOil": {"database": "Silver", "schema": "dbo", "name": "BTO_Reports_LubOil", "resource_type": "model", "package_name": "dbtProject_v2", "path": "silver\\BTO_Reports_LubOil.sql", "original_file_path": "models\\silver\\BTO_Reports_LubOil.sql", "unique_id": "model.dbtProject_v2.BTO_Reports_LubOil", "fqn": ["dbtProject_v2", "silver", "BTO_Reports_LubOil"], "alias": "BTO_Reports_LubOil", "checksum": {"name": "sha256", "checksum": "9c9e763f2549ed3f010a3f8dd93c6eb53c190c0c12bec994564190145e55d68a"}, "config": {"enabled": true, "alias": null, "schema": "dbo", "database": "Silver", "tags": [], "meta": {}, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "dbtProject_v2://models\\schema.yml", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "schema": "dbo", "database": "Silver"}, "created_at": 1720542776.103063, "relation_name": "\"Silver\".\"dbo\".\"BTO_Reports_LubOil\"", "raw_code": "with source as (\r\n    select\r\n\trs.reportId as reportId,\r\n    rs.IMO as IMO, \r\n    'mainEngines' as component, \r\n    CAST(JSON_VALUE(rsEngine.value, '$.name') as varchar(max)) as name,\r\n    CAST(JSON_VALUE(rsEngine.value, '$.runningHoursShaftGenerator') as varchar(max)) as runningHoursShaftGenerator,\r\n    CAST(JSON_VALUE(rsEngine.value, '$.averageShaftRpm') as varchar(max)) as averageShaftRpm,\r\n    CAST(JSON_VALUE(rsEngine.value, '$.shaftRevolutions') as varchar(max)) as shaftRevolutions,\r\n    CAST(JSON_VALUE(rsEngine.value, '$.generatorEfficiency') as varchar(max)) as generatorEfficiency ,\r\n    CAST(JSON_VALUE(rsEngine.value, '$.averageShaftPower') as varchar(max)) as averageShaftPower ,\r\n    CAST(JSON_VALUE(rsEngine.value, '$.generatedShaftEnergy') as varchar(max)) as generatedShaftEnergy ,\r\n    CAST(JSON_VALUE(rsEngine.value, '$.averageGeneratorPower') as varchar(max)) as averageGeneratorPower ,\r\n    CAST(JSON_VALUE(rsEngine.value, '$.relativePower') as varchar(max)) as relativePower,\r\n    CAST(JSON_VALUE(rsEngine.value, '$.generatedGeneratorEnergy') as varchar(max)) as generatedGeneratorEnergy,\r\n    CAST(JSON_VALUE(rsEngine.value, '$.propellerPitch') as varchar(max)) as propellerPitch,\r\n    CAST(JSON_VALUE(rsEngine.value, '$.slipThroughWater') as varchar(max)) as slipThroughWater,\r\n    CAST(JSON_VALUE(rsEngine.value, '$.slipOverGround') as varchar(max)) as slipOverGround,\r\n    CAST(JSON_VALUE(rsEngine.value, '$.engineDistance') as varchar(max)) as engineDistance,\r\n    CAST(JSON_VALUE(rsEngine.value, '$.relativeGeneratorPower') as varchar(max)) as relativeGeneratorPower,\r\n    CAST(JSON_VALUE(rsEngine.value, '$.load') as varchar(max)) as load,\r\n    CAST(JSON_QUERY(rsEngine.value, '$.lubOilConsumptions') as varchar(max)) as lubOilConsumptions,\r\n    CAST(JSON_VALUE(rsEngine.value, '$.averagePower') as varchar(max)) as averagePower,  \r\n    CAST(JSON_VALUE(rsEngine.value, '$.generatedEnergy') as varchar(max)) as generatedEnergy,  \r\n    CAST(JSON_VALUE(rsEngine.value, '$.sfoc') as varchar(max)) as sfoc,  \r\n    CAST(JSON_VALUE(rsEngine.value, '$.sfocIso') as varchar(max)) as sfocIso,  \r\n    CAST(JSON_VALUE(rsEngine.value, '$.averageNoxValue') as varchar(max)) as averageNoxValue,  \r\n    CAST(JSON_QUERY(rsEngine.value, '$.consumptions') as varchar(max)) as consumptions,\r\n    CAST(JSON_VALUE(rsEngine.value, '$.totalFoc') as varchar(max)) as totalFoc,  \r\n    CAST(JSON_VALUE(rsEngine.value, '$.totalFocIso') as varchar(max)) as totalFocIso,  \r\n    CAST(JSON_VALUE(rsEngine.value, '$.totalCo2') as varchar(max)) as totalCo2,  \r\n    CAST(JSON_VALUE(rsEngine.value, '$.no') as varchar(max)) as no, \r\n    CAST(JSON_VALUE(rsEngine.value, '$.runningHours') as varchar(max)) as runningHours, \r\n    getdate() as LoadDateTime, \r\n    rs.LOAD_ID as load_ID,\r\n    rs.isdeleted\r\nfrom {{ ref('bto_reportsummaries') }} as rs\r\ncross apply openjson(rs.json_data, '$.aggregationDetails.mainEngines') as rsEngine\r\nUNION ALL\r\nselect \r\n\trs.reportId as reportId,\r\n    rs.IMO as IMO,  \r\n    'auxEngines' as component, \r\n    CAST(JSON_VALUE(rsEngine.value, '$.name') as varchar(max)) as name,\r\n    CAST(JSON_VALUE(rsEngine.value, '$.runningHoursShaftGenerator') as varchar(max)) as runningHoursShaftGenerator,\r\n    CAST(JSON_VALUE(rsEngine.value, '$.averageShaftRpm') as varchar(max)) as averageShaftRpm,\r\n    CAST(JSON_VALUE(rsEngine.value, '$.shaftRevolutions') as varchar(max)) as shaftRevolutions,\r\n    CAST(JSON_VALUE(rsEngine.value, '$.generatorEfficiency') as varchar(max)) as generatorEfficiency ,\r\n    CAST(JSON_VALUE(rsEngine.value, '$.averageShaftPower') as varchar(max)) as averageShaftPower ,\r\n    CAST(JSON_VALUE(rsEngine.value, '$.generatedShaftEnergy') as varchar(max)) as generatedShaftEnergy ,\r\n    CAST(JSON_VALUE(rsEngine.value, '$.averageGeneratorPower') as varchar(max)) as averageGeneratorPower ,\r\n    CAST(JSON_VALUE(rsEngine.value, '$.relativePower') as varchar(max)) as relativePower,\r\n    CAST(JSON_VALUE(rsEngine.value, '$.generatedGeneratorEnergy') as varchar(max)) as generatedGeneratorEnergy,\r\n    CAST(JSON_VALUE(rsEngine.value, '$.propellerPitch') as varchar(max)) as propellerPitch,\r\n    CAST(JSON_VALUE(rsEngine.value, '$.slipThroughWater') as varchar(max)) as slipThroughWater,\r\n    CAST(JSON_VALUE(rsEngine.value, '$.slipOverGround') as varchar(max)) as slipOverGround,\r\n    CAST(JSON_VALUE(rsEngine.value, '$.engineDistance') as varchar(max)) as engineDistance,\r\n    CAST(JSON_VALUE(rsEngine.value, '$.relativeGeneratorPower') as varchar(max)) as relativeGeneratorPower,\r\n    CAST(JSON_VALUE(rsEngine.value, '$.load') as varchar(max)) as load,\r\n    CAST(JSON_QUERY(rsEngine.value, '$.lubOilConsumptions') as varchar(max)) as lubOilConsumptions,\r\n    CAST(JSON_VALUE(rsEngine.value, '$.averagePower') as varchar(max)) as averagePower,  \r\n    CAST(JSON_VALUE(rsEngine.value, '$.generatedEnergy') as varchar(max)) as generatedEnergy,  \r\n    CAST(JSON_VALUE(rsEngine.value, '$.sfoc') as varchar(max)) as sfoc,  \r\n    CAST(JSON_VALUE(rsEngine.value, '$.sfocIso') as varchar(max)) as sfocIso,  \r\n    CAST(JSON_VALUE(rsEngine.value, '$.averageNoxValue') as varchar(max)) as averageNoxValue,  \r\n    CAST(JSON_QUERY(rsEngine.value, '$.consumptions') as varchar(max)) as consumptions,\r\n    CAST(JSON_VALUE(rsEngine.value, '$.totalFoc') as varchar(max)) as totalFoc,  \r\n    CAST(JSON_VALUE(rsEngine.value, '$.totalFocIso') as varchar(max)) as totalFocIso,  \r\n    CAST(JSON_VALUE(rsEngine.value, '$.totalCo2') as varchar(max)) as totalCo2,  \r\n    CAST(JSON_VALUE(rsEngine.value, '$.no') as varchar(max)) as no, \r\n    CAST(JSON_VALUE(rsEngine.value, '$.runningHours') as varchar(max)) as runningHours,  \r\n    getdate() as LoadDateTime,\r\n    rs.LOAD_ID as load_ID,\r\n    rs.isdeleted\r\nfrom {{ ref('bto_reportsummaries') }} as rs\r\ncross apply openjson(rs.json_data, '$.aggregationDetails.auxEngines') as rsEngine\r\n), source2 as (\r\n--insert into [API_Normalized].[dbo].[bto_ReportSummariesEngineLubOil]\r\nselect \r\n\trs.reportId as reportId,\r\n    rs.IMO as IMO,\r\n    'mainEngines' as component,\r\n    CAST(JSON_VALUE(rsLubeOil.value, '$.aggregate') as varchar(max)) as engineName,\r\n    'LubOilAggregateConsumption' as oilCategory, \r\n    CAST(JSON_VALUE(rsLubeOil.value, '$.kind') as varchar(max)) as kind,\r\n    CAST(JSON_VALUE(rsLubeOil.value, '$.amount') as float) as amount,\r\n    CAST(JSON_VALUE(rsLubeOil.value, '$.density') as float) as density,\r\n    --CAST(JSON_QUERY(rsLubeOil.value, '$.type') as varchar(max)) as type,\r\n    CAST(JSON_VALUE(rsLubeOil.value, '$.type.tbn') as float) as type_tbn,\r\n    getdate() as LoadDateTime,\r\n    rs.LOAD_ID as LOAD_ID,\r\n    rs.isdeleted\r\nfrom {{ ref('bto_reportsummaries') }} as rs \r\ncross apply openjson(rs.json_data, '$.aggregationDetails.otherConsumptions.lubOil') as rsLubeOil\r\nUNION ALL\r\nselect \r\n\trsEngine.reportId as reportId,\r\n    rsEngine.IMO as IMO,\r\n    rsEngine.component,\r\n    rsEngine.name as engineName,\r\n    'LubOilConsumption' as oilCategory, \r\n    CAST(JSON_VALUE(rsLubeOil.value, '$.kind') as varchar(max)) as kind,\r\n    CAST(JSON_VALUE(rsLubeOil.value, '$.amount') as float) as amount,\r\n    CAST(JSON_VALUE(rsLubeOil.value, '$.density') as float) as density,\r\n    --CAST(JSON_QUERY(rsLubeOil.value, '$.type') as varchar(max)) as type,\r\n    CAST(JSON_VALUE(rsLubeOil.value, '$.type.tbn') as float) as type_tbn,\r\n    getdate() as LoadDateTime,\r\n    rsEngine.load_Id as LOAD_ID,\r\n    rsEngine.isdeleted\r\nfrom source as rsEngine\r\ncross apply openjson(rsEngine.lubOilConsumptions, '$') as rsLubeOil\r\n)\r\nselect * from source2", "language": "sql", "refs": [["bto_reportsummaries"], ["bto_reportsummaries"], ["bto_reportsummaries"]], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.dbtProject_v2.bto_reportsummaries", "model.dbtProject_v2.bto_reportsummaries", "model.dbtProject_v2.bto_reportsummaries", "model.dbtProject_v2.bto_reportsummaries", "model.dbtProject_v2.bto_reportsummaries", "model.dbtProject_v2.bto_reportsummaries"]}, "compiled_path": "target\\compiled\\dbtProject_v2\\models\\silver\\BTO_Reports_LubOil.sql", "compiled": true, "compiled_code": "with source as (\n    select\n\trs.reportId as reportId,\n    rs.IMO as IMO, \n    'mainEngines' as component, \n    CAST(JSON_VALUE(rsEngine.value, '$.name') as varchar(max)) as name,\n    CAST(JSON_VALUE(rsEngine.value, '$.runningHoursShaftGenerator') as varchar(max)) as runningHoursShaftGenerator,\n    CAST(JSON_VALUE(rsEngine.value, '$.averageShaftRpm') as varchar(max)) as averageShaftRpm,\n    CAST(JSON_VALUE(rsEngine.value, '$.shaftRevolutions') as varchar(max)) as shaftRevolutions,\n    CAST(JSON_VALUE(rsEngine.value, '$.generatorEfficiency') as varchar(max)) as generatorEfficiency ,\n    CAST(JSON_VALUE(rsEngine.value, '$.averageShaftPower') as varchar(max)) as averageShaftPower ,\n    CAST(JSON_VALUE(rsEngine.value, '$.generatedShaftEnergy') as varchar(max)) as generatedShaftEnergy ,\n    CAST(JSON_VALUE(rsEngine.value, '$.averageGeneratorPower') as varchar(max)) as averageGeneratorPower ,\n    CAST(JSON_VALUE(rsEngine.value, '$.relativePower') as varchar(max)) as relativePower,\n    CAST(JSON_VALUE(rsEngine.value, '$.generatedGeneratorEnergy') as varchar(max)) as generatedGeneratorEnergy,\n    CAST(JSON_VALUE(rsEngine.value, '$.propellerPitch') as varchar(max)) as propellerPitch,\n    CAST(JSON_VALUE(rsEngine.value, '$.slipThroughWater') as varchar(max)) as slipThroughWater,\n    CAST(JSON_VALUE(rsEngine.value, '$.slipOverGround') as varchar(max)) as slipOverGround,\n    CAST(JSON_VALUE(rsEngine.value, '$.engineDistance') as varchar(max)) as engineDistance,\n    CAST(JSON_VALUE(rsEngine.value, '$.relativeGeneratorPower') as varchar(max)) as relativeGeneratorPower,\n    CAST(JSON_VALUE(rsEngine.value, '$.load') as varchar(max)) as load,\n    CAST(JSON_QUERY(rsEngine.value, '$.lubOilConsumptions') as varchar(max)) as lubOilConsumptions,\n    CAST(JSON_VALUE(rsEngine.value, '$.averagePower') as varchar(max)) as averagePower,  \n    CAST(JSON_VALUE(rsEngine.value, '$.generatedEnergy') as varchar(max)) as generatedEnergy,  \n    CAST(JSON_VALUE(rsEngine.value, '$.sfoc') as varchar(max)) as sfoc,  \n    CAST(JSON_VALUE(rsEngine.value, '$.sfocIso') as varchar(max)) as sfocIso,  \n    CAST(JSON_VALUE(rsEngine.value, '$.averageNoxValue') as varchar(max)) as averageNoxValue,  \n    CAST(JSON_QUERY(rsEngine.value, '$.consumptions') as varchar(max)) as consumptions,\n    CAST(JSON_VALUE(rsEngine.value, '$.totalFoc') as varchar(max)) as totalFoc,  \n    CAST(JSON_VALUE(rsEngine.value, '$.totalFocIso') as varchar(max)) as totalFocIso,  \n    CAST(JSON_VALUE(rsEngine.value, '$.totalCo2') as varchar(max)) as totalCo2,  \n    CAST(JSON_VALUE(rsEngine.value, '$.no') as varchar(max)) as no, \n    CAST(JSON_VALUE(rsEngine.value, '$.runningHours') as varchar(max)) as runningHours, \n    getdate() as LoadDateTime, \n    rs.LOAD_ID as load_ID,\n    rs.isdeleted\nfrom \"Bronze\".\"dbo\".\"bto_reportsummaries\" as rs\ncross apply openjson(rs.json_data, '$.aggregationDetails.mainEngines') as rsEngine\nUNION ALL\nselect \n\trs.reportId as reportId,\n    rs.IMO as IMO,  \n    'auxEngines' as component, \n    CAST(JSON_VALUE(rsEngine.value, '$.name') as varchar(max)) as name,\n    CAST(JSON_VALUE(rsEngine.value, '$.runningHoursShaftGenerator') as varchar(max)) as runningHoursShaftGenerator,\n    CAST(JSON_VALUE(rsEngine.value, '$.averageShaftRpm') as varchar(max)) as averageShaftRpm,\n    CAST(JSON_VALUE(rsEngine.value, '$.shaftRevolutions') as varchar(max)) as shaftRevolutions,\n    CAST(JSON_VALUE(rsEngine.value, '$.generatorEfficiency') as varchar(max)) as generatorEfficiency ,\n    CAST(JSON_VALUE(rsEngine.value, '$.averageShaftPower') as varchar(max)) as averageShaftPower ,\n    CAST(JSON_VALUE(rsEngine.value, '$.generatedShaftEnergy') as varchar(max)) as generatedShaftEnergy ,\n    CAST(JSON_VALUE(rsEngine.value, '$.averageGeneratorPower') as varchar(max)) as averageGeneratorPower ,\n    CAST(JSON_VALUE(rsEngine.value, '$.relativePower') as varchar(max)) as relativePower,\n    CAST(JSON_VALUE(rsEngine.value, '$.generatedGeneratorEnergy') as varchar(max)) as generatedGeneratorEnergy,\n    CAST(JSON_VALUE(rsEngine.value, '$.propellerPitch') as varchar(max)) as propellerPitch,\n    CAST(JSON_VALUE(rsEngine.value, '$.slipThroughWater') as varchar(max)) as slipThroughWater,\n    CAST(JSON_VALUE(rsEngine.value, '$.slipOverGround') as varchar(max)) as slipOverGround,\n    CAST(JSON_VALUE(rsEngine.value, '$.engineDistance') as varchar(max)) as engineDistance,\n    CAST(JSON_VALUE(rsEngine.value, '$.relativeGeneratorPower') as varchar(max)) as relativeGeneratorPower,\n    CAST(JSON_VALUE(rsEngine.value, '$.load') as varchar(max)) as load,\n    CAST(JSON_QUERY(rsEngine.value, '$.lubOilConsumptions') as varchar(max)) as lubOilConsumptions,\n    CAST(JSON_VALUE(rsEngine.value, '$.averagePower') as varchar(max)) as averagePower,  \n    CAST(JSON_VALUE(rsEngine.value, '$.generatedEnergy') as varchar(max)) as generatedEnergy,  \n    CAST(JSON_VALUE(rsEngine.value, '$.sfoc') as varchar(max)) as sfoc,  \n    CAST(JSON_VALUE(rsEngine.value, '$.sfocIso') as varchar(max)) as sfocIso,  \n    CAST(JSON_VALUE(rsEngine.value, '$.averageNoxValue') as varchar(max)) as averageNoxValue,  \n    CAST(JSON_QUERY(rsEngine.value, '$.consumptions') as varchar(max)) as consumptions,\n    CAST(JSON_VALUE(rsEngine.value, '$.totalFoc') as varchar(max)) as totalFoc,  \n    CAST(JSON_VALUE(rsEngine.value, '$.totalFocIso') as varchar(max)) as totalFocIso,  \n    CAST(JSON_VALUE(rsEngine.value, '$.totalCo2') as varchar(max)) as totalCo2,  \n    CAST(JSON_VALUE(rsEngine.value, '$.no') as varchar(max)) as no, \n    CAST(JSON_VALUE(rsEngine.value, '$.runningHours') as varchar(max)) as runningHours,  \n    getdate() as LoadDateTime,\n    rs.LOAD_ID as load_ID,\n    rs.isdeleted\nfrom \"Bronze\".\"dbo\".\"bto_reportsummaries\" as rs\ncross apply openjson(rs.json_data, '$.aggregationDetails.auxEngines') as rsEngine\n), source2 as (\n--insert into [API_Normalized].[dbo].[bto_ReportSummariesEngineLubOil]\nselect \n\trs.reportId as reportId,\n    rs.IMO as IMO,\n    'mainEngines' as component,\n    CAST(JSON_VALUE(rsLubeOil.value, '$.aggregate') as varchar(max)) as engineName,\n    'LubOilAggregateConsumption' as oilCategory, \n    CAST(JSON_VALUE(rsLubeOil.value, '$.kind') as varchar(max)) as kind,\n    CAST(JSON_VALUE(rsLubeOil.value, '$.amount') as float) as amount,\n    CAST(JSON_VALUE(rsLubeOil.value, '$.density') as float) as density,\n    --CAST(JSON_QUERY(rsLubeOil.value, '$.type') as varchar(max)) as type,\n    CAST(JSON_VALUE(rsLubeOil.value, '$.type.tbn') as float) as type_tbn,\n    getdate() as LoadDateTime,\n    rs.LOAD_ID as LOAD_ID,\n    rs.isdeleted\nfrom \"Bronze\".\"dbo\".\"bto_reportsummaries\" as rs \ncross apply openjson(rs.json_data, '$.aggregationDetails.otherConsumptions.lubOil') as rsLubeOil\nUNION ALL\nselect \n\trsEngine.reportId as reportId,\n    rsEngine.IMO as IMO,\n    rsEngine.component,\n    rsEngine.name as engineName,\n    'LubOilConsumption' as oilCategory, \n    CAST(JSON_VALUE(rsLubeOil.value, '$.kind') as varchar(max)) as kind,\n    CAST(JSON_VALUE(rsLubeOil.value, '$.amount') as float) as amount,\n    CAST(JSON_VALUE(rsLubeOil.value, '$.density') as float) as density,\n    --CAST(JSON_QUERY(rsLubeOil.value, '$.type') as varchar(max)) as type,\n    CAST(JSON_VALUE(rsLubeOil.value, '$.type.tbn') as float) as type_tbn,\n    getdate() as LoadDateTime,\n    rsEngine.load_Id as LOAD_ID,\n    rsEngine.isdeleted\nfrom source as rsEngine\ncross apply openjson(rsEngine.lubOilConsumptions, '$') as rsLubeOil\n)\nselect * from source2", "extra_ctes_injected": true, "extra_ctes": []}, "model.dbtProject_v2.bto_Ships": {"database": "Silver", "schema": "dbo", "name": "bto_Ships", "resource_type": "model", "package_name": "dbtProject_v2", "path": "silver\\bto_Ships.sql", "original_file_path": "models\\silver\\bto_Ships.sql", "unique_id": "model.dbtProject_v2.bto_Ships", "fqn": ["dbtProject_v2", "silver", "bto_Ships"], "alias": "bto_Ships", "checksum": {"name": "sha256", "checksum": "bfc2ddb345cecec6e084ef1e5789e69c2cd5bfb5c0685dd300c5a7d78630453d"}, "config": {"enabled": true, "alias": null, "schema": "dbo", "database": "Silver", "tags": [], "meta": {}, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "schema": "dbo", "database": "Silver"}, "created_at": 1720537838.5955937, "relation_name": "\"Silver\".\"dbo\".\"bto_Ships\"", "raw_code": "SELECT \r\n        NEWID() as GU_ID,\r\n\t\tcast(j.id as INT) as id,\r\n\t\tcast(j.imoNumber as INT) as IMO,\r\n\t\tcast(j.Name as varchar(max)) as name,\r\n\t\tcast(j.ShortName as varchar(max)) as shortName,\r\n\t\tcast(j.AlternativeName as varchar(max)) as alternativeName,\r\n\t\tcast(j.CurrentVersionStamp as INT) as currentVersionStamp,\r\n\t\tcast(j.ShipClassId as INT) as shipClassId,\r\n\t\tcast(j.ShipClassName as varchar(max)) as shipClassName,\r\n\t\tcast(j.IsHidden as BIT) as isHidden,\r\n\t\tcast(j.CallSign as varchar(max)) as callSign,\r\n\t\tcast(j.PortOfRegistryUnloc as varchar(max)) as portOfRegistryUnloc,\r\n\t\tcast(j.OwnerName as varchar(max)) as OwnerName,\r\n\t\tcast(j.Link as varchar(max)) as Link,\r\n        GETDATE()  as LoadDateTime,\r\n        main.Load_ID as Load_ID\r\n      from {{ ref('bto_ships')}} as main\r\n      CROSS APPLY OPENJSON(json_data)\r\n\t  with (\r\n\t\tid INT '$.id',\r\n\t\timoNumber INT '$.imoNumber',\r\n\t\tName varchar(max) '$.name',\r\n\t\tShortName varchar(max) '$.shortName',\r\n\t\tAlternativeName varchar(max) '$.alternativeName',\r\n\t\tCurrentVersionStamp INT '$.currentVersionStamp',\r\n\t\tShipClassId INT '$.shipClassId',\r\n\t\tShipClassName varchar(max) '$.shipClassName',\r\n\t\tIsHidden BIT '$.isHidden',\r\n\t\tCallSign varchar(max) '$.callSign',\r\n\t\tPortOfRegistryUnloc varchar(max) '$.portOfRegistryUnloc',\r\n\t\tOwnerName varchar(max) '$.OwnerName',\r\n\t\tLINK varchar(max) '$.Link'\r\n\t\t) j", "language": "sql", "refs": [["bto_ships"]], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.dbtProject_v2.bto_ships"]}, "compiled_path": "target\\compiled\\dbtProject_v2\\models\\silver\\bto_Ships.sql", "compiled": true, "compiled_code": "SELECT \n        NEWID() as GU_ID,\n\t\tcast(j.id as INT) as id,\n\t\tcast(j.imoNumber as INT) as IMO,\n\t\tcast(j.Name as varchar(max)) as name,\n\t\tcast(j.ShortName as varchar(max)) as shortName,\n\t\tcast(j.AlternativeName as varchar(max)) as alternativeName,\n\t\tcast(j.CurrentVersionStamp as INT) as currentVersionStamp,\n\t\tcast(j.ShipClassId as INT) as shipClassId,\n\t\tcast(j.ShipClassName as varchar(max)) as shipClassName,\n\t\tcast(j.IsHidden as BIT) as isHidden,\n\t\tcast(j.CallSign as varchar(max)) as callSign,\n\t\tcast(j.PortOfRegistryUnloc as varchar(max)) as portOfRegistryUnloc,\n\t\tcast(j.OwnerName as varchar(max)) as OwnerName,\n\t\tcast(j.Link as varchar(max)) as Link,\n        GETDATE()  as LoadDateTime,\n        main.Load_ID as Load_ID\n      from \"Bronze\".\"dbo\".\"bto_ships\" as main\n      CROSS APPLY OPENJSON(json_data)\n\t  with (\n\t\tid INT '$.id',\n\t\timoNumber INT '$.imoNumber',\n\t\tName varchar(max) '$.name',\n\t\tShortName varchar(max) '$.shortName',\n\t\tAlternativeName varchar(max) '$.alternativeName',\n\t\tCurrentVersionStamp INT '$.currentVersionStamp',\n\t\tShipClassId INT '$.shipClassId',\n\t\tShipClassName varchar(max) '$.shipClassName',\n\t\tIsHidden BIT '$.isHidden',\n\t\tCallSign varchar(max) '$.callSign',\n\t\tPortOfRegistryUnloc varchar(max) '$.portOfRegistryUnloc',\n\t\tOwnerName varchar(max) '$.OwnerName',\n\t\tLINK varchar(max) '$.Link'\n\t\t) j", "extra_ctes_injected": true, "extra_ctes": []}, "model.dbtProject_v2.btr_Ships": {"database": "Silver", "schema": "dbo", "name": "btr_Ships", "resource_type": "model", "package_name": "dbtProject_v2", "path": "silver\\btr_Ships.sql", "original_file_path": "models\\silver\\btr_Ships.sql", "unique_id": "model.dbtProject_v2.btr_Ships", "fqn": ["dbtProject_v2", "silver", "btr_Ships"], "alias": "btr_Ships", "checksum": {"name": "sha256", "checksum": "aa76af22e659650a8aea0d2c80be9ee4cd87fc953d8ae73df4ad4ceb41030933"}, "config": {"enabled": true, "alias": null, "schema": "dbo", "database": "Silver", "tags": [], "meta": {}, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "schema": "dbo", "database": "Silver"}, "created_at": 1720537838.6111887, "relation_name": "\"Silver\".\"dbo\".\"btr_Ships\"", "raw_code": "SELECT \r\n    j.id,\r\n    j.imo,\r\n    j.vesselName,\r\n    j.currentVersionStamp,\r\n    GETDATE()  as LoadDateTime,\r\n    load_id\r\nfrom {{ ref('btr_ships') }}\r\nCROSS APPLY OPENJSON(json_data)\r\nWITH (\r\n    id INT '$.id',\r\n    imo INT '$.imo',\r\n    vesselName nvarchar(max) '$.vesselName',\r\n    currentVersionStamp INT '$.currentVersionStamp'\r\n) j", "language": "sql", "refs": [["btr_ships"]], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.dbtProject_v2.btr_ships"]}, "compiled_path": "target\\compiled\\dbtProject_v2\\models\\silver\\btr_Ships.sql", "compiled": true, "compiled_code": "SELECT \n    j.id,\n    j.imo,\n    j.vesselName,\n    j.currentVersionStamp,\n    GETDATE()  as LoadDateTime,\n    load_id\nfrom \"Bronze\".\"dbo\".\"btr_ships\"\nCROSS APPLY OPENJSON(json_data)\nWITH (\n    id INT '$.id',\n    imo INT '$.imo',\n    vesselName nvarchar(max) '$.vesselName',\n    currentVersionStamp INT '$.currentVersionStamp'\n) j", "extra_ctes_injected": true, "extra_ctes": []}, "model.dbtProject_v2.api_bto_shipsDeltaReports_expanded": {"database": "StageData", "schema": "dbo", "name": "api_bto_shipsDeltaReports_expanded", "resource_type": "model", "package_name": "dbtProject_v2", "path": "stage\\api_bto_shipsDeltaReports_expanded.sql", "original_file_path": "models\\stage\\api_bto_shipsDeltaReports_expanded.sql", "unique_id": "model.dbtProject_v2.api_bto_shipsDeltaReports_expanded", "fqn": ["dbtProject_v2", "stage", "api_bto_shipsDeltaReports_expanded"], "alias": "api_bto_shipsDeltaReports_expanded", "checksum": {"name": "sha256", "checksum": "fada80edb6239801427d0b0f26f1680d784cbaa9d31158c2f126a9cf4208b930"}, "config": {"enabled": true, "alias": null, "schema": "dbo", "database": "StageData", "tags": [], "meta": {}, "materialized": "incremental", "incremental_strategy": "delete+insert", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": ["id", "LOAD_ID"], "on_schema_change": "sync_all_columns", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "as_columnstore": false, "post-hook": [{"sql": "\n            update {{ ref('bto_reportsummaries') }}\n            set\n            isDeleted = case when b.isDeleted = 'true' then 1\n                            when b.isDeleted = 'false' then 0 end\n            from {{ ref('bto_reportsummaries') }} as a\n            inner join \n            (select id, isDeleted from {{ source('stage', 'api_bto_shipsDeltaReports_expanded') }}\n            where load_id = {{ max_loadid('source', 'api_bto_shipsDeltaReports_expanded') }}) b on\n            a.reportId = b.id", "transaction": true, "index": null}], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "incremental", "schema": "dbo", "database": "StageData", "as_columnstore": false, "unique_key": ["id", "LOAD_ID"], "incremental_strategy": "delete+insert", "on_schema_change": "sync_all_columns", "post-hook": ["\n            update {{ ref('bto_reportsummaries') }}\n            set\n            isDeleted = case when b.isDeleted = 'true' then 1\n                            when b.isDeleted = 'false' then 0 end\n            from {{ ref('bto_reportsummaries') }} as a\n            inner join \n            (select id, isDeleted from {{ source('stage', 'api_bto_shipsDeltaReports_expanded') }}\n            where load_id = {{ max_loadid('source', 'api_bto_shipsDeltaReports_expanded') }}) b on\n            a.reportId = b.id"]}, "created_at": 1720537838.6111887, "relation_name": "\"StageData\".\"dbo\".\"api_bto_shipsDeltaReports_expanded\"", "raw_code": "{{ config(\r\n        materialized = 'incremental',\r\n        as_columnstore = false,\r\n        unique_key = ['id', 'LOAD_ID'],\r\n        incremental_strategy = 'delete+insert',\r\n        on_schema_change = 'sync_all_columns',\r\n        post_hook = \"\r\n            update {{ ref('bto_reportsummaries') }}\r\n            set\r\n            isDeleted = case when b.isDeleted = 'true' then 1\r\n                            when b.isDeleted = 'false' then 0 end\r\n            from {{ ref('bto_reportsummaries') }} as a\r\n            inner join \r\n            (select id, isDeleted from {{ source('stage', 'api_bto_shipsDeltaReports_expanded') }}\r\n            where load_id = {{ max_loadid('source', 'api_bto_shipsDeltaReports_expanded') }}) b on\r\n            a.reportId = b.id\"\r\n) }}\r\n\r\nSELECT\r\n    cast(json_value(sec.value, '$.id') as int) as id,\r\n    cast(json_value(sec.value, '$.customId') as nvarchar) as customId,\r\n    cast(json_value(sec.value, '$.imoNumber') as int) as imoNumber,\r\n    cast(json_value(sec.value, '$.timeStampLocal') as datetimeoffset) as timeStampLocal,\r\n    cast(json_value(sec.value, '$.timeStampUtc') as datetimeoffset) as timeStampUtc,\r\n    cast(json_value(sec.value, '$.state') as nvarchar) as state,\r\n    cast(json_value(sec.value, '$.isDeleted') as nvarchar) as isDeleted,\r\n    cast(json_value(sec.value, '$.versionStamp') as int) as versionStamp,\r\n    load_id,\r\n    createDateTime as LoadDateTime\r\nFROM {{source('stage', 'api_bto_shipsDeltaReports')}} as main\r\ncross apply openjson(main.rawdata, '$.items') sec\r\nwhere isError = 0 \r\n{% if is_incremental() %}\r\n    and main.load_id = {{ max_loadid('source', 'api_bto_shipsDeltaReports') }}\r\n{% endif %}", "language": "sql", "refs": [["bto_reportsummaries"], ["bto_reportsummaries"]], "sources": [["stage", "api_bto_shipsDeltaReports"], ["stage", "api_bto_shipsDeltaReports_expanded"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.is_incremental", "macro.dbtProject_v2.max_loadid"], "nodes": ["source.dbtProject_v2.stage.api_bto_shipsDeltaReports", "source.dbtProject_v2.stage.api_bto_shipsDeltaReports_expanded", "model.dbtProject_v2.bto_reportsummaries", "model.dbtProject_v2.bto_reportsummaries"]}, "compiled_path": "target\\compiled\\dbtProject_v2\\models\\stage\\api_bto_shipsDeltaReports_expanded.sql", "compiled": true, "compiled_code": "\n\nSELECT\n    cast(json_value(sec.value, '$.id') as int) as id,\n    cast(json_value(sec.value, '$.customId') as nvarchar) as customId,\n    cast(json_value(sec.value, '$.imoNumber') as int) as imoNumber,\n    cast(json_value(sec.value, '$.timeStampLocal') as datetimeoffset) as timeStampLocal,\n    cast(json_value(sec.value, '$.timeStampUtc') as datetimeoffset) as timeStampUtc,\n    cast(json_value(sec.value, '$.state') as nvarchar) as state,\n    cast(json_value(sec.value, '$.isDeleted') as nvarchar) as isDeleted,\n    cast(json_value(sec.value, '$.versionStamp') as int) as versionStamp,\n    load_id,\n    createDateTime as LoadDateTime\nFROM \"StageData\".\"dbo\".\"api_bto_shipsDeltaReports\" as main\ncross apply openjson(main.rawdata, '$.items') sec\nwhere isError = 0 \n\n    and main.load_id = 782393\n", "extra_ctes_injected": true, "extra_ctes": []}, "model.dbtProject_v2.lookup_shipsLastVersion": {"database": "StageData", "schema": "dbo", "name": "lookup_shipsLastVersion", "resource_type": "model", "package_name": "dbtProject_v2", "path": "stage\\lookup_shipsLastVersion.sql", "original_file_path": "models\\stage\\lookup_shipsLastVersion.sql", "unique_id": "model.dbtProject_v2.lookup_shipsLastVersion", "fqn": ["dbtProject_v2", "stage", "lookup_shipsLastVersion"], "alias": "lookup_shipsLastVersion", "checksum": {"name": "sha256", "checksum": "a5c12d0498e921eae0fa3528552deadc01774dacd7900f2d41dd38997f182b9e"}, "config": {"enabled": true, "alias": null, "schema": "dbo", "database": "StageData", "tags": [], "meta": {}, "materialized": "incremental", "incremental_strategy": "delete+insert", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": ["IMO", "LOAD_ID"], "on_schema_change": "sync_all_columns", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "incremental", "schema": "dbo", "database": "StageData", "unique_key": ["IMO", "LOAD_ID"], "incremental_strategy": "delete+insert", "on_schema_change": "sync_all_columns"}, "created_at": 1720537838.640727, "relation_name": "\"StageData\".\"dbo\".\"lookup_shipsLastVersion\"", "raw_code": "{{ config(\r\n    materialized='incremental',\r\n    unique_key=['IMO', 'LOAD_ID'],\r\n    incremental_strategy='delete+insert',\r\n    on_schema_change='sync_all_columns'\r\n) }}\r\n\r\nWITH ships AS (\r\n    SELECT * \r\n    FROM {{ ref('lookup_ships') }}\r\n    WHERE LOAD_ID = {{ max_loadid('model', 'lookup_ships') }}\r\n),\r\n\r\nreport AS (\r\n    SELECT * \r\n    FROM {{ ref('bto_ReportSummaries') }}\r\n)\r\n\r\nSELECT \r\n    CAST(s.IMO AS INTEGER) AS IMO,\r\n    CAST(ISNULL(MAX(r.ship_currentVersionStamp), -1) AS INTEGER) AS max_ship_currentVersionStamp,\r\n    GETDATE() AS LoadDatetime,\r\n    {{ max_loadid('model', 'lookup_ships') }} AS LOAD_ID\r\nFROM \r\n    ships s\r\nLEFT JOIN \r\n    report r\r\n    ON s.IMO = r.IMO\r\nGROUP BY \r\n    s.IMO, s.LOAD_ID;", "language": "sql", "refs": [["lookup_ships"], ["bto_ReportSummaries"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbtProject_v2.max_loadid"], "nodes": ["model.dbtProject_v2.lookup_ships", "model.dbtProject_v2.bto_ReportSummaries"]}, "compiled_path": "target\\compiled\\dbtProject_v2\\models\\stage\\lookup_shipsLastVersion.sql", "compiled": true, "compiled_code": "\n\nWITH ships AS (\n    SELECT * \n    FROM \"StageData\".\"dbo\".\"lookup_ships\"\n    WHERE LOAD_ID = 782497\n),\n\nreport AS (\n    SELECT * \n    FROM \"Silver\".\"dbo\".\"bto_ReportSummaries\"\n)\n\nSELECT \n    CAST(s.IMO AS INTEGER) AS IMO,\n    CAST(ISNULL(MAX(r.ship_currentVersionStamp), -1) AS INTEGER) AS max_ship_currentVersionStamp,\n    GETDATE() AS LoadDatetime,\n    782497 AS LOAD_ID\nFROM \n    ships s\nLEFT JOIN \n    report r\n    ON s.IMO = r.IMO\nGROUP BY \n    s.IMO, s.LOAD_ID;", "extra_ctes_injected": true, "extra_ctes": []}, "test.dbtProject_v2.not_null_bto_legsummary_legEventId.86128d4d88": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "legEventId", "model": "{{ get_where_subquery(ref('bto_legsummary')) }}"}, "namespace": null}, "database": "FleetPerformance", "schema": "dbt_test__audit", "name": "not_null_bto_legsummary_legEventId", "resource_type": "test", "package_name": "dbtProject_v2", "path": "not_null_bto_legsummary_legEventId.sql", "original_file_path": "models\\schema.yml", "unique_id": "test.dbtProject_v2.not_null_bto_legsummary_legEventId.86128d4d88", "fqn": ["dbtProject_v2", "not_null_bto_legsummary_legEventId"], "alias": "not_null_bto_legsummary_legEventId", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1720537838.8883753, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [["bto_legsummary"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.dbtProject_v2.bto_legsummary"]}, "compiled_path": "target\\compiled\\dbtProject_v2\\models\\schema.yml\\not_null_bto_legsummary_legEventId.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect legEventId\nfrom \"Bronze\".\"dbo\".\"bto_legsummary\"\nwhere legEventId is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "legEventId", "file_key_name": "models.bto_legsummary"}, "test.dbtProject_v2.unique_bto_legsummary_legEventId.373a94c272": {"test_metadata": {"name": "unique", "kwargs": {"column_name": "legEventId", "model": "{{ get_where_subquery(ref('bto_legsummary')) }}"}, "namespace": null}, "database": "FleetPerformance", "schema": "dbt_test__audit", "name": "unique_bto_legsummary_legEventId", "resource_type": "test", "package_name": "dbtProject_v2", "path": "unique_bto_legsummary_legEventId.sql", "original_file_path": "models\\schema.yml", "unique_id": "test.dbtProject_v2.unique_bto_legsummary_legEventId.373a94c272", "fqn": ["dbtProject_v2", "unique_bto_legsummary_legEventId"], "alias": "unique_bto_legsummary_legEventId", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1720537838.8885427, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [["bto_legsummary"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.dbtProject_v2.bto_legsummary"]}, "compiled_path": "target\\compiled\\dbtProject_v2\\models\\schema.yml\\unique_bto_legsummary_legEventId.sql", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    legEventId as unique_field,\n    count(*) as n_records\n\nfrom \"Bronze\".\"dbo\".\"bto_legsummary\"\nwhere legEventId is not null\ngroup by legEventId\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "legEventId", "file_key_name": "models.bto_legsummary"}, "test.dbtProject_v2.missing_legeventId_LS_BTO_LegSummary_.7966b9e8c0": {"test_metadata": {"name": "missing_legeventId_LS", "kwargs": {"model": "{{ get_where_subquery(ref('BTO_LegSummary')) }}"}, "namespace": null}, "database": "FleetPerformance", "schema": "dbt_test__audit", "name": "missing_legeventId_LS_BTO_LegSummary_", "resource_type": "test", "package_name": "dbtProject_v2", "path": "missing_legeventId_LS_BTO_LegSummary_.sql", "original_file_path": "models\\schema.yml", "unique_id": "test.dbtProject_v2.missing_legeventId_LS_BTO_LegSummary_.7966b9e8c0", "fqn": ["dbtProject_v2", "missing_legeventId_LS_BTO_LegSummary_"], "alias": "missing_legeventId_LS_BTO_LegSummary_", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1720537838.8885427, "relation_name": null, "raw_code": "{{ test_missing_legeventId_LS(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [["BTO_LegSummary"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbtProject_v2.test_missing_legeventId_LS", "macro.dbt.get_where_subquery"], "nodes": ["model.dbtProject_v2.BTO_LegSummary"]}, "compiled_path": "target\\compiled\\dbtProject_v2\\models\\schema.yml\\missing_legeventId_LS_BTO_LegSummary_.sql", "compiled": true, "compiled_code": "\n\nwith a as (\n\tselect distinct legEventId \n\tfrom \"PANDT\".\"FPS\".\"dbo\".\"navis_db_leg_summary\" \n\twhere legEventId not in (3109371, 3123099, 3245118)\n)\n, b as (\n\tselect distinct legEventId\n\tfrom \"Silver\".\"dbo\".\"BTO_LegSummary\"\n)\nselect a.* \nfrom a\nleft join b\non a.legEventId = b.legEventId\nwhere b.legEventId is null\n\n", "extra_ctes_injected": true, "extra_ctes": [], "column_name": null, "file_key_name": "models.BTO_LegSummary"}, "test.dbtProject_v2.full_table_scan_LS_BTO_LegSummary_.e2c4d34988": {"test_metadata": {"name": "full_table_scan_LS", "kwargs": {"model": "{{ get_where_subquery(ref('BTO_LegSummary')) }}"}, "namespace": null}, "database": "FleetPerformance", "schema": "dbt_test__audit", "name": "full_table_scan_LS_BTO_LegSummary_", "resource_type": "test", "package_name": "dbtProject_v2", "path": "full_table_scan_LS_BTO_LegSummary_.sql", "original_file_path": "models\\schema.yml", "unique_id": "test.dbtProject_v2.full_table_scan_LS_BTO_LegSummary_.e2c4d34988", "fqn": ["dbtProject_v2", "full_table_scan_LS_BTO_LegSummary_"], "alias": "full_table_scan_LS_BTO_LegSummary_", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1720537838.898619, "relation_name": null, "raw_code": "{{ test_full_table_scan_LS(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [["BTO_LegSummary"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbtProject_v2.test_full_table_scan_LS", "macro.dbt.get_where_subquery"], "nodes": ["model.dbtProject_v2.BTO_LegSummary"]}, "compiled_path": "target\\compiled\\dbtProject_v2\\models\\schema.yml\\full_table_scan_LS_BTO_LegSummary_.sql", "compiled": true, "compiled_code": "\n\nwith a as (\n\tselect * \n\tfrom PANDT.FPS.dbo.navis_db_leg_summary\n)\n, b as (\n\tselect \n\t\tlegEventId legEventId_ ,\n\t\tportOfOriginUnloc portOfOriginUnloc_,\n\t\tportOfOriginName portOfOriginName_,\n\t\tportOfDestinationUnloc portOfDestinationUnloc_,\n\t\tportOfDestinationName portOfDestinationName_\n\tfrom \"Silver\".\"dbo\".\"BTO_LegSummary\"\n)\nselect *\nfrom a\njoin b\non a.legEventId = b.legEventId_\nwhere a.portOfOriginUnloc <> b.portOfOriginUnloc_\nor a.portOfOriginName <> b.portOfOriginName_\nor a.portOfDestinationUnloc <> b.portOfDestinationUnloc_\nor a.portOfDestinationName <> b.portOfDestinationName_\n\n", "extra_ctes_injected": true, "extra_ctes": [], "column_name": null, "file_key_name": "models.BTO_LegSummary"}, "test.dbtProject_v2.reportId_mismatch_consumption_BTO_Reports_Consumptions_.be82d6d8be": {"test_metadata": {"name": "reportId_mismatch_consumption", "kwargs": {"model": "{{ get_where_subquery(ref('BTO_Reports_Consumptions')) }}"}, "namespace": null}, "database": "FleetPerformance", "schema": "dbt_test__audit", "name": "reportId_mismatch_consumption_BTO_Reports_Consumptions_", "resource_type": "test", "package_name": "dbtProject_v2", "path": "reportId_mismatch_consumption_BTO_Reports_Consumptions_.sql", "original_file_path": "models\\schema.yml", "unique_id": "test.dbtProject_v2.reportId_mismatch_consumption_BTO_Reports_Consumptions_.be82d6d8be", "fqn": ["dbtProject_v2", "reportId_mismatch_consumption_BTO_Reports_Consumptions_"], "alias": "reportId_mismatch_consumption_BTO_Reports_Consumptions_", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1720542776.193291, "relation_name": null, "raw_code": "{{ test_reportId_mismatch_consumption(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [["BTO_Reports_Consumptions"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbtProject_v2.test_reportId_mismatch_consumption", "macro.dbt.get_where_subquery"], "nodes": ["model.dbtProject_v2.BTO_Reports_Consumptions"]}, "compiled_path": "target\\compiled\\dbtProject_v2\\models\\schema.yml\\reportId_mismatch_consumption_BTO_Reports_Consumptions_.sql", "compiled": true, "compiled_code": "\n\nWITH pt AS (\n    SELECT DISTINCT reportid AS id\n    FROM \"PANDT\".\"FPS\".\"dbo\".navis_db_fuel_consumption\n),\nrs AS (\n    SELECT DISTINCT reportid AS id\n    FROM \"Silver\".\"dbo\".\"BTO_Reports_Consumptions\"\n)\n\nSELECT\n    pt.id AS reportid\nFROM\n    pt\nLEFT JOIN rs ON pt.id = rs.id\nWHERE\n    rs.id IS NULL\n\n", "extra_ctes_injected": true, "extra_ctes": [], "column_name": null, "file_key_name": "models.BTO_Reports_Consumptions"}, "test.dbtProject_v2.IMO_mismatch_consumption_BTO_Reports_Consumptions_.8b2d94804c": {"test_metadata": {"name": "IMO_mismatch_consumption", "kwargs": {"model": "{{ get_where_subquery(ref('BTO_Reports_Consumptions')) }}"}, "namespace": null}, "database": "FleetPerformance", "schema": "dbt_test__audit", "name": "IMO_mismatch_consumption_BTO_Reports_Consumptions_", "resource_type": "test", "package_name": "dbtProject_v2", "path": "IMO_mismatch_consumption_BTO_Reports_Consumptions_.sql", "original_file_path": "models\\schema.yml", "unique_id": "test.dbtProject_v2.IMO_mismatch_consumption_BTO_Reports_Consumptions_.8b2d94804c", "fqn": ["dbtProject_v2", "IMO_mismatch_consumption_BTO_Reports_Consumptions_"], "alias": "IMO_mismatch_consumption_BTO_Reports_Consumptions_", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1720542776.193291, "relation_name": null, "raw_code": "{{ test_IMO_mismatch_consumption(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [["BTO_Reports_Consumptions"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbtProject_v2.test_IMO_mismatch_consumption", "macro.dbt.get_where_subquery"], "nodes": ["model.dbtProject_v2.BTO_Reports_Consumptions"]}, "compiled_path": "target\\compiled\\dbtProject_v2\\models\\schema.yml\\IMO_mismatch_consumption_BTO_Reports_Consumptions_.sql", "compiled": true, "compiled_code": "\n\nWITH pt AS (\n    SELECT DISTINCT IMONUMBER AS IMO\n    FROM \"PANDT\".\"FPS\".\"dbo\".navis_db_fuel_consumption\n),\nrs AS (\n    SELECT DISTINCT IMO AS IMO\n    FROM \"Silver\".\"dbo\".\"BTO_Reports_Consumptions\"\n)\n\nSELECT\n    pt.IMO \nFROM\n    pt\nLEFT JOIN rs ON pt.IMO = rs.IMO\nWHERE\n    rs.IMO IS NULL\n\n", "extra_ctes_injected": true, "extra_ctes": [], "column_name": null, "file_key_name": "models.BTO_Reports_Consumptions"}, "test.dbtProject_v2.reportId_mismatch_Boiler_BTO_Reports_Boiler_.b407bfebad": {"test_metadata": {"name": "reportId_mismatch_Boiler", "kwargs": {"model": "{{ get_where_subquery(ref('BTO_Reports_Boiler')) }}"}, "namespace": null}, "database": "FleetPerformance", "schema": "dbt_test__audit", "name": "reportId_mismatch_Boiler_BTO_Reports_Boiler_", "resource_type": "test", "package_name": "dbtProject_v2", "path": "reportId_mismatch_Boiler_BTO_Reports_Boiler_.sql", "original_file_path": "models\\schema.yml", "unique_id": "test.dbtProject_v2.reportId_mismatch_Boiler_BTO_Reports_Boiler_.b407bfebad", "fqn": ["dbtProject_v2", "reportId_mismatch_Boiler_BTO_Reports_Boiler_"], "alias": "reportId_mismatch_Boiler_BTO_Reports_Boiler_", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1720542776.2082937, "relation_name": null, "raw_code": "{{ test_reportId_mismatch_Boiler(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [["BTO_Reports_Boiler"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbtProject_v2.test_reportId_mismatch_Boiler", "macro.dbt.get_where_subquery"], "nodes": ["model.dbtProject_v2.BTO_Reports_Boiler"]}, "compiled_path": "target\\compiled\\dbtProject_v2\\models\\schema.yml\\reportId_mismatch_Boiler_BTO_Reports_Boiler_.sql", "compiled": true, "compiled_code": "\n\nWITH pt AS (\n    SELECT DISTINCT reportid AS id\n    FROM \"PANDT\".\"FPS\".\"dbo\".navis_db_boiler_operation\n),\nrs AS (\n    SELECT DISTINCT reportid AS id\n    FROM \"Silver\".\"dbo\".\"BTO_Reports_Boiler\"\n)\n\nSELECT\n    pt.id AS reportid\nFROM\n    pt\nLEFT JOIN rs ON pt.id = rs.id\nWHERE\n    rs.id IS NULL\n\n", "extra_ctes_injected": true, "extra_ctes": [], "column_name": null, "file_key_name": "models.BTO_Reports_Boiler"}, "test.dbtProject_v2.IMO_mismatch_Boiler_BTO_Reports_Boiler_.dd20263b34": {"test_metadata": {"name": "IMO_mismatch_Boiler", "kwargs": {"model": "{{ get_where_subquery(ref('BTO_Reports_Boiler')) }}"}, "namespace": null}, "database": "FleetPerformance", "schema": "dbt_test__audit", "name": "IMO_mismatch_Boiler_BTO_Reports_Boiler_", "resource_type": "test", "package_name": "dbtProject_v2", "path": "IMO_mismatch_Boiler_BTO_Reports_Boiler_.sql", "original_file_path": "models\\schema.yml", "unique_id": "test.dbtProject_v2.IMO_mismatch_Boiler_BTO_Reports_Boiler_.dd20263b34", "fqn": ["dbtProject_v2", "IMO_mismatch_Boiler_BTO_Reports_Boiler_"], "alias": "IMO_mismatch_Boiler_BTO_Reports_Boiler_", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1720542776.2082937, "relation_name": null, "raw_code": "{{ test_IMO_mismatch_Boiler(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [["BTO_Reports_Boiler"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbtProject_v2.test_IMO_mismatch_Boiler", "macro.dbt.get_where_subquery"], "nodes": ["model.dbtProject_v2.BTO_Reports_Boiler"]}, "compiled_path": "target\\compiled\\dbtProject_v2\\models\\schema.yml\\IMO_mismatch_Boiler_BTO_Reports_Boiler_.sql", "compiled": true, "compiled_code": "\n\nWITH pt AS (\n    SELECT DISTINCT IMONUMBER AS IMO\n    FROM \"PANDT\".\"FPS\".\"dbo\".navis_db_boiler_operation\n),\nrs AS (\n    SELECT DISTINCT IMO AS IMO\n    FROM \"Silver\".\"dbo\".\"BTO_Reports_Boiler\"\n)\n\nSELECT\n    pt.IMO \nFROM\n    pt\nLEFT JOIN rs ON pt.IMO = rs.IMO\nWHERE\n    rs.IMO IS NULL\n\n", "extra_ctes_injected": true, "extra_ctes": [], "column_name": null, "file_key_name": "models.BTO_Reports_Boiler"}, "test.dbtProject_v2.reportId_mismatch_lubOil_BTO_Reports_LubOil_.03afc6bce4": {"test_metadata": {"name": "reportId_mismatch_lubOil", "kwargs": {"model": "{{ get_where_subquery(ref('BTO_Reports_LubOil')) }}"}, "namespace": null}, "database": "FleetPerformance", "schema": "dbt_test__audit", "name": "reportId_mismatch_lubOil_BTO_Reports_LubOil_", "resource_type": "test", "package_name": "dbtProject_v2", "path": "reportId_mismatch_lubOil_BTO_Reports_LubOil_.sql", "original_file_path": "models\\schema.yml", "unique_id": "test.dbtProject_v2.reportId_mismatch_lubOil_BTO_Reports_LubOil_.03afc6bce4", "fqn": ["dbtProject_v2", "reportId_mismatch_lubOil_BTO_Reports_LubOil_"], "alias": "reportId_mismatch_lubOil_BTO_Reports_LubOil_", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1720542776.2232952, "relation_name": null, "raw_code": "{{ test_reportId_mismatch_lubOil(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [["BTO_Reports_LubOil"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbtProject_v2.test_reportId_mismatch_lubOil", "macro.dbt.get_where_subquery"], "nodes": ["model.dbtProject_v2.BTO_Reports_LubOil"]}, "compiled_path": "target\\compiled\\dbtProject_v2\\models\\schema.yml\\reportId_mismatch_lubOil_BTO_Reports_LubOil_.sql", "compiled": true, "compiled_code": "\n\nWITH pt AS (\n    SELECT DISTINCT reportid AS id\n    FROM \"PANDT\".\"FPS\".\"dbo\".navis_db_lub_oil_consumption\n),\nrs AS (\n    SELECT DISTINCT reportid AS id\n    FROM \"Silver\".\"dbo\".\"BTO_Reports_LubOil\"\n)\n\nSELECT\n    pt.id AS reportid\nFROM\n    pt\nLEFT JOIN rs ON pt.id = rs.id\nWHERE\n    rs.id IS NULL\n\n", "extra_ctes_injected": true, "extra_ctes": [], "column_name": null, "file_key_name": "models.BTO_Reports_LubOil"}, "test.dbtProject_v2.IMO_mismatch_lubOil_BTO_Reports_LubOil_.09c59367a7": {"test_metadata": {"name": "IMO_mismatch_lubOil", "kwargs": {"model": "{{ get_where_subquery(ref('BTO_Reports_LubOil')) }}"}, "namespace": null}, "database": "FleetPerformance", "schema": "dbt_test__audit", "name": "IMO_mismatch_lubOil_BTO_Reports_LubOil_", "resource_type": "test", "package_name": "dbtProject_v2", "path": "IMO_mismatch_lubOil_BTO_Reports_LubOil_.sql", "original_file_path": "models\\schema.yml", "unique_id": "test.dbtProject_v2.IMO_mismatch_lubOil_BTO_Reports_LubOil_.09c59367a7", "fqn": ["dbtProject_v2", "IMO_mismatch_lubOil_BTO_Reports_LubOil_"], "alias": "IMO_mismatch_lubOil_BTO_Reports_LubOil_", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1720542776.2232952, "relation_name": null, "raw_code": "{{ test_IMO_mismatch_lubOil(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [["BTO_Reports_LubOil"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbtProject_v2.test_IMO_mismatch_lubOil", "macro.dbt.get_where_subquery"], "nodes": ["model.dbtProject_v2.BTO_Reports_LubOil"]}, "compiled_path": "target\\compiled\\dbtProject_v2\\models\\schema.yml\\IMO_mismatch_lubOil_BTO_Reports_LubOil_.sql", "compiled": true, "compiled_code": "\n\nWITH pt AS (\n    SELECT DISTINCT IMONUMBER AS IMO\n    FROM \"PANDT\".\"FPS\".\"dbo\".navis_db_lub_oil_consumption\n),\nrs AS (\n    SELECT DISTINCT IMO AS IMO\n    FROM \"Silver\".\"dbo\".\"BTO_Reports_LubOil\"\n)\n\nSELECT\n    pt.IMO \nFROM\n    pt\nLEFT JOIN rs ON pt.IMO = rs.IMO\nWHERE\n    rs.IMO IS NULL\n\n", "extra_ctes_injected": true, "extra_ctes": [], "column_name": null, "file_key_name": "models.BTO_Reports_LubOil"}, "test.dbtProject_v2.reportId_mismatch_MAIN_BTO_Reports_Engines_MAIN_.1475841216": {"test_metadata": {"name": "reportId_mismatch_MAIN", "kwargs": {"model": "{{ get_where_subquery(ref('BTO_Reports_Engines_MAIN')) }}"}, "namespace": null}, "database": "FleetPerformance", "schema": "dbt_test__audit", "name": "reportId_mismatch_MAIN_BTO_Reports_Engines_MAIN_", "resource_type": "test", "package_name": "dbtProject_v2", "path": "reportId_mismatch_MAIN_BTO_Reports_Engines_MAIN_.sql", "original_file_path": "models\\schema.yml", "unique_id": "test.dbtProject_v2.reportId_mismatch_MAIN_BTO_Reports_Engines_MAIN_.1475841216", "fqn": ["dbtProject_v2", "reportId_mismatch_MAIN_BTO_Reports_Engines_MAIN_"], "alias": "reportId_mismatch_MAIN_BTO_Reports_Engines_MAIN_", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1720542776.238297, "relation_name": null, "raw_code": "{{ test_reportId_mismatch_MAIN(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [["BTO_Reports_Engines_MAIN"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbtProject_v2.test_reportId_mismatch_MAIN", "macro.dbt.get_where_subquery"], "nodes": ["model.dbtProject_v2.BTO_Reports_Engines_MAIN"]}, "compiled_path": "target\\compiled\\dbtProject_v2\\models\\schema.yml\\reportId_mismatch_MAIN_BTO_Reports_Engines_MAIN_.sql", "compiled": true, "compiled_code": "\n\nWITH pt AS (\n    SELECT DISTINCT reportid AS id\n    FROM \"PANDT\".\"FPS\".\"dbo\".navis_db_me_operation\n),\nrs AS (\n    SELECT DISTINCT reportid AS id\n    FROM \"Silver\".\"dbo\".\"BTO_Reports_Engines_MAIN\"\n)\n\nSELECT\n    pt.id AS reportid\nFROM\n    pt\nLEFT JOIN rs ON pt.id = rs.id\nWHERE\n    rs.id IS NULL\n\n", "extra_ctes_injected": true, "extra_ctes": [], "column_name": null, "file_key_name": "models.BTO_Reports_Engines_MAIN"}, "test.dbtProject_v2.IMO_mismatch_MAIN_BTO_Reports_Engines_MAIN_.1470dfcd66": {"test_metadata": {"name": "IMO_mismatch_MAIN", "kwargs": {"model": "{{ get_where_subquery(ref('BTO_Reports_Engines_MAIN')) }}"}, "namespace": null}, "database": "FleetPerformance", "schema": "dbt_test__audit", "name": "IMO_mismatch_MAIN_BTO_Reports_Engines_MAIN_", "resource_type": "test", "package_name": "dbtProject_v2", "path": "IMO_mismatch_MAIN_BTO_Reports_Engines_MAIN_.sql", "original_file_path": "models\\schema.yml", "unique_id": "test.dbtProject_v2.IMO_mismatch_MAIN_BTO_Reports_Engines_MAIN_.1470dfcd66", "fqn": ["dbtProject_v2", "IMO_mismatch_MAIN_BTO_Reports_Engines_MAIN_"], "alias": "IMO_mismatch_MAIN_BTO_Reports_Engines_MAIN_", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1720542776.238297, "relation_name": null, "raw_code": "{{ test_IMO_mismatch_MAIN(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [["BTO_Reports_Engines_MAIN"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbtProject_v2.test_IMO_mismatch_MAIN", "macro.dbt.get_where_subquery"], "nodes": ["model.dbtProject_v2.BTO_Reports_Engines_MAIN"]}, "compiled_path": "target\\compiled\\dbtProject_v2\\models\\schema.yml\\IMO_mismatch_MAIN_BTO_Reports_Engines_MAIN_.sql", "compiled": true, "compiled_code": "\n\nWITH pt AS (\n    SELECT DISTINCT IMONUMBER AS IMO\n    FROM \"PANDT\".\"FPS\".\"dbo\".navis_db_me_operation\n),\nrs AS (\n    SELECT DISTINCT IMO AS IMO\n    FROM \"Silver\".\"dbo\".\"BTO_Reports_Engines_MAIN\"\n)\n\nSELECT\n    pt.IMO \nFROM\n    pt\nLEFT JOIN rs ON pt.IMO = rs.IMO\nWHERE\n    rs.IMO IS NULL\n\n", "extra_ctes_injected": true, "extra_ctes": [], "column_name": null, "file_key_name": "models.BTO_Reports_Engines_MAIN"}, "test.dbtProject_v2.reportId_mismatch_AUX_BTO_Reports_Engines_AUX_.bbdc284253": {"test_metadata": {"name": "reportId_mismatch_AUX", "kwargs": {"model": "{{ get_where_subquery(ref('BTO_Reports_Engines_AUX')) }}"}, "namespace": null}, "database": "FleetPerformance", "schema": "dbt_test__audit", "name": "reportId_mismatch_AUX_BTO_Reports_Engines_AUX_", "resource_type": "test", "package_name": "dbtProject_v2", "path": "reportId_mismatch_AUX_BTO_Reports_Engines_AUX_.sql", "original_file_path": "models\\schema.yml", "unique_id": "test.dbtProject_v2.reportId_mismatch_AUX_BTO_Reports_Engines_AUX_.bbdc284253", "fqn": ["dbtProject_v2", "reportId_mismatch_AUX_BTO_Reports_Engines_AUX_"], "alias": "reportId_mismatch_AUX_BTO_Reports_Engines_AUX_", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1720542776.253808, "relation_name": null, "raw_code": "{{ test_reportId_mismatch_AUX(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [["BTO_Reports_Engines_AUX"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbtProject_v2.test_reportId_mismatch_AUX", "macro.dbt.get_where_subquery"], "nodes": ["model.dbtProject_v2.BTO_Reports_Engines_AUX"]}, "compiled_path": "target\\compiled\\dbtProject_v2\\models\\schema.yml\\reportId_mismatch_AUX_BTO_Reports_Engines_AUX_.sql", "compiled": true, "compiled_code": "\n\nWITH pt AS (\n    SELECT DISTINCT reportid AS id\n    FROM \"PANDT\".\"FPS\".\"dbo\".navis_db_ae_operation\n),\nrs AS (\n    SELECT DISTINCT reportid AS id\n    FROM \"Silver\".\"dbo\".\"BTO_Reports_Engines_AUX\"\n)\n\nSELECT\n    pt.id AS reportid\nFROM\n    pt\nLEFT JOIN rs ON pt.id = rs.id\nWHERE\n    rs.id IS NULL\n\n", "extra_ctes_injected": true, "extra_ctes": [], "column_name": null, "file_key_name": "models.BTO_Reports_Engines_AUX"}, "test.dbtProject_v2.IMO_mismatch_AUX_BTO_Reports_Engines_AUX_.6c1d9891fe": {"test_metadata": {"name": "IMO_mismatch_AUX", "kwargs": {"model": "{{ get_where_subquery(ref('BTO_Reports_Engines_AUX')) }}"}, "namespace": null}, "database": "FleetPerformance", "schema": "dbt_test__audit", "name": "IMO_mismatch_AUX_BTO_Reports_Engines_AUX_", "resource_type": "test", "package_name": "dbtProject_v2", "path": "IMO_mismatch_AUX_BTO_Reports_Engines_AUX_.sql", "original_file_path": "models\\schema.yml", "unique_id": "test.dbtProject_v2.IMO_mismatch_AUX_BTO_Reports_Engines_AUX_.6c1d9891fe", "fqn": ["dbtProject_v2", "IMO_mismatch_AUX_BTO_Reports_Engines_AUX_"], "alias": "IMO_mismatch_AUX_BTO_Reports_Engines_AUX_", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1720542776.253808, "relation_name": null, "raw_code": "{{ test_IMO_mismatch_AUX(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [["BTO_Reports_Engines_AUX"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbtProject_v2.test_IMO_mismatch_AUX", "macro.dbt.get_where_subquery"], "nodes": ["model.dbtProject_v2.BTO_Reports_Engines_AUX"]}, "compiled_path": "target\\compiled\\dbtProject_v2\\models\\schema.yml\\IMO_mismatch_AUX_BTO_Reports_Engines_AUX_.sql", "compiled": true, "compiled_code": "\n\nWITH pt AS (\n    SELECT DISTINCT IMONUMBER AS IMO\n    FROM \"PANDT\".\"FPS\".\"dbo\".navis_db_ae_operation\n),\nrs AS (\n    SELECT DISTINCT IMO AS IMO\n    FROM \"Silver\".\"dbo\".\"BTO_Reports_Engines_AUX\"\n)\n\nSELECT\n    pt.IMO \nFROM\n    pt\nLEFT JOIN rs ON pt.IMO = rs.IMO\nWHERE\n    rs.IMO IS NULL\n\n", "extra_ctes_injected": true, "extra_ctes": [], "column_name": null, "file_key_name": "models.BTO_Reports_Engines_AUX"}, "model.dbtProject_v2.bto_ships": {"database": "Bronze", "schema": "dbo", "name": "bto_ships", "resource_type": "model", "package_name": "dbtProject_v2", "path": "bronze\\bto_ships.sql", "original_file_path": "models\\bronze\\bto_ships.sql", "unique_id": "model.dbtProject_v2.bto_ships", "fqn": ["dbtProject_v2", "bronze", "bto_ships"], "alias": "bto_ships", "checksum": {"name": "sha256", "checksum": "73c0743a695ed144e70d27d5aecf9b977f5318149567a67b2a649a7d8edc7b68"}, "config": {"enabled": true, "alias": null, "schema": "dbo", "database": "Bronze", "tags": [], "meta": {}, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [{"sql": "UPDATE {{ source('stage', 'api_bto_ships') }} \n        SET isNormalized=1\n        where LOAD_ID = {{ max_loadid('source', 'api_bto_ships') }}\n        AND isError = 0", "transaction": true, "index": null}], "pre-hook": []}, "tags": [], "description": "", "columns": {"IMO": {"name": "IMO", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "dbtProject_v2://models\\schema.yml", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "schema": "dbo", "database": "Bronze", "post-hook": ["UPDATE {{ source('stage', 'api_bto_ships') }} \n        SET isNormalized=1\n        where LOAD_ID = {{ max_loadid('source', 'api_bto_ships') }}\n        AND isError = 0"]}, "created_at": 1720544238.5566573, "relation_name": "\"Bronze\".\"dbo\".\"bto_ships\"", "raw_code": "{{ config(\r\n        post_hook=\"UPDATE {{ source('stage', 'api_bto_ships') }} \r\n        SET isNormalized=1\r\n        where LOAD_ID = {{ max_loadid('source', 'api_bto_ships') }}\r\n        AND isError = 0\"\r\n        ) \r\n}}\r\nWITH cte AS(\r\n    SELECT \r\n        --NEWID() as GU_ID,\r\n        --JSON_VALUE(sec.value, '$.id') as SHIP_ID,\r\n        JSON_VALUE(sec.value, '$.imoNumber') as IMO,\r\n        [value] as json_data,\r\n        /*JSON_VALUE(sec.value, '$.name') as Name,\r\n        JSON_VALUE(sec.value, '$.shortName') as ShortName,\r\n        JSON_VALUE(sec.value, '$.alternativeName') as AlternativeName,\r\n        JSON_VALUE(sec.value, '$.currentVersionStamp') as CurrentVersionStamp,\r\n        JSON_VALUE(sec.value, '$.shipClassId') as ShipClassId,\r\n        JSON_VALUE(sec.value, '$.shipClassName') as ShipClassName,\r\n        JSON_VALUE(sec.value, '$.isHidden') as IsHidden,\r\n        JSON_VALUE(sec.value, '$.callSign') as CallSign,\r\n        JSON_VALUE(sec.value, '$.portOfRegistryUnloc') as PortOfRegistryUnloc,\r\n        JSON_VALUE(sec.value, '$.OwnerName') as OwnerName,\r\n        JSON_VALUE(sec.value, '$.Link') as Link,*/\r\n        GETDATE() as LoadDatetime,\r\n        --0 AS isDeleted,\r\n        --GETDATE() AS dbt_created_at,\r\n        --GETDATE() AS dbt_updated_at,\r\n        main.Load_ID as Load_ID\r\n    FROM {{ source('stage','api_bto_ships') }} as main\r\n    CROSS APPLY OPENJSON(main.rawdata, '$.items') as sec\r\n    WHERE Load_ID = {{ max_loadid('source', 'api_bto_ships') }} AND isError = 0\r\n    and JSON_VALUE(sec.value, '$.imoNumber') not in (1234567, 1005100, 1010715, 1001001, 9999981, 9999980, 9999977, 9999982, 9999978, 9999977, 9999979)\r\n)\r\nSELECT * FROM cte", "language": "sql", "refs": [], "sources": [["stage", "api_bto_ships"], ["stage", "api_bto_ships"]], "metrics": [], "depends_on": {"macros": ["macro.dbtProject_v2.max_loadid"], "nodes": ["source.dbtProject_v2.stage.api_bto_ships", "source.dbtProject_v2.stage.api_bto_ships"]}, "compiled_path": "target\\compiled\\dbtProject_v2\\models\\bronze\\bto_ships.sql", "compiled": true, "compiled_code": "\nWITH cte AS(\n    SELECT \n        --NEWID() as GU_ID,\n        --JSON_VALUE(sec.value, '$.id') as SHIP_ID,\n        JSON_VALUE(sec.value, '$.imoNumber') as IMO,\n        [value] as json_data,\n        /*JSON_VALUE(sec.value, '$.name') as Name,\n        JSON_VALUE(sec.value, '$.shortName') as ShortName,\n        JSON_VALUE(sec.value, '$.alternativeName') as AlternativeName,\n        JSON_VALUE(sec.value, '$.currentVersionStamp') as CurrentVersionStamp,\n        JSON_VALUE(sec.value, '$.shipClassId') as ShipClassId,\n        JSON_VALUE(sec.value, '$.shipClassName') as ShipClassName,\n        JSON_VALUE(sec.value, '$.isHidden') as IsHidden,\n        JSON_VALUE(sec.value, '$.callSign') as CallSign,\n        JSON_VALUE(sec.value, '$.portOfRegistryUnloc') as PortOfRegistryUnloc,\n        JSON_VALUE(sec.value, '$.OwnerName') as OwnerName,\n        JSON_VALUE(sec.value, '$.Link') as Link,*/\n        GETDATE() as LoadDatetime,\n        --0 AS isDeleted,\n        --GETDATE() AS dbt_created_at,\n        --GETDATE() AS dbt_updated_at,\n        main.Load_ID as Load_ID\n    FROM \"StageData\".\"dbo\".\"api_bto_ships\" as main\n    CROSS APPLY OPENJSON(main.rawdata, '$.items') as sec\n    WHERE Load_ID = 782497 AND isError = 0\n    and JSON_VALUE(sec.value, '$.imoNumber') not in (1234567, 1005100, 1010715, 1001001, 9999981, 9999980, 9999977, 9999982, 9999978, 9999977, 9999979)\n)\nSELECT * FROM cte", "extra_ctes_injected": true, "extra_ctes": []}, "model.dbtProject_v2.bto_reportsummaries": {"database": "Bronze", "schema": "dbo", "name": "bto_reportsummaries", "resource_type": "model", "package_name": "dbtProject_v2", "path": "bronze\\bto_reportsummaries.sql", "original_file_path": "models\\bronze\\bto_reportsummaries.sql", "unique_id": "model.dbtProject_v2.bto_reportsummaries", "fqn": ["dbtProject_v2", "bronze", "bto_reportsummaries"], "alias": "bto_reportsummaries", "checksum": {"name": "sha256", "checksum": "e3e15eb7cdef4396af566663cd1d828d515b99136abb5dfac359978d58e811f1"}, "config": {"enabled": true, "alias": null, "schema": "dbo", "database": "Bronze", "tags": [], "meta": {}, "materialized": "incremental", "incremental_strategy": "delete+insert", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": "reportId", "on_schema_change": "sync_all_columns", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "as_columnstore": false, "post-hook": [{"sql": "\n            UPDATE {{ source('stage', 'api_bto_shipsReportSDelta') }}\n            SET isNormalized = 1\n            WHERE LOAD_ID = {{ max_loadid('source', 'api_bto_shipsReportSDelta') }}\n            AND isError = 0", "transaction": true, "index": null}], "pre-hook": []}, "tags": [], "description": "", "columns": {"reportId": {"name": "reportId", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "IMO": {"name": "IMO", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "dbtProject_v2://models\\schema.yml", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "incremental", "schema": "dbo", "database": "Bronze", "as_columnstore": false, "unique_key": "reportId", "incremental_strategy": "delete+insert", "on_schema_change": "sync_all_columns", "post-hook": ["\n            UPDATE {{ source('stage', 'api_bto_shipsReportSDelta') }}\n            SET isNormalized = 1\n            WHERE LOAD_ID = {{ max_loadid('source', 'api_bto_shipsReportSDelta') }}\n            AND isError = 0"]}, "created_at": 1720544238.558657, "relation_name": "\"Bronze\".\"dbo\".\"bto_reportsummaries\"", "raw_code": "{{ config(\r\n        materialized = 'incremental',\r\n        as_columnstore = false,\r\n        unique_key = 'reportId',\r\n        incremental_strategy = 'delete+insert',\r\n        on_schema_change = 'sync_all_columns',\r\n        post_hook = \"\r\n            UPDATE {{ source('stage', 'api_bto_shipsReportSDelta') }}\r\n            SET isNormalized = 1\r\n            WHERE LOAD_ID = {{ max_loadid('source', 'api_bto_shipsReportSDelta') }}\r\n            AND isError = 0\"\r\n) }}\r\n\r\n{%- call statement('my_statement', fetch_result=true) -%}\r\n    SELECT distinct source\r\n    FROM {{ source('stage','api_bto_shipsReportSDelta') }}\r\n    where load_id = {{ max_loadid('source', 'api_bto_shipsReportSDelta') }}\r\n{%- endcall -%}\r\n{% if execute %}\r\n    {% set results_list = load_result('my_statement')['data'][0][0] %}\r\n{% else %}\r\n    {% set results_list = None %}\r\n{% endif %}\r\n\r\n{% if results_list == 'summaries' %}\r\n    with cte as(\r\n    select \r\n        IMO, \r\n        CONVERT(INT, JSON_VALUE(sec.value, '$.reportId')) AS reportId, \r\n        value as json_data, \r\n        getDate() as LoadDateTime, \r\n        main.Load_ID , \r\n        0 as isdeleted\r\n    from {{source('stage','api_bto_shipsReportSDelta')}} as main\r\n    cross apply openjson(main.rawdata, '$.items') as sec\r\n    where main.load_id = {{ max_loadid('source', 'api_bto_shipsReportSDelta') }}\r\n    and imo not in (1234567, 1005100, 1010715, 1001001, 9999981, 9999980, 9999977, 9999982, 9999978, 9999977, 9999979)\r\n    and main.isError = 0\r\n    )\r\n    select * from cte\r\n{% elif results_list == 'summary' %}\r\n    with cte as (\r\n        select\r\n            IMO,\r\n            reportId,\r\n            Rawdata as json_data,\r\n            getdate() as LoadDateTime,\r\n            main.Load_ID, \r\n            0 as isdeleted\r\n        FROM {{source('stage','api_bto_shipsReportSDelta')}} as main\r\n        where main.load_id = {{ max_loadid('source', 'api_bto_shipsReportSDelta') }}\r\n        and imo not in (1234567, 1005100, 1010715, 1001001)\r\n        and main.isError = 0\r\n    )\r\n    select * from cte\r\n{% endif %}", "language": "sql", "refs": [], "sources": [["stage", "api_bto_shipsReportSDelta"]], "metrics": [], "depends_on": {"macros": ["macro.dbt.statement", "macro.dbtProject_v2.max_loadid"], "nodes": ["source.dbtProject_v2.stage.api_bto_shipsReportSDelta"]}, "compiled_path": "target\\compiled\\dbtProject_v2\\models\\bronze\\bto_reportsummaries.sql", "compiled": true, "compiled_code": "\n    \n\n\n\n    with cte as (\n        select\n            IMO,\n            reportId,\n            Rawdata as json_data,\n            getdate() as LoadDateTime,\n            main.Load_ID, \n            0 as isdeleted\n        FROM \"StageData\".\"dbo\".\"api_bto_shipsReportSDelta\" as main\n        where main.load_id = 782396\n        and imo not in (1234567, 1005100, 1010715, 1001001)\n        and main.isError = 0\n    )\n    select * from cte\n", "extra_ctes_injected": true, "extra_ctes": []}, "model.dbtProject_v2.btr_ships": {"database": "Bronze", "schema": "dbo", "name": "btr_ships", "resource_type": "model", "package_name": "dbtProject_v2", "path": "bronze\\btr_ships.sql", "original_file_path": "models\\bronze\\btr_ships.sql", "unique_id": "model.dbtProject_v2.btr_ships", "fqn": ["dbtProject_v2", "bronze", "btr_ships"], "alias": "btr_ships", "checksum": {"name": "sha256", "checksum": "c33f0e0200a5a4e93436c5246ca02b5db9598459b204f69cb3f3f7006f5136da"}, "config": {"enabled": true, "alias": null, "schema": "dbo", "database": "Bronze", "tags": [], "meta": {}, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [{"sql": "UPDATE {{ source('stage', 'api_btr_ships') }} \n        SET isNormalized=1\n        where LOAD_ID = {{ max_loadid('source', 'api_btr_ships') }}\n        AND isError = 0", "transaction": true, "index": null}], "pre-hook": []}, "tags": [], "description": "", "columns": {"IMO": {"name": "IMO", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "dbtProject_v2://models\\schema.yml", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "schema": "dbo", "database": "Bronze", "post-hook": ["UPDATE {{ source('stage', 'api_btr_ships') }} \n        SET isNormalized=1\n        where LOAD_ID = {{ max_loadid('source', 'api_btr_ships') }}\n        AND isError = 0"]}, "created_at": 1720544238.5606573, "relation_name": "\"Bronze\".\"dbo\".\"btr_ships\"", "raw_code": "{{ config(\r\n        post_hook=\"UPDATE {{ source('stage', 'api_btr_ships') }} \r\n        SET isNormalized=1\r\n        where LOAD_ID = {{ max_loadid('source', 'api_btr_ships') }}\r\n        AND isError = 0\"\r\n        ) \r\n}}\r\n\r\nwith cte as (\r\nSELECT \r\n    JSON_VALUE(sec.value, '$.imo') as IMO,\r\n\t[value] as json_data,\r\n    GETDATE() as LoadDatetime,\r\n    main.Load_ID as Load_ID\r\nFROM {{ source('stage','api_btr_ships') }} as main\r\ncross apply OPENJSON(main.Rawdata, '$.items') as sec\r\nwhere Load_ID = {{ max_loadid('source', 'api_btr_ships') }} and IsError = 0\r\nand JSON_VALUE(sec.value, '$.imo') not in (1234567, 1005100, 1010715, 1001001, 9999981, 9999980, 9999977, 9999982, 9999978, 9999977, 9999979)\r\n)\r\nselect * from cte", "language": "sql", "refs": [], "sources": [["stage", "api_btr_ships"], ["stage", "api_btr_ships"]], "metrics": [], "depends_on": {"macros": ["macro.dbtProject_v2.max_loadid"], "nodes": ["source.dbtProject_v2.stage.api_btr_ships", "source.dbtProject_v2.stage.api_btr_ships"]}, "compiled_path": "target\\compiled\\dbtProject_v2\\models\\bronze\\btr_ships.sql", "compiled": true, "compiled_code": "\n\nwith cte as (\nSELECT \n    JSON_VALUE(sec.value, '$.imo') as IMO,\n\t[value] as json_data,\n    GETDATE() as LoadDatetime,\n    main.Load_ID as Load_ID\nFROM \"StageData\".\"dbo\".\"api_btr_ships\" as main\ncross apply OPENJSON(main.Rawdata, '$.items') as sec\nwhere Load_ID = 782497 and IsError = 0\nand JSON_VALUE(sec.value, '$.imo') not in (1234567, 1005100, 1010715, 1001001, 9999981, 9999980, 9999977, 9999982, 9999978, 9999977, 9999979)\n)\nselect * from cte", "extra_ctes_injected": true, "extra_ctes": []}, "model.dbtProject_v2.lookup_ships": {"database": "StageData", "schema": "dbo", "name": "lookup_ships", "resource_type": "model", "package_name": "dbtProject_v2", "path": "stage\\lookup_ships.sql", "original_file_path": "models\\stage\\lookup_ships.sql", "unique_id": "model.dbtProject_v2.lookup_ships", "fqn": ["dbtProject_v2", "stage", "lookup_ships"], "alias": "lookup_ships", "checksum": {"name": "sha256", "checksum": "a0d93093066f1703bcf82e2e85ef8236b5d1e0783a4a48302299d2103e35de86"}, "config": {"enabled": true, "alias": null, "schema": "dbo", "database": "StageData", "tags": [], "meta": {}, "materialized": "incremental", "incremental_strategy": "delete+insert", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": ["IMO", "LOAD_ID"], "on_schema_change": "sync_all_columns", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "dbtProject_v2://models\\schema.yml", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "incremental", "schema": "dbo", "database": "StageData", "unique_key": ["IMO", "LOAD_ID"], "incremental_strategy": "delete+insert", "on_schema_change": "sync_all_columns"}, "created_at": 1720544238.5616593, "relation_name": "\"StageData\".\"dbo\".\"lookup_ships\"", "raw_code": "{{ config(\r\n    materialized='incremental',\r\n    unique_key=['IMO', 'LOAD_ID'],\r\n    incremental_strategy='delete+insert',\r\n    on_schema_change='sync_all_columns'\r\n) }}\r\n\r\nWITH bto AS (\r\n    SELECT *, 'bto_ships' AS source\r\n    FROM {{ ref('bto_Ships') }}\r\n    where imo is not null and imo != 0\r\n    AND IMO NOT IN (1234567, 1005100, 1010715, 1001001, 9999981, 9999980, 9999977, 9999982, 9999978, 9999977, 9999979)\r\n),\r\n\r\nbtr AS (\r\n    SELECT *, 'btr_ships' AS source\r\n    FROM {{ ref('btr_Ships') }}\r\n    where imo is not null and imo != 0\r\n    AND IMO NOT IN (1234567, 1005100, 1010715, 1001001, 9999981, 9999980, 9999977, 9999982, 9999978, 9999977, 9999979)\r\n),\r\n\r\ndim AS (\r\n    SELECT *, 'dim_vessel' AS source\r\n    FROM {{ var('linked_server') }}.{{ source('corpdata', 'DimVesselSS') }}\r\n    WHERE IMO IS NOT NULL AND IMO != 0 \r\n    AND IMO NOT IN (1234567, 1005100, 1010715, 1001001, 9999981, 9999980, 9999977, 9999982, 9999978, 9999977, 9999979)\r\n),\r\n\r\nships AS (\r\n    SELECT \r\n        CAST(COALESCE(bto.IMO, btr.IMO) AS INTEGER) AS IMO,\r\n        COALESCE(bto.LOAD_ID, btr.LOAD_ID) AS LOAD_ID,\r\n        COALESCE(bto.source, btr.source) AS source,\r\n        CAST(CASE WHEN bto.IMO IS NOT NULL THEN 1 ELSE 0 END AS bit) AS is_bto,\r\n        CAST(CASE WHEN btr.IMO IS NOT NULL THEN 1 ELSE 0 END AS bit) AS is_btr, \r\n        CAST(CASE WHEN bto.currentversionstamp IS NOT NULL THEN bto.currentversionstamp ELSE -1 END AS INTEGER) AS bto_currentversionstamp,\r\n        CAST(CASE WHEN btr.currentversionstamp IS NOT NULL THEN btr.currentversionstamp ELSE -1 END AS INTEGER) AS btr_currentversionstamp\r\n    FROM btr\r\n    FULL OUTER JOIN bto\r\n        ON btr.IMO = bto.IMO\r\n)\r\n\r\nSELECT\r\n    CAST(COALESCE(dim.IMO, s.IMO) AS INTEGER) AS IMO,\r\n    COALESCE(s.is_bto, 0) AS IS_BTO_Ship,\r\n    COALESCE(s.bto_currentversionstamp, -1) AS BTO_CurrentVersionStamp,\r\n    COALESCE(s.is_btr, 0) AS IS_BTR_Ship,\r\n    COALESCE(s.btr_currentversionstamp, -1) AS BTR_CurrentVersionStamp,\r\n    GETDATE() AS LoadDatetime,\r\n    {{ max_loadid('model', 'bto_Ships') }} AS LOAD_ID,\r\n    COALESCE(dim.source, s.source) AS source\r\nFROM ships s\r\nFULL OUTER JOIN dim\r\n    ON s.IMO = dim.IMO", "language": "sql", "refs": [["bto_Ships"], ["btr_Ships"]], "sources": [["corpdata", "DimVesselSS"]], "metrics": [], "depends_on": {"macros": ["macro.dbtProject_v2.max_loadid"], "nodes": ["source.dbtProject_v2.corpdata.DimVesselSS", "model.dbtProject_v2.bto_Ships", "model.dbtProject_v2.btr_Ships"]}, "compiled_path": "target\\compiled\\dbtProject_v2\\models\\stage\\lookup_ships.sql", "compiled": true, "compiled_code": "\n\nWITH bto AS (\n    SELECT *, 'bto_ships' AS source\n    FROM \"Silver\".\"dbo\".\"bto_Ships\"\n    where imo is not null and imo != 0\n    AND IMO NOT IN (1234567, 1005100, 1010715, 1001001, 9999981, 9999980, 9999977, 9999982, 9999978, 9999977, 9999979)\n),\n\nbtr AS (\n    SELECT *, 'btr_ships' AS source\n    FROM \"Silver\".\"dbo\".\"btr_Ships\"\n    where imo is not null and imo != 0\n    AND IMO NOT IN (1234567, 1005100, 1010715, 1001001, 9999981, 9999980, 9999977, 9999982, 9999978, 9999977, 9999979)\n),\n\ndim AS (\n    SELECT *, 'dim_vessel' AS source\n    FROM \"CORPDATA\".\"DataWarehouse\".\"dbo\".\"DimVesselSS\"\n    WHERE IMO IS NOT NULL AND IMO != 0 \n    AND IMO NOT IN (1234567, 1005100, 1010715, 1001001, 9999981, 9999980, 9999977, 9999982, 9999978, 9999977, 9999979)\n),\n\nships AS (\n    SELECT \n        CAST(COALESCE(bto.IMO, btr.IMO) AS INTEGER) AS IMO,\n        COALESCE(bto.LOAD_ID, btr.LOAD_ID) AS LOAD_ID,\n        COALESCE(bto.source, btr.source) AS source,\n        CAST(CASE WHEN bto.IMO IS NOT NULL THEN 1 ELSE 0 END AS bit) AS is_bto,\n        CAST(CASE WHEN btr.IMO IS NOT NULL THEN 1 ELSE 0 END AS bit) AS is_btr, \n        CAST(CASE WHEN bto.currentversionstamp IS NOT NULL THEN bto.currentversionstamp ELSE -1 END AS INTEGER) AS bto_currentversionstamp,\n        CAST(CASE WHEN btr.currentversionstamp IS NOT NULL THEN btr.currentversionstamp ELSE -1 END AS INTEGER) AS btr_currentversionstamp\n    FROM btr\n    FULL OUTER JOIN bto\n        ON btr.IMO = bto.IMO\n)\n\nSELECT\n    CAST(COALESCE(dim.IMO, s.IMO) AS INTEGER) AS IMO,\n    COALESCE(s.is_bto, 0) AS IS_BTO_Ship,\n    COALESCE(s.bto_currentversionstamp, -1) AS BTO_CurrentVersionStamp,\n    COALESCE(s.is_btr, 0) AS IS_BTR_Ship,\n    COALESCE(s.btr_currentversionstamp, -1) AS BTR_CurrentVersionStamp,\n    GETDATE() AS LoadDatetime,\n    782497 AS LOAD_ID,\n    COALESCE(dim.source, s.source) AS source\nFROM ships s\nFULL OUTER JOIN dim\n    ON s.IMO = dim.IMO", "extra_ctes_injected": true, "extra_ctes": []}, "test.dbtProject_v2.not_null_bto_ships_IMO.c3725a3f1d": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "IMO", "model": "{{ get_where_subquery(ref('bto_ships')) }}"}, "namespace": null}, "database": "FleetPerformance", "schema": "dbt_test__audit", "name": "not_null_bto_ships_IMO", "resource_type": "test", "package_name": "dbtProject_v2", "path": "not_null_bto_ships_IMO.sql", "original_file_path": "models\\schema.yml", "unique_id": "test.dbtProject_v2.not_null_bto_ships_IMO.c3725a3f1d", "fqn": ["dbtProject_v2", "not_null_bto_ships_IMO"], "alias": "not_null_bto_ships_IMO", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1720544238.5729396, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [["bto_ships"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.dbtProject_v2.bto_ships"]}, "compiled_path": "target\\compiled\\dbtProject_v2\\models\\schema.yml\\not_null_bto_ships_IMO.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect IMO\nfrom \"Bronze\".\"dbo\".\"bto_ships\"\nwhere IMO is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "IMO", "file_key_name": "models.bto_ships"}, "test.dbtProject_v2.unique_bto_ships_IMO.c014fb61fe": {"test_metadata": {"name": "unique", "kwargs": {"column_name": "IMO", "model": "{{ get_where_subquery(ref('bto_ships')) }}"}, "namespace": null}, "database": "FleetPerformance", "schema": "dbt_test__audit", "name": "unique_bto_ships_IMO", "resource_type": "test", "package_name": "dbtProject_v2", "path": "unique_bto_ships_IMO.sql", "original_file_path": "models\\schema.yml", "unique_id": "test.dbtProject_v2.unique_bto_ships_IMO.c014fb61fe", "fqn": ["dbtProject_v2", "unique_bto_ships_IMO"], "alias": "unique_bto_ships_IMO", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1720544238.5759397, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [["bto_ships"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.dbtProject_v2.bto_ships"]}, "compiled_path": "target\\compiled\\dbtProject_v2\\models\\schema.yml\\unique_bto_ships_IMO.sql", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    IMO as unique_field,\n    count(*) as n_records\n\nfrom \"Bronze\".\"dbo\".\"bto_ships\"\nwhere IMO is not null\ngroup by IMO\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "IMO", "file_key_name": "models.bto_ships"}, "test.dbtProject_v2.not_null_bto_reportsummaries_reportId.fcf84dbb54": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "reportId", "model": "{{ get_where_subquery(ref('bto_reportsummaries')) }}"}, "namespace": null}, "database": "FleetPerformance", "schema": "dbt_test__audit", "name": "not_null_bto_reportsummaries_reportId", "resource_type": "test", "package_name": "dbtProject_v2", "path": "not_null_bto_reportsummaries_reportId.sql", "original_file_path": "models\\schema.yml", "unique_id": "test.dbtProject_v2.not_null_bto_reportsummaries_reportId.fcf84dbb54", "fqn": ["dbtProject_v2", "not_null_bto_reportsummaries_reportId"], "alias": "not_null_bto_reportsummaries_reportId", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1720544238.5779397, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [["bto_reportsummaries"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.dbtProject_v2.bto_reportsummaries"]}, "compiled_path": "target\\compiled\\dbtProject_v2\\models\\schema.yml\\not_null_bto_reportsummaries_reportId.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect reportId\nfrom \"Bronze\".\"dbo\".\"bto_reportsummaries\"\nwhere reportId is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "reportId", "file_key_name": "models.bto_reportsummaries"}, "test.dbtProject_v2.unique_bto_reportsummaries_reportId.34da42c00b": {"test_metadata": {"name": "unique", "kwargs": {"column_name": "reportId", "model": "{{ get_where_subquery(ref('bto_reportsummaries')) }}"}, "namespace": null}, "database": "FleetPerformance", "schema": "dbt_test__audit", "name": "unique_bto_reportsummaries_reportId", "resource_type": "test", "package_name": "dbtProject_v2", "path": "unique_bto_reportsummaries_reportId.sql", "original_file_path": "models\\schema.yml", "unique_id": "test.dbtProject_v2.unique_bto_reportsummaries_reportId.34da42c00b", "fqn": ["dbtProject_v2", "unique_bto_reportsummaries_reportId"], "alias": "unique_bto_reportsummaries_reportId", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1720544238.580942, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [["bto_reportsummaries"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.dbtProject_v2.bto_reportsummaries"]}, "compiled_path": "target\\compiled\\dbtProject_v2\\models\\schema.yml\\unique_bto_reportsummaries_reportId.sql", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    reportId as unique_field,\n    count(*) as n_records\n\nfrom \"Bronze\".\"dbo\".\"bto_reportsummaries\"\nwhere reportId is not null\ngroup by reportId\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "reportId", "file_key_name": "models.bto_reportsummaries"}, "test.dbtProject_v2.not_null_bto_reportsummaries_IMO.1ab8fbadce": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "IMO", "model": "{{ get_where_subquery(ref('bto_reportsummaries')) }}"}, "namespace": null}, "database": "FleetPerformance", "schema": "dbt_test__audit", "name": "not_null_bto_reportsummaries_IMO", "resource_type": "test", "package_name": "dbtProject_v2", "path": "not_null_bto_reportsummaries_IMO.sql", "original_file_path": "models\\schema.yml", "unique_id": "test.dbtProject_v2.not_null_bto_reportsummaries_IMO.1ab8fbadce", "fqn": ["dbtProject_v2", "not_null_bto_reportsummaries_IMO"], "alias": "not_null_bto_reportsummaries_IMO", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1720544238.582942, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [["bto_reportsummaries"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.dbtProject_v2.bto_reportsummaries"]}, "compiled_path": "target\\compiled\\dbtProject_v2\\models\\schema.yml\\not_null_bto_reportsummaries_IMO.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect IMO\nfrom \"Bronze\".\"dbo\".\"bto_reportsummaries\"\nwhere IMO is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "IMO", "file_key_name": "models.bto_reportsummaries"}, "test.dbtProject_v2.not_null_btr_ships_IMO.78f4cb9e48": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "IMO", "model": "{{ get_where_subquery(ref('btr_ships')) }}"}, "namespace": null}, "database": "FleetPerformance", "schema": "dbt_test__audit", "name": "not_null_btr_ships_IMO", "resource_type": "test", "package_name": "dbtProject_v2", "path": "not_null_btr_ships_IMO.sql", "original_file_path": "models\\schema.yml", "unique_id": "test.dbtProject_v2.not_null_btr_ships_IMO.78f4cb9e48", "fqn": ["dbtProject_v2", "not_null_btr_ships_IMO"], "alias": "not_null_btr_ships_IMO", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1720544238.5859451, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [["btr_ships"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.dbtProject_v2.btr_ships"]}, "compiled_path": "target\\compiled\\dbtProject_v2\\models\\schema.yml\\not_null_btr_ships_IMO.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect IMO\nfrom \"Bronze\".\"dbo\".\"btr_ships\"\nwhere IMO is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "IMO", "file_key_name": "models.btr_ships"}, "test.dbtProject_v2.unique_btr_ships_IMO.30bdeb435d": {"test_metadata": {"name": "unique", "kwargs": {"column_name": "IMO", "model": "{{ get_where_subquery(ref('btr_ships')) }}"}, "namespace": null}, "database": "FleetPerformance", "schema": "dbt_test__audit", "name": "unique_btr_ships_IMO", "resource_type": "test", "package_name": "dbtProject_v2", "path": "unique_btr_ships_IMO.sql", "original_file_path": "models\\schema.yml", "unique_id": "test.dbtProject_v2.unique_btr_ships_IMO.30bdeb435d", "fqn": ["dbtProject_v2", "unique_btr_ships_IMO"], "alias": "unique_btr_ships_IMO", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1720544238.5889452, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [["btr_ships"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.dbtProject_v2.btr_ships"]}, "compiled_path": "target\\compiled\\dbtProject_v2\\models\\schema.yml\\unique_btr_ships_IMO.sql", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    IMO as unique_field,\n    count(*) as n_records\n\nfrom \"Bronze\".\"dbo\".\"btr_ships\"\nwhere IMO is not null\ngroup by IMO\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "IMO", "file_key_name": "models.btr_ships"}, "test.dbtProject_v2.missing_imo_lookupships_lookup_ships_.83d8c65d69": {"test_metadata": {"name": "missing_imo_lookupships", "kwargs": {"model": "{{ get_where_subquery(ref('lookup_ships')) }}"}, "namespace": null}, "database": "FleetPerformance", "schema": "dbt_test__audit", "name": "missing_imo_lookupships_lookup_ships_", "resource_type": "test", "package_name": "dbtProject_v2", "path": "missing_imo_lookupships_lookup_ships_.sql", "original_file_path": "models\\schema.yml", "unique_id": "test.dbtProject_v2.missing_imo_lookupships_lookup_ships_.83d8c65d69", "fqn": ["dbtProject_v2", "missing_imo_lookupships_lookup_ships_"], "alias": "missing_imo_lookupships_lookup_ships_", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1720544238.5909405, "relation_name": null, "raw_code": "{{ test_missing_imo_lookupships(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [["lookup_ships"]], "sources": [["corpdata", "DimVesselSS"]], "metrics": [], "depends_on": {"macros": ["macro.dbtProject_v2.test_missing_imo_lookupships", "macro.dbt.get_where_subquery"], "nodes": ["source.dbtProject_v2.corpdata.DimVesselSS", "model.dbtProject_v2.lookup_ships"]}, "compiled_path": "target\\compiled\\dbtProject_v2\\models\\schema.yml\\missing_imo_lookupships_lookup_ships_.sql", "compiled": true, "compiled_code": "\n\n    with a as (\n        select \n            distinct imo \n        from \"CORPDATA\".\"DataWarehouse\".\"dbo\".\"DimVesselSS\"\n\t\twhere IMO != 0 AND IMO NOT IN (1234567, 1005100, 1010715, 1001001, 9999981, 9999980, 9999977, 9999982, 9999978, 9999977, 9999979)\n\t\t)\n, b as (\n        select \n            distinct imo \n        from \"StageData\".\"dbo\".\"lookup_ships\"\n        ) \n    select a.* from a\n    left join b\n    on a.imo = b.imo\n    where b.imo is null\n\n", "extra_ctes_injected": true, "extra_ctes": [], "column_name": null, "file_key_name": "models.lookup_ships"}, "model.dbtProject_v2.bto_ReportSummaries": {"database": "Silver", "schema": "dbo", "name": "bto_ReportSummaries", "resource_type": "model", "package_name": "dbtProject_v2", "path": "silver\\bto_ReportSummaries.sql", "original_file_path": "models\\silver\\bto_ReportSummaries.sql", "unique_id": "model.dbtProject_v2.bto_ReportSummaries", "fqn": ["dbtProject_v2", "silver", "bto_ReportSummaries"], "alias": "bto_ReportSummaries", "checksum": {"name": "sha256", "checksum": "ced4904b4d58818f17e94d5384430035aead1fd4c54309ce8778400391d4bef8"}, "config": {"enabled": true, "alias": null, "schema": "dbo", "database": "Silver", "tags": [], "meta": {}, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {"reportId": {"name": "reportId", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "IMO": {"name": "IMO", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "legeventid": {"name": "legeventid", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "dbtProject_v2://models\\schema.yml", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "schema": "dbo", "database": "Silver"}, "created_at": 1720544425.7475348, "relation_name": "\"Silver\".\"dbo\".\"bto_ReportSummaries\"", "raw_code": "with source as (\r\n    select \r\n        j.imoNumber,\r\n        rs.reportId,\r\n        rs.Load_ID,\r\n        rs.isdeleted,\r\n        j.abHfoFoc,\r\n        j.abHfoHsFoc,\r\n        j.abHfoHsLcv,\r\n        j.abHfoHsSulphurContent,\r\n        j.abHfoLcv,\r\n        j.abHfoLlsFoc,\r\n        j.abHfoLlsLcv,\r\n        j.abHfoLlsSulphurContent,\r\n        j.abHfoLsFoc,\r\n        j.abHfoLsLcv,\r\n        j.abHfoLsSulphurContent,\r\n        j.abHfoSulphurContent,\r\n        j.abLfoFoc,\r\n        j.abLfoLcv,\r\n        j.abLfoSulphurContent,\r\n        j.abMdoFoc,\r\n        j.abMdoHsFoc,\r\n        j.abMdoHsLcv,\r\n        j.abMdoHsSulphurContent,\r\n        j.abMdoLcv,\r\n        j.abMdoLlsFoc,\r\n        j.abMdoLlsLcv,\r\n        j.abMdoLlsSulphurContent,\r\n        j.abMdoLsFoc,\r\n        j.abMdoLsLcv,\r\n        j.abMdoLsSulphurContent,\r\n        j.abMdoSulphurContent,\r\n        j.abMgoFoc,\r\n        j.abMgoLcv,\r\n        j.abMgoLlsFoc,\r\n        j.abMgoLlsLcv,\r\n        j.abMgoLlsSulphurContent,\r\n        j.abMgoLsFoc,\r\n        j.abMgoLsLcv,\r\n        j.abMgoLsSulphurContent,\r\n        j.abMgoSulphurContent,\r\n        j.abMethanolFoc,\r\n        j.abMethanolLcv,\r\n        j.abMethanolSulphurContent,\r\n        j.abLngFoc,\r\n        j.abLngLcv,\r\n        j.abLngSulphurContent,\r\n        j.abBtlFoc,\r\n        j.abBtlLcv,\r\n        j.abBtlSulphurContent,\r\n        j.abFameFoc,\r\n        j.abFameLcv,\r\n        j.abFameSulphurContent,\r\n        j.abHvoFoc,\r\n        j.abHvoLcv,\r\n        j.abHvoSulphurContent,\r\n        j.abBioFuelBlendFoc,\r\n        j.abBioFuelBlendLcv,\r\n        j.abBioFuelBlendSulphurContent,\r\n        j.abAveragePercentageOfBioFuelInBlend,\r\n        j.abMostOccurringBioFuelKindInBlend,\r\n        j.abMostOccurringFossilFuelKindInBlend,\r\n        j.aeHfoFoc,\r\n        j.aeHfoHsFoc,\r\n        j.aeHfoHsLcv,\r\n        j.aeHfoHsSulphurContent,\r\n        j.aeHfoLcv,\r\n        j.aeHfoLlsFoc,\r\n        j.aeHfoLlsLcv,\r\n        j.aeHfoLlsSulphurContent,\r\n        j.aeHfoLsFoc,\r\n        j.aeHfoLsLcv,\r\n        j.aeHfoLsSulphurContent,\r\n        j.aeHfoSulphurContent,\r\n        j.aeLfoFoc,\r\n        j.aeLfoLcv,\r\n        j.aeLfoSulphurContent,\r\n        j.aeMdoFoc,\r\n        j.aeMdoHsFoc,\r\n        j.aeMdoHsLcv,\r\n        j.aeMdoHsSulphurContent,\r\n        j.aeMdoLcv,\r\n        j.aeMdoLlsFoc,\r\n        j.aeMdoLlsLcv,\r\n        j.aeMdoLlsSulphurContent,\r\n        j.aeMdoLsFoc,\r\n        j.aeMdoLsLcv,\r\n        j.aeMdoLsSulphurContent,\r\n        j.aeMdoSulphurContent,\r\n        j.aeMgoFoc,\r\n        j.aeMgoLcv,\r\n        j.aeMgoLlsFoc,\r\n        j.aeMgoLlsLcv,\r\n        j.aeMgoLlsSulphurContent,\r\n        j.aeMgoLsFoc,\r\n        j.aeMgoLsLcv,\r\n        j.aeMgoLsSulphurContent,\r\n        j.aeMgoSulphurContent,\r\n        j.aeMethanolFoc,\r\n        j.aeMethanolLcv,\r\n        j.aeMethanolSulphurContent,\r\n        j.aeLngFoc,\r\n        j.aeLngLcv,\r\n        j.aeLngSulphurContent,\r\n        j.aeBtlFoc,\r\n        j.aeBtlLcv,\r\n        j.aeBtlSulphurContent,\r\n        j.aeFameFoc,\r\n        j.aeFameLcv,\r\n        j.aeFameSulphurContent,\r\n        j.aeHvoFoc,\r\n        j.aeHvoLcv,\r\n        j.aeHvoSulphurContent,\r\n        j.aeBioFuelBlendFoc,\r\n        j.aeBioFuelBlendLcv,\r\n        j.aeBioFuelBlendSulphurContent,\r\n        j.aeAveragePercentageOfBioFuelInBlend,\r\n        j.aeMostOccurringBioFuelKindInBlend,\r\n        j.aeMostOccurringFossilFuelKindInBlend,\r\n        j.aer,\r\n        j.aggregationDetails,\r\n        j.airPress,\r\n        j.airTemp,\r\n        j.averageRelativeAeGeneratorPower,\r\n        j.averageRelativeAePower,\r\n        j.averageRelativeMePower,\r\n        j.averageShaftRpm,\r\n        j.averageSlip,\r\n        j.averageSlipOverGround,\r\n        j.averageSpeedOverGround,\r\n        j.averageSpeedThroughWater,\r\n        j.ballastWeight,\r\n        j.bunkerFreshWaterBunkered,\r\n        j.bunkerFreshWaterProduced,\r\n        j.bunkerFuelButane,\r\n        j.bunkerFuelEthanol,\r\n        j.bunkerFuelHfo,\r\n        j.bunkerFuelHfoHs,\r\n        j.bunkerFuelHfoLls,\r\n        j.bunkerFuelHfoLs,\r\n        j.bunkerFuelLfo,\r\n        j.bunkerFuelLng,\r\n        j.bunkerFuelMdo,\r\n        j.bunkerFuelMethanol,\r\n        j.bunkerFuelFame,\r\n        j.bunkerFuelBtl,\r\n        j.bunkerFuelHvo,\r\n        j.bunkerFuelBioFuelBlend,\r\n        j.bunkerFuelMgo,\r\n        j.bunkerFuelPropane,\r\n        j.bunkerLubOilCirculationAe,\r\n        j.bunkerLubOilCirculationMe,\r\n        j.bunkerLubOilCirculationUndef,\r\n        j.bunkerLubOilCylinder,\r\n        j.bunkerLubOilCylinderHs,\r\n        j.bunkerLubOilCylinderLs,\r\n        j.bunkerLubOilUndef,\r\n        j.captain,\r\n        j.cargoPassengers,\r\n        j.cargoReefers,\r\n        j.calculatedPortReefers,\r\n        j.cargoTeuEmpty,\r\n        j.cargoTeuFull,\r\n        j.cargoVolume,\r\n        j.cargoWeight,\r\n        j.charterSpeedInstruction,\r\n        j.charterSpeedInstructionKnots,\r\n        j.charterVoyageStatus,\r\n        j.chiefEng,\r\n        j.completenessScore,\r\n        j.coolingWaterTemp,\r\n        j.courseMadeGood,\r\n        j.currentFactor,\r\n        j.customId,\r\n        j.dailyAbFoc,\r\n        j.dailyAbFocIso,\r\n        j.dailyAeFoc,\r\n        j.dailyAeFocIso,\r\n        j.dailyMeFoc,\r\n        j.dailyMeFocIso,\r\n        j.dailyTotalFoc,\r\n        j.dailyTotalFocIso,\r\n        j.deliveredPowerCorrected,\r\n        j.displacement,\r\n        j.douglasSeaScale,\r\n        j.draftAft,\r\n        j.draftFwd,\r\n        j.draftMid,\r\n        j.eeoiTeu,\r\n        j.eeoiWeight,\r\n        j.engineDistance,\r\n        j.engineRoomTemp,\r\n        j.estimationScore,\r\n        j.eventCustomId,\r\n        j.eventName,\r\n        j.eventShortName,\r\n        j.eventType,\r\n        j.gainLossFuelButane,\r\n        j.gainLossFuelEthanol,\r\n        j.gainLossFuelHfo,\r\n        j.gainLossFuelHfoHs,\r\n        j.gainLossFuelHfoLls,\r\n        j.gainLossFuelHfoLs,\r\n        j.gainLossFuelLfo,\r\n        j.gainLossFuelLng,\r\n        j.gainLossFuelMdo,\r\n        j.gainLossFuelMethanol,\r\n        j.gainLossFuelBtl,\r\n        j.gainLossFuelFame,\r\n        j.gainLossFuelHvo,\r\n        j.gainLossFuelBioFuelBlend,\r\n        j.gainLossFuelMgo,\r\n        j.gainLossFuelPropane,\r\n        j.gainLossLubOilCirculationAe,\r\n        j.gainLossLubOilCirculationMe,\r\n        j.gainLossLubOilCirculationUndef,\r\n        j.gainLossLubOilCylinder,\r\n        j.gainLossLubOilCylinderHs,\r\n        j.gainLossLubOilCylinderLs,\r\n        j.gainLossLubOilUndef,\r\n        j.heading,\r\n        j.id,\r\n        j.isCombinatorMode,\r\n        j.isOnScrubberMode,\r\n        j.isOnShorePowerSupply,\r\n        j.shoreEnergyReceived,\r\n        j.isSlowSteaming,\r\n        j.isTcCutout,\r\n        j.legEventId,\r\n        j.mastersEta,\r\n        j.meanDraft,\r\n        j.meHfoFoc,\r\n        j.meHfoHsFoc,\r\n        j.meHfoHsLcv,\r\n        j.meHfoHsSulphurContent,\r\n        j.meHfoLcv,\r\n        j.meHfoLlsFoc,\r\n        j.meHfoLlsLcv,\r\n        j.meHfoLlsSulphurContent,\r\n        j.meHfoLsFoc,\r\n        j.meHfoLsLcv,\r\n        j.meHfoLsSulphurContent,\r\n        j.meHfoSulphurContent,\r\n        j.meLfoFoc,\r\n        j.meLfoLcv,\r\n        j.meLfoSulphurContent,\r\n        j.meMdoFoc,\r\n        j.meMdoHsFoc,\r\n        j.meMdoHsLcv,\r\n        j.meMdoHsSulphurContent,\r\n        j.meMdoLcv,\r\n        j.meMdoLlsFoc,\r\n        j.meMdoLlsLcv,\r\n        j.meMdoLlsSulphurContent,\r\n        j.meMdoLsFoc,\r\n        j.meMdoLsLcv,\r\n        j.meMdoLsSulphurContent,\r\n        j.meMdoSulphurContent,\r\n        j.meMgoFoc,\r\n        j.meMgoLcv,\r\n        j.meMgoLlsFoc,\r\n        j.meMgoLlsLcv,\r\n        j.meMgoLlsSulphurContent,\r\n        j.meMgoLsFoc,\r\n        j.meMgoLsLcv,\r\n        j.meMgoLsSulphurContent,\r\n        j.meMgoSulphurContent,\r\n        j.meMethanolFoc,\r\n        j.meMethanolLcv,\r\n        j.meMethanolSulphurContent,\r\n        j.meLngFoc,\r\n        j.meLngLcv,\r\n        j.meLngSulphurContent,\r\n        j.meBtlFoc,\r\n        j.meBtlLcv,\r\n        j.meBtlSulphurContent,\r\n        j.meFameFoc,\r\n        j.meFameLcv,\r\n        j.meFameSulphurContent,\r\n        j.meHvoFoc,\r\n        j.meHvoLcv,\r\n        j.meHvoSulphurContent,\r\n        j.meBioFuelBlendFoc,\r\n        j.meBioFuelBlendLcv,\r\n        j.meBioFuelBlendSulphurContent,\r\n        j.meAveragePercentageOfBioFuelInBlend,\r\n        j.meMostOccurringBioFuelKindInBlend,\r\n        j.meMostOccurringFossilFuelKindInBlend,\r\n        j.noxEmissionsAb,\r\n        j.noxEmissionsAe,\r\n        j.noxEmissionsMe,\r\n        j.period,\r\n        j.plausibilityCountFine,\r\n        j.plausibilityCountMajor,\r\n        j.plausibilityCountMinor,\r\n        j.plausibilityCountNotSet,\r\n        j.plausibilityScore,\r\n        j.posLat,\r\n        j.posLng,\r\n        j.resistanceByWind,\r\n        j.robFreshWaterDistilled,\r\n        j.robFreshWaterDrinking,\r\n        j.robFreshWaterUndef,\r\n        j.robFuelButane,\r\n        j.robFuelEthanol,\r\n        j.robFuelHfo,\r\n        j.robFuelHfoHs,\r\n        j.robFuelHfoLls,\r\n        j.robFuelHfoLs,\r\n        j.robFuelLfo,\r\n        j.robFuelLng,\r\n        j.robFuelMdo,\r\n        j.robFuelMethanol,\r\n        j.robFuelBtl,\r\n        j.robFuelFame,\r\n        j.robFuelHvo,\r\n        j.robFuelBioFuelBlend,\r\n        j.robFuelMgo,\r\n        j.robFuelPropane,\r\n        j.robLubOilCirculationAe,\r\n        j.robLubOilCirculationMe,\r\n        j.robLubOilCirculationUndef,\r\n        j.robLubOilCylinder,\r\n        j.robLubOilCylinderHs,\r\n        j.robLubOilCylinderLs,\r\n        j.robLubOilUndef,\r\n        j.sailedDistanceOverGround,\r\n        j.sailedDistanceThroughWater,\r\n        j.sailingTime,\r\n        j.distanceToGo,\r\n        j.seaState,\r\n        j.seaWaterTemp,\r\n        j.ship_id,\r\n        j.ship_imoNumber,\r\n        j.ship_name,\r\n        j.ship_shortName,\r\n        j.ship_alternativeName,\r\n        j.ship_callSign,\r\n        j.ship_currentVersionStamp,\r\n        j.ship_shipClassId,\r\n        j.ship_shipClassName,\r\n        j.ship_ownerName,\r\n        j.ship_portOfRegistryUnloc,\r\n        j.ship_isHidden,\r\n        j.ship_link,\r\n        j.soxEmissionsAb,\r\n        j.soxEmissionsAe,\r\n        j.soxEmissionsMe,\r\n        j.speedLoss,\r\n        j.speedLossUncorrected,\r\n        j.state,\r\n        j.swellDirection,\r\n        j.swellHeight,\r\n        j.timeStamp,\r\n        j.totalAverageAePower,\r\n        j.totalAverageElectricalPower,\r\n        j.totalAverageMePower,\r\n        j.totalAverageShaftPower,\r\n        j.totalAverageShaftPowerCorrected,\r\n        j.totalBunkerFuelOil,\r\n        j.totalBunkerLubOilCirculation,\r\n        j.totalCirculationLubOilAeConsumption,\r\n        j.totalCirculationLubOilMeConsumption,\r\n        j.totalCo2,\r\n        j.totalCo2Ab,\r\n        j.totalCo2Ae,\r\n        j.totalCo2Igs,\r\n        j.totalCo2Inc,\r\n        j.totalCo2Me,\r\n        j.totalCo2Undef,\r\n        j.totalCylinderHsLubOilConsumption,\r\n        j.totalCylinderLsLubOilConsumption,\r\n        j.totalCylinderOilConsumption,\r\n        j.totalFoc,\r\n        j.totalFocAb,\r\n        j.totalFocAbIso,\r\n        j.totalFocAe,\r\n        j.totalFocAeIso,\r\n        j.totalFocButane,\r\n        j.totalFocEthanol,\r\n        j.totalFocHfo,\r\n        j.totalFocHfoHs,\r\n        j.totalFocHfoLls,\r\n        j.totalFocHfoLs,\r\n        j.totalFocIgs,\r\n        j.totalFocIgsIso,\r\n        j.totalFocInc,\r\n        j.totalFocIncIso,\r\n        j.totalFocIso,\r\n        j.totalFocLfo,\r\n        j.totalFocLng,\r\n        j.totalFocMdo,\r\n        j.totalFocMe,\r\n        j.totalFocMeIso,\r\n        j.totalFocMethanol,\r\n        j.totalFocMgo,\r\n        j.totalFocPropane,\r\n        j.totalFocUndef,\r\n        j.totalFreshWaterConsumptionBoiler,\r\n        j.totalFreshWaterConsumptionDomestic,\r\n        j.totalFreshWaterConsumptionUndef,\r\n        j.totalFreshWaterConsumptionWashing,\r\n        j.totalGainLossFuelOil,\r\n        j.totalGainLossLubOilCirculation,\r\n        j.totalGeneratedAeEnergy,\r\n        j.totalGeneratedElectricalEnergy,\r\n        j.totalGeneratedMeEnergy,\r\n        j.totalGeneratedShaftEnergy,\r\n        j.totalNoxEmissions,\r\n        j.totalOilyWaterDischargeUndef,\r\n        j.totalOilyWaterDischargeViaOdme,\r\n        j.totalOilyWaterDischargeViaOws,\r\n        j.totalRobFreshWater,\r\n        j.totalRobFuelOil,\r\n        j.totalRobLubOilCirculation,\r\n        j.totalRunningHoursMe,\r\n        j.totalScocMe,\r\n        j.totalSfocAe,\r\n        j.totalSfocAeIso,\r\n        j.totalSfocMe,\r\n        j.totalSfocMeIso,\r\n        j.totalSoxEmissions,\r\n        j.totalWasteDisposalCategoryAPlastic,\r\n        j.totalWasteDisposalCategoryBFoodWaste,\r\n        j.totalWasteDisposalCategoryCDomesticWaste,\r\n        j.totalWasteDisposalCategoryDCookingOil,\r\n        j.totalWasteDisposalCategoryEIncineratorAsh,\r\n        j.totalWasteDisposalCategoryFOperationalWaste,\r\n        j.totalWasteDisposalCategoryGAnimalCarcass,\r\n        j.totalWasteDisposalCategoryHFishingGear,\r\n        j.totalWasteDisposalCategoryIElectronicWaste,\r\n        j.totalWasteDisposalCategoryJCargoResidueNonHme,\r\n        j.totalWasteDisposalCategoryKCargoResidueHme,\r\n        j.totalWasteDisposalSludgeAndOilResidue,\r\n        j.totalWasteDisposalUndef,\r\n        j.transportEfficiency,\r\n        j.trim,\r\n        j.versionStamp,\r\n        j.waterDepth,\r\n        j.waterDepthBelowKeel,\r\n        j.waveDirection,\r\n        j.waveDirectionRel,\r\n        j.waveHeight,\r\n        j.windDirRel,\r\n        j.windDirTrue,\r\n        j.windForce,\r\n        j.windSpeedRel,\r\n        j.windSpeedRelKnots,\r\n        j.windSpeedTrue,\r\n        j.windSpeedTrueKnots,\r\n        j.voyageName\r\n    from {{ ref(\"bto_reportsummaries\") }} rs\r\n    CROSS APPLY OPENJSON(json_data)\r\n        with(\r\n            imoNumber nvarchar(max) '$.ship.imoNumber',\r\n            abHfoFoc nvarchar(max) '$.abHfoFoc',\r\n            abHfoHsFoc nvarchar(max) '$.abHfoHsFoc',\r\n            abHfoHsLcv nvarchar(max) '$.abHfoHsLcv',\r\n            abHfoHsSulphurContent nvarchar(max) '$.abHfoHsSulphurContent',\r\n            abHfoLcv nvarchar(max) '$.abHfoLcv',\r\n            abHfoLlsFoc nvarchar(max) '$.abHfoLlsFoc',\r\n            abHfoLlsLcv nvarchar(max) '$.abHfoLlsLcv',\r\n            abHfoLlsSulphurContent nvarchar(max) '$.abHfoLlsSulphurContent',\r\n            abHfoLsFoc nvarchar(max) '$.abHfoLsFoc',\r\n            abHfoLsLcv nvarchar(max) '$.abHfoLsLcv',\r\n            abHfoLsSulphurContent nvarchar(max) '$.abHfoLsSulphurContent',\r\n            abHfoSulphurContent nvarchar(max) '$.abHfoSulphurContent',\r\n            abLfoFoc nvarchar(max) '$.abLfoFoc',\r\n            abLfoLcv nvarchar(max) '$.abLfoLcv',\r\n            abLfoSulphurContent nvarchar(max) '$.abLfoSulphurContent',\r\n            abMdoFoc nvarchar(max) '$.abMdoFoc',\r\n            abMdoHsFoc nvarchar(max) '$.abMdoHsFoc',\r\n            abMdoHsLcv nvarchar(max) '$.abMdoHsLcv',\r\n            abMdoHsSulphurContent nvarchar(max) '$.abMdoHsSulphurContent',\r\n            abMdoLcv nvarchar(max) '$.abMdoLcv',\r\n            abMdoLlsFoc nvarchar(max) '$.abMdoLlsFoc',\r\n            abMdoLlsLcv nvarchar(max) '$.abMdoLlsLcv',\r\n            abMdoLlsSulphurContent nvarchar(max) '$.abMdoLlsSulphurContent',\r\n            abMdoLsFoc nvarchar(max) '$.abMdoLsFoc',\r\n            abMdoLsLcv nvarchar(max) '$.abMdoLsLcv',\r\n            abMdoLsSulphurContent nvarchar(max) '$.abMdoLsSulphurContent',\r\n            abMdoSulphurContent nvarchar(max) '$.abMdoSulphurContent',\r\n            abMgoFoc nvarchar(max) '$.abMgoFoc',\r\n            abMgoLcv nvarchar(max) '$.abMgoLcv',\r\n            abMgoLlsFoc nvarchar(max) '$.abMgoLlsFoc',\r\n            abMgoLlsLcv nvarchar(max) '$.abMgoLlsLcv',\r\n            abMgoLlsSulphurContent nvarchar(max) '$.abMgoLlsSulphurContent',\r\n            abMgoLsFoc nvarchar(max) '$.abMgoLsFoc',\r\n            abMgoLsLcv nvarchar(max) '$.abMgoLsLcv',\r\n            abMgoLsSulphurContent nvarchar(max) '$.abMgoLsSulphurContent',\r\n            abMgoSulphurContent nvarchar(max) '$.abMgoSulphurContent',\r\n            abMethanolFoc nvarchar(max) '$.abMethanolFoc',\r\n            abMethanolLcv nvarchar(max) '$.abMethanolLcv',\r\n            abMethanolSulphurContent nvarchar(max) '$.abMethanolSulphurContent',\r\n            abLngFoc nvarchar(max) '$.abLngFoc',\r\n            abLngLcv nvarchar(max) '$.abLngLcv',\r\n            abLngSulphurContent nvarchar(max) '$.abLngSulphurContent',\r\n            abBtlFoc nvarchar(max) '$.abBtlFoc',\r\n            abBtlLcv nvarchar(max) '$.abBtlLcv',\r\n            abBtlSulphurContent nvarchar(max) '$.abBtlSulphurContent',\r\n            abFameFoc nvarchar(max) '$.abFameFoc',\r\n            abFameLcv nvarchar(max) '$.abFameLcv',\r\n            abFameSulphurContent nvarchar(max) '$.abFameSulphurContent',\r\n            abHvoFoc nvarchar(max) '$.abHvoFoc',\r\n            abHvoLcv nvarchar(max) '$.abHvoLcv',\r\n            abHvoSulphurContent nvarchar(max) '$.abHvoSulphurContent',\r\n            abBioFuelBlendFoc nvarchar(max) '$.abBioFuelBlendFoc',\r\n            abBioFuelBlendLcv nvarchar(max) '$.abBioFuelBlendLcv',\r\n            abBioFuelBlendSulphurContent nvarchar(max) '$.abBioFuelBlendSulphurContent',\r\n            abAveragePercentageOfBioFuelInBlend nvarchar(max) '$.abAveragePercentageOfBioFuelInBlend',\r\n            abMostOccurringBioFuelKindInBlend nvarchar(max) '$.abMostOccurringBioFuelKindInBlend',\r\n            abMostOccurringFossilFuelKindInBlend nvarchar(max) '$.abMostOccurringFossilFuelKindInBlend',\r\n            aeHfoFoc nvarchar(max) '$.aeHfoFoc',\r\n            aeHfoHsFoc nvarchar(max) '$.aeHfoHsFoc',\r\n            aeHfoHsLcv nvarchar(max) '$.aeHfoHsLcv',\r\n            aeHfoHsSulphurContent nvarchar(max) '$.aeHfoHsSulphurContent',\r\n            aeHfoLcv nvarchar(max) '$.aeHfoLcv',\r\n            aeHfoLlsFoc nvarchar(max) '$.aeHfoLlsFoc',\r\n            aeHfoLlsLcv nvarchar(max) '$.aeHfoLlsLcv',\r\n            aeHfoLlsSulphurContent nvarchar(max) '$.aeHfoLlsSulphurContent',\r\n            aeHfoLsFoc nvarchar(max) '$.aeHfoLsFoc',\r\n            aeHfoLsLcv nvarchar(max) '$.aeHfoLsLcv',\r\n            aeHfoLsSulphurContent nvarchar(max) '$.aeHfoLsSulphurContent',\r\n            aeHfoSulphurContent nvarchar(max) '$.aeHfoSulphurContent',\r\n            aeLfoFoc nvarchar(max) '$.aeLfoFoc',\r\n            aeLfoLcv nvarchar(max) '$.aeLfoLcv',\r\n            aeLfoSulphurContent nvarchar(max) '$.aeLfoSulphurContent',\r\n            aeMdoFoc nvarchar(max) '$.aeMdoFoc',\r\n            aeMdoHsFoc nvarchar(max) '$.aeMdoHsFoc',\r\n            aeMdoHsLcv nvarchar(max) '$.aeMdoHsLcv',\r\n            aeMdoHsSulphurContent nvarchar(max) '$.aeMdoHsSulphurContent',\r\n            aeMdoLcv nvarchar(max) '$.aeMdoLcv',\r\n            aeMdoLlsFoc nvarchar(max) '$.aeMdoLlsFoc',\r\n            aeMdoLlsLcv nvarchar(max) '$.aeMdoLlsLcv',\r\n            aeMdoLlsSulphurContent nvarchar(max) '$.aeMdoLlsSulphurContent',\r\n            aeMdoLsFoc nvarchar(max) '$.aeMdoLsFoc',\r\n            aeMdoLsLcv nvarchar(max) '$.aeMdoLsLcv',\r\n            aeMdoLsSulphurContent nvarchar(max) '$.aeMdoLsSulphurContent',\r\n            aeMdoSulphurContent nvarchar(max) '$.aeMdoSulphurContent',\r\n            aeMgoFoc nvarchar(max) '$.aeMgoFoc',\r\n            aeMgoLcv nvarchar(max) '$.aeMgoLcv',\r\n            aeMgoLlsFoc nvarchar(max) '$.aeMgoLlsFoc',\r\n            aeMgoLlsLcv nvarchar(max) '$.aeMgoLlsLcv',\r\n            aeMgoLlsSulphurContent nvarchar(max) '$.aeMgoLlsSulphurContent',\r\n            aeMgoLsFoc nvarchar(max) '$.aeMgoLsFoc',\r\n            aeMgoLsLcv nvarchar(max) '$.aeMgoLsLcv',\r\n            aeMgoLsSulphurContent nvarchar(max) '$.aeMgoLsSulphurContent',\r\n            aeMgoSulphurContent nvarchar(max) '$.aeMgoSulphurContent',\r\n            aeMethanolFoc nvarchar(max) '$.aeMethanolFoc',\r\n            aeMethanolLcv nvarchar(max) '$.aeMethanolLcv',\r\n            aeMethanolSulphurContent nvarchar(max) '$.aeMethanolSulphurContent',\r\n            aeLngFoc nvarchar(max) '$.aeLngFoc',\r\n            aeLngLcv nvarchar(max) '$.aeLngLcv',\r\n            aeLngSulphurContent nvarchar(max) '$.aeLngSulphurContent',\r\n            aeBtlFoc nvarchar(max) '$.aeBtlFoc',\r\n            aeBtlLcv nvarchar(max) '$.aeBtlLcv',\r\n            aeBtlSulphurContent nvarchar(max) '$.aeBtlSulphurContent',\r\n            aeFameFoc nvarchar(max) '$.aeFameFoc',\r\n            aeFameLcv nvarchar(max) '$.aeFameLcv',\r\n            aeFameSulphurContent nvarchar(max) '$.aeFameSulphurContent',\r\n            aeHvoFoc nvarchar(max) '$.aeHvoFoc',\r\n            aeHvoLcv nvarchar(max) '$.aeHvoLcv',\r\n            aeHvoSulphurContent nvarchar(max) '$.aeHvoSulphurContent',\r\n            aeBioFuelBlendFoc nvarchar(max) '$.aeBioFuelBlendFoc',\r\n            aeBioFuelBlendLcv nvarchar(max) '$.aeBioFuelBlendLcv',\r\n            aeBioFuelBlendSulphurContent nvarchar(max) '$.aeBioFuelBlendSulphurContent',\r\n            aeAveragePercentageOfBioFuelInBlend nvarchar(max) '$.aeAveragePercentageOfBioFuelInBlend',\r\n            aeMostOccurringBioFuelKindInBlend nvarchar(max) '$.aeMostOccurringBioFuelKindInBlend',\r\n            aeMostOccurringFossilFuelKindInBlend nvarchar(max) '$.aeMostOccurringFossilFuelKindInBlend',\r\n            aer nvarchar(max) '$.aer',\r\n            aggregationDetails nvarchar(max) '$.aggregationDetails',\r\n            airPress nvarchar(max) '$.airPress',\r\n            airTemp nvarchar(max) '$.airTemp',\r\n            averageRelativeAeGeneratorPower nvarchar(max) '$.averageRelativeAeGeneratorPower',\r\n            averageRelativeAePower nvarchar(max) '$.averageRelativeAePower',\r\n            averageRelativeMePower nvarchar(max) '$.averageRelativeMePower',\r\n            averageShaftRpm nvarchar(max) '$.averageShaftRpm',\r\n            averageSlip nvarchar(max) '$.averageSlip',\r\n            averageSlipOverGround nvarchar(max) '$.averageSlipOverGround',\r\n            averageSpeedOverGround nvarchar(max) '$.averageSpeedOverGround',\r\n            averageSpeedThroughWater nvarchar(max) '$.averageSpeedThroughWater',\r\n            ballastWeight nvarchar(max) '$.ballastWeight',\r\n            bunkerFreshWaterBunkered nvarchar(max) '$.bunkerFreshWaterBunkered',\r\n            bunkerFreshWaterProduced nvarchar(max) '$.bunkerFreshWaterProduced',\r\n            bunkerFuelButane nvarchar(max) '$.bunkerFuelButane',\r\n            bunkerFuelEthanol nvarchar(max) '$.bunkerFuelEthanol',\r\n            bunkerFuelHfo nvarchar(max) '$.bunkerFuelHfo',\r\n            bunkerFuelHfoHs nvarchar(max) '$.bunkerFuelHfoHs',\r\n            bunkerFuelHfoLls nvarchar(max) '$.bunkerFuelHfoLls',\r\n            bunkerFuelHfoLs nvarchar(max) '$.bunkerFuelHfoLs',\r\n            bunkerFuelLfo nvarchar(max) '$.bunkerFuelLfo',\r\n            bunkerFuelLng nvarchar(max) '$.bunkerFuelLng',\r\n            bunkerFuelMdo nvarchar(max) '$.bunkerFuelMdo',\r\n            bunkerFuelMethanol nvarchar(max) '$.bunkerFuelMethanol',\r\n            bunkerFuelFame nvarchar(max) '$.bunkerFuelFame',\r\n            bunkerFuelBtl nvarchar(max) '$.bunkerFuelBtl',\r\n            bunkerFuelHvo nvarchar(max) '$.bunkerFuelHvo',\r\n            bunkerFuelBioFuelBlend nvarchar(max) '$.bunkerFuelBioFuelBlend',\r\n            bunkerFuelMgo nvarchar(max) '$.bunkerFuelMgo',\r\n            bunkerFuelPropane nvarchar(max) '$.bunkerFuelPropane',\r\n            bunkerLubOilCirculationAe nvarchar(max) '$.bunkerLubOilCirculationAe',\r\n            bunkerLubOilCirculationMe nvarchar(max) '$.bunkerLubOilCirculationMe',\r\n            bunkerLubOilCirculationUndef nvarchar(max) '$.bunkerLubOilCirculationUndef',\r\n            bunkerLubOilCylinder nvarchar(max) '$.bunkerLubOilCylinder',\r\n            bunkerLubOilCylinderHs nvarchar(max) '$.bunkerLubOilCylinderHs',\r\n            bunkerLubOilCylinderLs nvarchar(max) '$.bunkerLubOilCylinderLs',\r\n            bunkerLubOilUndef nvarchar(max) '$.bunkerLubOilUndef',\r\n            captain nvarchar(max) '$.captain',\r\n            cargoPassengers nvarchar(max) '$.cargoPassengers',\r\n            cargoReefers nvarchar(max) '$.cargoReefers',\r\n            calculatedPortReefers nvarchar(max) '$.calculatedPortReefers',\r\n            cargoTeuEmpty nvarchar(max) '$.cargoTeuEmpty',\r\n            cargoTeuFull nvarchar(max) '$.cargoTeuFull',\r\n            cargoVolume nvarchar(max) '$.cargoVolume',\r\n            cargoWeight nvarchar(max) '$.cargoWeight',\r\n            charterSpeedInstruction nvarchar(max) '$.charterSpeedInstruction',\r\n            charterSpeedInstructionKnots nvarchar(max) '$.charterSpeedInstructionKnots',\r\n            charterVoyageStatus nvarchar(max) '$.charterVoyageStatus',\r\n            chiefEng nvarchar(max) '$.chiefEng',\r\n            completenessScore nvarchar(max) '$.completenessScore',\r\n            coolingWaterTemp nvarchar(max) '$.coolingWaterTemp',\r\n            courseMadeGood nvarchar(max) '$.courseMadeGood',\r\n            currentFactor nvarchar(max) '$.currentFactor',\r\n            customId nvarchar(max) '$.customId',\r\n            dailyAbFoc nvarchar(max) '$.dailyAbFoc',\r\n            dailyAbFocIso nvarchar(max) '$.dailyAbFocIso',\r\n            dailyAeFoc nvarchar(max) '$.dailyAeFoc',\r\n            dailyAeFocIso nvarchar(max) '$.dailyAeFocIso',\r\n            dailyMeFoc nvarchar(max) '$.dailyMeFoc',\r\n            dailyMeFocIso nvarchar(max) '$.dailyMeFocIso',\r\n            dailyTotalFoc nvarchar(max) '$.dailyTotalFoc',\r\n            dailyTotalFocIso nvarchar(max) '$.dailyTotalFocIso',\r\n            deliveredPowerCorrected nvarchar(max) '$.deliveredPowerCorrected',\r\n            displacement nvarchar(max) '$.displacement',\r\n            douglasSeaScale nvarchar(max) '$.douglasSeaScale',\r\n            draftAft nvarchar(max) '$.draftAft',\r\n            draftFwd nvarchar(max) '$.draftFwd',\r\n            draftMid nvarchar(max) '$.draftMid',\r\n            eeoiTeu nvarchar(max) '$.eeoiTeu',\r\n            eeoiWeight nvarchar(max) '$.eeoiWeight',\r\n            engineDistance nvarchar(max) '$.engineDistance',\r\n            engineRoomTemp nvarchar(max) '$.engineRoomTemp',\r\n            estimationScore nvarchar(max) '$.estimationScore',\r\n            eventCustomId nvarchar(max) '$.eventCustomId',\r\n            eventName nvarchar(max) '$.eventName',\r\n            eventShortName nvarchar(max) '$.eventShortName',\r\n            eventType nvarchar(max) '$.eventType',\r\n            gainLossFuelButane nvarchar(max) '$.gainLossFuelButane',\r\n            gainLossFuelEthanol nvarchar(max) '$.gainLossFuelEthanol',\r\n            gainLossFuelHfo nvarchar(max) '$.gainLossFuelHfo',\r\n            gainLossFuelHfoHs nvarchar(max) '$.gainLossFuelHfoHs',\r\n            gainLossFuelHfoLls nvarchar(max) '$.gainLossFuelHfoLls',\r\n            gainLossFuelHfoLs nvarchar(max) '$.gainLossFuelHfoLs',\r\n            gainLossFuelLfo nvarchar(max) '$.gainLossFuelLfo',\r\n            gainLossFuelLng nvarchar(max) '$.gainLossFuelLng',\r\n            gainLossFuelMdo nvarchar(max) '$.gainLossFuelMdo',\r\n            gainLossFuelMethanol nvarchar(max) '$.gainLossFuelMethanol',\r\n            gainLossFuelBtl nvarchar(max) '$.gainLossFuelBtl',\r\n            gainLossFuelFame nvarchar(max) '$.gainLossFuelFame',\r\n            gainLossFuelHvo nvarchar(max) '$.gainLossFuelHvo',\r\n            gainLossFuelBioFuelBlend nvarchar(max) '$.gainLossFuelBioFuelBlend',\r\n            gainLossFuelMgo nvarchar(max) '$.gainLossFuelMgo',\r\n            gainLossFuelPropane nvarchar(max) '$.gainLossFuelPropane',\r\n            gainLossLubOilCirculationAe nvarchar(max) '$.gainLossLubOilCirculationAe',\r\n            gainLossLubOilCirculationMe nvarchar(max) '$.gainLossLubOilCirculationMe',\r\n            gainLossLubOilCirculationUndef nvarchar(max) '$.gainLossLubOilCirculationUndef',\r\n            gainLossLubOilCylinder nvarchar(max) '$.gainLossLubOilCylinder',\r\n            gainLossLubOilCylinderHs nvarchar(max) '$.gainLossLubOilCylinderHs',\r\n            gainLossLubOilCylinderLs nvarchar(max) '$.gainLossLubOilCylinderLs',\r\n            gainLossLubOilUndef nvarchar(max) '$.gainLossLubOilUndef',\r\n            heading nvarchar(max) '$.heading',\r\n            id nvarchar(max) '$.id',\r\n            isCombinatorMode nvarchar(max) '$.isCombinatorMode',\r\n            isOnScrubberMode nvarchar(max) '$.isOnScrubberMode',\r\n            isOnShorePowerSupply nvarchar(max) '$.isOnShorePowerSupply',\r\n            shoreEnergyReceived nvarchar(max) '$.shoreEnergyReceived',\r\n            isSlowSteaming nvarchar(max) '$.isSlowSteaming',\r\n            isTcCutout nvarchar(max) '$.isTcCutout',\r\n            legEventId nvarchar(max) '$.legEventId',\r\n            mastersEta nvarchar(max) '$.mastersEta',\r\n            meanDraft nvarchar(max) '$.meanDraft',\r\n            meHfoFoc nvarchar(max) '$.meHfoFoc',\r\n            meHfoHsFoc nvarchar(max) '$.meHfoHsFoc',\r\n            meHfoHsLcv nvarchar(max) '$.meHfoHsLcv',\r\n            meHfoHsSulphurContent nvarchar(max) '$.meHfoHsSulphurContent',\r\n            meHfoLcv nvarchar(max) '$.meHfoLcv',\r\n            meHfoLlsFoc nvarchar(max) '$.meHfoLlsFoc',\r\n            meHfoLlsLcv nvarchar(max) '$.meHfoLlsLcv',\r\n            meHfoLlsSulphurContent nvarchar(max) '$.meHfoLlsSulphurContent',\r\n            meHfoLsFoc nvarchar(max) '$.meHfoLsFoc',\r\n            meHfoLsLcv nvarchar(max) '$.meHfoLsLcv',\r\n            meHfoLsSulphurContent nvarchar(max) '$.meHfoLsSulphurContent',\r\n            meHfoSulphurContent nvarchar(max) '$.meHfoSulphurContent',\r\n            meLfoFoc nvarchar(max) '$.meLfoFoc',\r\n            meLfoLcv nvarchar(max) '$.meLfoLcv',\r\n            meLfoSulphurContent nvarchar(max) '$.meLfoSulphurContent',\r\n            meMdoFoc nvarchar(max) '$.meMdoFoc',\r\n            meMdoHsFoc nvarchar(max) '$.meMdoHsFoc',\r\n            meMdoHsLcv nvarchar(max) '$.meMdoHsLcv',\r\n            meMdoHsSulphurContent nvarchar(max) '$.meMdoHsSulphurContent',\r\n            meMdoLcv nvarchar(max) '$.meMdoLcv',\r\n            meMdoLlsFoc nvarchar(max) '$.meMdoLlsFoc',\r\n            meMdoLlsLcv nvarchar(max) '$.meMdoLlsLcv',\r\n            meMdoLlsSulphurContent nvarchar(max) '$.meMdoLlsSulphurContent',\r\n            meMdoLsFoc nvarchar(max) '$.meMdoLsFoc',\r\n            meMdoLsLcv nvarchar(max) '$.meMdoLsLcv',\r\n            meMdoLsSulphurContent nvarchar(max) '$.meMdoLsSulphurContent',\r\n            meMdoSulphurContent nvarchar(max) '$.meMdoSulphurContent',\r\n            meMgoFoc nvarchar(max) '$.meMgoFoc',\r\n            meMgoLcv nvarchar(max) '$.meMgoLcv',\r\n            meMgoLlsFoc nvarchar(max) '$.meMgoLlsFoc',\r\n            meMgoLlsLcv nvarchar(max) '$.meMgoLlsLcv',\r\n            meMgoLlsSulphurContent nvarchar(max) '$.meMgoLlsSulphurContent',\r\n            meMgoLsFoc nvarchar(max) '$.meMgoLsFoc',\r\n            meMgoLsLcv nvarchar(max) '$.meMgoLsLcv',\r\n            meMgoLsSulphurContent nvarchar(max) '$.meMgoLsSulphurContent',\r\n            meMgoSulphurContent nvarchar(max) '$.meMgoSulphurContent',\r\n            meMethanolFoc nvarchar(max) '$.meMethanolFoc',\r\n            meMethanolLcv nvarchar(max) '$.meMethanolLcv',\r\n            meMethanolSulphurContent nvarchar(max) '$.meMethanolSulphurContent',\r\n            meLngFoc nvarchar(max) '$.meLngFoc',\r\n            meLngLcv nvarchar(max) '$.meLngLcv',\r\n            meLngSulphurContent nvarchar(max) '$.meLngSulphurContent',\r\n            meBtlFoc nvarchar(max) '$.meBtlFoc',\r\n            meBtlLcv nvarchar(max) '$.meBtlLcv',\r\n            meBtlSulphurContent nvarchar(max) '$.meBtlSulphurContent',\r\n            meFameFoc nvarchar(max) '$.meFameFoc',\r\n            meFameLcv nvarchar(max) '$.meFameLcv',\r\n            meFameSulphurContent nvarchar(max) '$.meFameSulphurContent',\r\n            meHvoFoc nvarchar(max) '$.meHvoFoc',\r\n            meHvoLcv nvarchar(max) '$.meHvoLcv',\r\n            meHvoSulphurContent nvarchar(max) '$.meHvoSulphurContent',\r\n            meBioFuelBlendFoc nvarchar(max) '$.meBioFuelBlendFoc',\r\n            meBioFuelBlendLcv nvarchar(max) '$.meBioFuelBlendLcv',\r\n            meBioFuelBlendSulphurContent nvarchar(max) '$.meBioFuelBlendSulphurContent',\r\n            meAveragePercentageOfBioFuelInBlend nvarchar(max) '$.meAveragePercentageOfBioFuelInBlend',\r\n            meMostOccurringBioFuelKindInBlend nvarchar(max) '$.meMostOccurringBioFuelKindInBlend',\r\n            meMostOccurringFossilFuelKindInBlend nvarchar(max) '$.meMostOccurringFossilFuelKindInBlend',\r\n            noxEmissionsAb nvarchar(max) '$.noxEmissionsAb',\r\n            noxEmissionsAe nvarchar(max) '$.noxEmissionsAe',\r\n            noxEmissionsMe nvarchar(max) '$.noxEmissionsMe',\r\n            period nvarchar(max) '$.period',\r\n            plausibilityCountFine nvarchar(max) '$.plausibilityCountFine',\r\n            plausibilityCountMajor nvarchar(max) '$.plausibilityCountMajor',\r\n            plausibilityCountMinor nvarchar(max) '$.plausibilityCountMinor',\r\n            plausibilityCountNotSet nvarchar(max) '$.plausibilityCountNotSet',\r\n            plausibilityScore nvarchar(max) '$.plausibilityScore',\r\n            posLat nvarchar(max) '$.posLat',\r\n            posLng nvarchar(max) '$.posLng',\r\n            resistanceByWind nvarchar(max) '$.resistanceByWind',\r\n            robFreshWaterDistilled nvarchar(max) '$.robFreshWaterDistilled',\r\n            robFreshWaterDrinking nvarchar(max) '$.robFreshWaterDrinking',\r\n            robFreshWaterUndef nvarchar(max) '$.robFreshWaterUndef',\r\n            robFuelButane nvarchar(max) '$.robFuelButane',\r\n            robFuelEthanol nvarchar(max) '$.robFuelEthanol',\r\n            robFuelHfo nvarchar(max) '$.robFuelHfo',\r\n            robFuelHfoHs nvarchar(max) '$.robFuelHfoHs',\r\n            robFuelHfoLls nvarchar(max) '$.robFuelHfoLls',\r\n            robFuelHfoLs nvarchar(max) '$.robFuelHfoLs',\r\n            robFuelLfo nvarchar(max) '$.robFuelLfo',\r\n            robFuelLng nvarchar(max) '$.robFuelLng',\r\n            robFuelMdo nvarchar(max) '$.robFuelMdo',\r\n            robFuelMethanol nvarchar(max) '$.robFuelMethanol',\r\n            robFuelBtl nvarchar(max) '$.robFuelBtl',\r\n            robFuelFame nvarchar(max) '$.robFuelFame',\r\n            robFuelHvo nvarchar(max) '$.robFuelHvo',\r\n            robFuelBioFuelBlend nvarchar(max) '$.robFuelBioFuelBlend',\r\n            robFuelMgo nvarchar(max) '$.robFuelMgo',\r\n            robFuelPropane nvarchar(max) '$.robFuelPropane',\r\n            robLubOilCirculationAe nvarchar(max) '$.robLubOilCirculationAe',\r\n            robLubOilCirculationMe nvarchar(max) '$.robLubOilCirculationMe',\r\n            robLubOilCirculationUndef nvarchar(max) '$.robLubOilCirculationUndef',\r\n            robLubOilCylinder nvarchar(max) '$.robLubOilCylinder',\r\n            robLubOilCylinderHs nvarchar(max) '$.robLubOilCylinderHs',\r\n            robLubOilCylinderLs nvarchar(max) '$.robLubOilCylinderLs',\r\n            robLubOilUndef nvarchar(max) '$.robLubOilUndef',\r\n            sailedDistanceOverGround nvarchar(max) '$.sailedDistanceOverGround',\r\n            sailedDistanceThroughWater nvarchar(max) '$.sailedDistanceThroughWater',\r\n            sailingTime nvarchar(max) '$.sailingTime',\r\n            distanceToGo nvarchar(max) '$.distanceToGo',\r\n            seaState nvarchar(max) '$.seaState',\r\n            seaWaterTemp nvarchar(max) '$.seaWaterTemp',\r\n            ship_id nvarchar(max) '$.ship.id',\r\n            ship_imoNumber nvarchar(max) '$.ship.imoNumber',\r\n            ship_name nvarchar(max) '$.ship.name',\r\n            ship_shortName nvarchar(max) '$.ship.shortName',\r\n            ship_alternativeName nvarchar(max) '$.ship.alternativeName',\r\n            ship_callSign nvarchar(max) '$.ship.callSign',\r\n            ship_currentVersionStamp nvarchar(max) '$.ship.currentVersionStamp',\r\n            ship_shipClassId nvarchar(max) '$.ship.shipClassId',\r\n            ship_shipClassName nvarchar(max) '$.ship.shipClassName',\r\n            ship_ownerName nvarchar(max) '$.ship.ownerName',\r\n            ship_portOfRegistryUnloc nvarchar(max) '$.ship.portOfRegistryUnloc',\r\n            ship_isHidden nvarchar(max) '$.ship.isHidden',\r\n            ship_link nvarchar(max) '$.ship.link',\r\n            soxEmissionsAb nvarchar(max) '$.soxEmissionsAb',\r\n            soxEmissionsAe nvarchar(max) '$.soxEmissionsAe',\r\n            soxEmissionsMe nvarchar(max) '$.soxEmissionsMe',\r\n            speedLoss nvarchar(max) '$.speedLoss',\r\n            speedLossUncorrected nvarchar(max) '$.speedLossUncorrected',\r\n            state nvarchar(max) '$.state',\r\n            swellDirection nvarchar(max) '$.swellDirection',\r\n            swellHeight nvarchar(max) '$.swellHeight',\r\n            timeStamp nvarchar(max) '$.timeStamp',\r\n            totalAverageAePower nvarchar(max) '$.totalAverageAePower',\r\n            totalAverageElectricalPower nvarchar(max) '$.totalAverageElectricalPower',\r\n            totalAverageMePower nvarchar(max) '$.totalAverageMePower',\r\n            totalAverageShaftPower nvarchar(max) '$.totalAverageShaftPower',\r\n            totalAverageShaftPowerCorrected nvarchar(max) '$.totalAverageShaftPowerCorrected',\r\n            totalBunkerFuelOil nvarchar(max) '$.totalBunkerFuelOil',\r\n            totalBunkerLubOilCirculation nvarchar(max) '$.totalBunkerLubOilCirculation',\r\n            totalCirculationLubOilAeConsumption nvarchar(max) '$.totalCirculationLubOilAeConsumption',\r\n            totalCirculationLubOilMeConsumption nvarchar(max) '$.totalCirculationLubOilMeConsumption',\r\n            totalCo2 nvarchar(max) '$.totalCo2',\r\n            totalCo2Ab nvarchar(max) '$.totalCo2Ab',\r\n            totalCo2Ae nvarchar(max) '$.totalCo2Ae',\r\n            totalCo2Igs nvarchar(max) '$.totalCo2Igs',\r\n            totalCo2Inc nvarchar(max) '$.totalCo2Inc',\r\n            totalCo2Me nvarchar(max) '$.totalCo2Me',\r\n            totalCo2Undef nvarchar(max) '$.totalCo2Undef',\r\n            totalCylinderHsLubOilConsumption nvarchar(max) '$.totalCylinderHsLubOilConsumption',\r\n            totalCylinderLsLubOilConsumption nvarchar(max) '$.totalCylinderLsLubOilConsumption',\r\n            totalCylinderOilConsumption nvarchar(max) '$.totalCylinderOilConsumption',\r\n            totalFoc nvarchar(max) '$.totalFoc',\r\n            totalFocAb nvarchar(max) '$.totalFocAb',\r\n            totalFocAbIso nvarchar(max) '$.totalFocAbIso',\r\n            totalFocAe nvarchar(max) '$.totalFocAe',\r\n            totalFocAeIso nvarchar(max) '$.totalFocAeIso',\r\n            totalFocButane nvarchar(max) '$.totalFocButane',\r\n            totalFocEthanol nvarchar(max) '$.totalFocEthanol',\r\n            totalFocHfo nvarchar(max) '$.totalFocHfo',\r\n            totalFocHfoHs nvarchar(max) '$.totalFocHfoHs',\r\n            totalFocHfoLls nvarchar(max) '$.totalFocHfoLls',\r\n            totalFocHfoLs nvarchar(max) '$.totalFocHfoLs',\r\n            totalFocIgs nvarchar(max) '$.totalFocIgs',\r\n            totalFocIgsIso nvarchar(max) '$.totalFocIgsIso',\r\n            totalFocInc nvarchar(max) '$.totalFocInc',\r\n            totalFocIncIso nvarchar(max) '$.totalFocIncIso',\r\n            totalFocIso nvarchar(max) '$.totalFocIso',\r\n            totalFocLfo nvarchar(max) '$.totalFocLfo',\r\n            totalFocLng nvarchar(max) '$.totalFocLng',\r\n            totalFocMdo nvarchar(max) '$.totalFocMdo',\r\n            totalFocMe nvarchar(max) '$.totalFocMe',\r\n            totalFocMeIso nvarchar(max) '$.totalFocMeIso',\r\n            totalFocMethanol nvarchar(max) '$.totalFocMethanol',\r\n            totalFocMgo nvarchar(max) '$.totalFocMgo',\r\n            totalFocPropane nvarchar(max) '$.totalFocPropane',\r\n            totalFocUndef nvarchar(max) '$.totalFocUndef',\r\n            totalFreshWaterConsumptionBoiler nvarchar(max) '$.totalFreshWaterConsumptionBoiler',\r\n            totalFreshWaterConsumptionDomestic nvarchar(max) '$.totalFreshWaterConsumptionDomestic',\r\n            totalFreshWaterConsumptionUndef nvarchar(max) '$.totalFreshWaterConsumptionUndef',\r\n            totalFreshWaterConsumptionWashing nvarchar(max) '$.totalFreshWaterConsumptionWashing',\r\n            totalGainLossFuelOil nvarchar(max) '$.totalGainLossFuelOil',\r\n            totalGainLossLubOilCirculation nvarchar(max) '$.totalGainLossLubOilCirculation',\r\n            totalGeneratedAeEnergy nvarchar(max) '$.totalGeneratedAeEnergy',\r\n            totalGeneratedElectricalEnergy nvarchar(max) '$.totalGeneratedElectricalEnergy',\r\n            totalGeneratedMeEnergy nvarchar(max) '$.totalGeneratedMeEnergy',\r\n            totalGeneratedShaftEnergy nvarchar(max) '$.totalGeneratedShaftEnergy',\r\n            totalNoxEmissions nvarchar(max) '$.totalNoxEmissions',\r\n            totalOilyWaterDischargeUndef nvarchar(max) '$.totalOilyWaterDischargeUndef',\r\n            totalOilyWaterDischargeViaOdme nvarchar(max) '$.totalOilyWaterDischargeViaOdme',\r\n            totalOilyWaterDischargeViaOws nvarchar(max) '$.totalOilyWaterDischargeViaOws',\r\n            totalRobFreshWater nvarchar(max) '$.totalRobFreshWater',\r\n            totalRobFuelOil nvarchar(max) '$.totalRobFuelOil',\r\n            totalRobLubOilCirculation nvarchar(max) '$.totalRobLubOilCirculation',\r\n            totalRunningHoursMe nvarchar(max) '$.totalRunningHoursMe',\r\n            totalScocMe nvarchar(max) '$.totalScocMe',\r\n            totalSfocAe nvarchar(max) '$.totalSfocAe',\r\n            totalSfocAeIso nvarchar(max) '$.totalSfocAeIso',\r\n            totalSfocMe nvarchar(max) '$.totalSfocMe',\r\n            totalSfocMeIso nvarchar(max) '$.totalSfocMeIso',\r\n            totalSoxEmissions nvarchar(max) '$.totalSoxEmissions',\r\n            totalWasteDisposalCategoryAPlastic nvarchar(max) '$.totalWasteDisposalCategoryAPlastic',\r\n            totalWasteDisposalCategoryBFoodWaste nvarchar(max) '$.totalWasteDisposalCategoryBFoodWaste',\r\n            totalWasteDisposalCategoryCDomesticWaste nvarchar(max) '$.totalWasteDisposalCategoryCDomesticWaste',\r\n            totalWasteDisposalCategoryDCookingOil nvarchar(max) '$.totalWasteDisposalCategoryDCookingOil',\r\n            totalWasteDisposalCategoryEIncineratorAsh nvarchar(max) '$.totalWasteDisposalCategoryEIncineratorAsh',\r\n            totalWasteDisposalCategoryFOperationalWaste nvarchar(max) '$.totalWasteDisposalCategoryFOperationalWaste',\r\n            totalWasteDisposalCategoryGAnimalCarcass nvarchar(max) '$.totalWasteDisposalCategoryGAnimalCarcass',\r\n            totalWasteDisposalCategoryHFishingGear nvarchar(max) '$.totalWasteDisposalCategoryHFishingGear',\r\n            totalWasteDisposalCategoryIElectronicWaste nvarchar(max) '$.totalWasteDisposalCategoryIElectronicWaste',\r\n            totalWasteDisposalCategoryJCargoResidueNonHme nvarchar(max) '$.totalWasteDisposalCategoryJCargoResidueNonHme',\r\n            totalWasteDisposalCategoryKCargoResidueHme nvarchar(max) '$.totalWasteDisposalCategoryKCargoResidueHme',\r\n            totalWasteDisposalSludgeAndOilResidue nvarchar(max) '$.totalWasteDisposalSludgeAndOilResidue',\r\n            totalWasteDisposalUndef nvarchar(max) '$.totalWasteDisposalUndef',\r\n            transportEfficiency nvarchar(max) '$.transportEfficiency',\r\n            trim nvarchar(max) '$.trim',\r\n            versionStamp nvarchar(max) '$.versionStamp',\r\n            waterDepth nvarchar(max) '$.waterDepth',\r\n            waterDepthBelowKeel nvarchar(max) '$.waterDepthBelowKeel',\r\n            waveDirection nvarchar(max) '$.waveDirection',\r\n            waveDirectionRel nvarchar(max) '$.waveDirectionRel',\r\n            waveHeight nvarchar(max) '$.waveHeight',\r\n            windDirRel nvarchar(max) '$.windDirRel',\r\n            windDirTrue nvarchar(max) '$.windDirTrue',\r\n            windForce nvarchar(max) '$.windForce',\r\n            windSpeedRel nvarchar(max) '$.windSpeedRel',\r\n            windSpeedRelKnots nvarchar(max) '$.windSpeedRelKnots',\r\n            windSpeedTrue nvarchar(max) '$.windSpeedTrue',\r\n            windSpeedTrueKnots nvarchar(max) '$.windSpeedTrueKnots',\r\n            voyageName nvarchar(max) '$.voyageName'\r\n        ) j\r\n        where IMO not in (1234567, 1005100, 1010715, 1001001)\r\n),\r\ncte as (\r\n\t SELECT \r\n            \r\n        cast(imoNumber as integer) as imo\r\n        ,cast(reportId as integer) reportId\r\n        ,CAST(CASE\r\n            WHEN timestamp LIKE '%+%' THEN LEFT(timestamp, CHARINDEX('+', timestamp, 10) - 1)\r\n            WHEN timestamp LIKE '%-%' THEN LEFT(timestamp, CHARINDEX('-', timestamp, 10) - 1)\r\n            ELSE timestamp\r\n        END AS DATETIME ) AS localTime,\r\n\r\n        CAST(CONVERT(datetimeoffset, timestamp) AT TIME ZONE 'utc' AS DATETIME ) AS timestamputc\r\n        ,cast(timeStamp as datetimeoffset) as timeStamp\r\n        ,cast(mastersEta as datetimeoffset) as mastersEta\r\n        ,cast(abHfoFoc as float) as abHfoFoc\r\n        ,cast(abHfoHsFoc as float) as abHfoHsFoc \r\n        ,cast(abHfoHsLcv as float) as abHfoHsLcv \r\n        ,cast(abHfoHsSulphurContent as float) as abHfoHsSulphurContent \r\n        ,cast(abHfoLcv as float) as abHfoLcv \r\n        ,cast(abHfoLlsFoc as float) as abHfoLlsFoc \r\n        ,cast(abHfoLlsLcv as float) as abHfoLlsLcv \r\n        ,cast(abHfoLlsSulphurContent as float) as abHfoLlsSulphurContent \r\n        ,cast(abHfoLsFoc as float) as abHfoLsFoc \r\n        ,cast(abHfoLsLcv as float) as abHfoLsLcv \r\n        ,cast(abHfoLsSulphurContent as float) as abHfoLsSulphurContent \r\n        ,cast(abHfoSulphurContent as float) as abHfoSulphurContent \r\n        ,cast(abLfoFoc as float) as abLfoFoc \r\n        ,cast(abLfoLcv as float) as abLfoLcv \r\n        ,cast(abLfoSulphurContent as float) as abLfoSulphurContent \r\n        ,cast(abMdoFoc as float) as abMdoFoc \r\n        ,cast(abMdoHsFoc as float) as abMdoHsFoc \r\n        ,cast(abMdoHsLcv as float) as abMdoHsLcv \r\n        ,cast(abMdoHsSulphurContent as float) as abMdoHsSulphurContent \r\n        ,cast(abMdoLcv as float) as abMdoLcv \r\n        ,cast(abMdoLlsFoc as float) as abMdoLlsFoc \r\n        ,cast(abMdoLlsLcv as float) as abMdoLlsLcv \r\n        ,cast(abMdoLlsSulphurContent as float) as abMdoLlsSulphurContent \r\n        ,cast(abMdoLsFoc as float) as abMdoLsFoc \r\n        ,cast(abMdoLsLcv as float) as abMdoLsLcv \r\n        ,cast(abMdoLsSulphurContent as float) as abMdoLsSulphurContent \r\n        ,cast(abMdoSulphurContent as float) as abMdoSulphurContent \r\n        ,cast(abMgoFoc as float) as abMgoFoc \r\n        ,cast(abMgoLcv as float) as abMgoLcv \r\n        ,cast(abMgoLlsFoc as float) as abMgoLlsFoc \r\n        ,cast(abMgoLlsLcv as float) as abMgoLlsLcv \r\n        ,cast(abMgoLlsSulphurContent as float) as abMgoLlsSulphurContent \r\n        ,cast(abMgoLsFoc as float) as abMgoLsFoc \r\n        ,cast(abMgoLsLcv as float) as abMgoLsLcv \r\n        ,cast(abMgoLsSulphurContent as float) as abMgoLsSulphurContent \r\n        ,cast(abMgoSulphurContent as float) as abMgoSulphurContent \r\n        ,cast(abMethanolFoc as float) as abMethanolFoc \r\n        ,cast(abMethanolLcv as float) as abMethanolLcv \r\n        ,cast(abMethanolSulphurContent as float) as abMethanolSulphurContent \r\n        ,cast(abLngFoc as float) as abLngFoc \r\n        ,cast(abLngLcv as float) as abLngLcv \r\n        ,cast(abLngSulphurContent as float) as abLngSulphurContent \r\n        ,cast(abBtlFoc as float) as abBtlFoc \r\n        ,cast(abBtlLcv as float) as abBtlLcv \r\n        ,cast(abBtlSulphurContent as float) as abBtlSulphurContent \r\n        ,cast(abFameFoc as float) as abFameFoc \r\n        ,cast(abFameLcv as float) as abFameLcv \r\n        ,cast(abFameSulphurContent as float) as abFameSulphurContent \r\n        ,cast(abHvoFoc as float) as abHvoFoc \r\n        ,cast(abHvoLcv as float) as abHvoLcv \r\n        ,cast(abHvoSulphurContent as float) as abHvoSulphurContent \r\n        ,cast(abBioFuelBlendFoc as float) as abBioFuelBlendFoc \r\n        ,cast(abBioFuelBlendLcv as float) as abBioFuelBlendLcv \r\n        ,cast(abBioFuelBlendSulphurContent as float) as abBioFuelBlendSulphurContent \r\n        ,cast(abAveragePercentageOfBioFuelInBlend as float) as abAveragePercentageOfBioFuelInBlend \r\n        ,cast(abMostOccurringBioFuelKindInBlend as varchar(max)) as abMostOccurringBioFuelKindInBlend \r\n        ,cast(abMostOccurringFossilFuelKindInBlend as varchar(max)) as abMostOccurringFossilFuelKindInBlend \r\n        ,cast(aeHfoFoc as float) as aeHfoFoc \r\n        ,cast(aeHfoHsFoc as float) as aeHfoHsFoc \r\n        ,cast(aeHfoHsLcv as float) as aeHfoHsLcv \r\n        ,cast(aeHfoHsSulphurContent as float) as aeHfoHsSulphurContent \r\n        ,cast(aeHfoLcv as float) as aeHfoLcv \r\n        ,cast(aeHfoLlsFoc as float) as aeHfoLlsFoc \r\n        ,cast(aeHfoLlsLcv as float) as aeHfoLlsLcv \r\n        ,cast(aeHfoLlsSulphurContent as float) as aeHfoLlsSulphurContent \r\n        ,cast(aeHfoLsFoc as float) as aeHfoLsFoc \r\n        ,cast(aeHfoLsLcv as float) as aeHfoLsLcv \r\n        ,cast(aeHfoLsSulphurContent as float) as aeHfoLsSulphurContent \r\n        ,cast(aeHfoSulphurContent as float) as aeHfoSulphurContent \r\n        ,cast(aeLfoFoc as float) as aeLfoFoc \r\n        ,cast(aeLfoLcv as float) as aeLfoLcv \r\n        ,cast(aeLfoSulphurContent as float) as aeLfoSulphurContent \r\n        ,cast(aeMdoFoc as float) as aeMdoFoc \r\n        ,cast(aeMdoHsFoc as float) as aeMdoHsFoc \r\n        ,cast(aeMdoHsLcv as float) as aeMdoHsLcv \r\n        ,cast(aeMdoHsSulphurContent as float) as aeMdoHsSulphurContent \r\n        ,cast(aeMdoLcv as float) as aeMdoLcv \r\n        ,cast(aeMdoLlsFoc as float) as aeMdoLlsFoc \r\n        ,cast(aeMdoLlsLcv as float) as aeMdoLlsLcv \r\n        ,cast(aeMdoLlsSulphurContent as float) as aeMdoLlsSulphurContent \r\n        ,cast(aeMdoLsFoc as float) as aeMdoLsFoc \r\n        ,cast(aeMdoLsLcv as float) as aeMdoLsLcv \r\n        ,cast(aeMdoLsSulphurContent as float) as aeMdoLsSulphurContent \r\n        ,cast(aeMdoSulphurContent as float) as aeMdoSulphurContent \r\n        ,cast(aeMgoFoc as float) as aeMgoFoc \r\n        ,cast(aeMgoLcv as float) as aeMgoLcv \r\n        ,cast(aeMgoLlsFoc as float) as aeMgoLlsFoc \r\n        ,cast(aeMgoLlsLcv as float) as aeMgoLlsLcv \r\n        ,cast(aeMgoLlsSulphurContent as float) as aeMgoLlsSulphurContent \r\n        ,cast(aeMgoLsFoc as float) as aeMgoLsFoc \r\n        ,cast(aeMgoLsLcv as float) as aeMgoLsLcv \r\n        ,cast(aeMgoLsSulphurContent as float) as aeMgoLsSulphurContent \r\n        ,cast(aeMgoSulphurContent as float) as aeMgoSulphurContent \r\n        ,cast(aeMethanolFoc as float) as aeMethanolFoc \r\n        ,cast(aeMethanolLcv as float) as aeMethanolLcv \r\n        ,cast(aeMethanolSulphurContent as float) as aeMethanolSulphurContent \r\n        ,cast(aeLngFoc as float) as aeLngFoc \r\n        ,cast(aeLngLcv as float) as aeLngLcv \r\n        ,cast(aeLngSulphurContent as float) as aeLngSulphurContent \r\n        ,cast(aeBtlFoc as float) as aeBtlFoc \r\n        ,cast(aeBtlLcv as float) as aeBtlLcv \r\n        ,cast(aeBtlSulphurContent as float) as aeBtlSulphurContent \r\n        ,cast(aeFameFoc as float) as aeFameFoc \r\n        ,cast(aeFameLcv as float) as aeFameLcv \r\n        ,cast(aeFameSulphurContent as float) as aeFameSulphurContent \r\n        ,cast(aeHvoFoc as float) as aeHvoFoc \r\n        ,cast(aeHvoLcv as float) as aeHvoLcv \r\n        ,cast(aeHvoSulphurContent as float) as aeHvoSulphurContent \r\n        ,cast(aeBioFuelBlendFoc as float) as aeBioFuelBlendFoc \r\n        ,cast(aeBioFuelBlendLcv as float) as aeBioFuelBlendLcv \r\n        ,cast(aeBioFuelBlendSulphurContent as float) as aeBioFuelBlendSulphurContent \r\n        ,cast(aeAveragePercentageOfBioFuelInBlend as float) as aeAveragePercentageOfBioFuelInBlend \r\n        ,cast(aeMostOccurringBioFuelKindInBlend as varchar(max)) as aeMostOccurringBioFuelKindInBlend \r\n        ,cast(aeMostOccurringFossilFuelKindInBlend as varchar(max)) as aeMostOccurringFossilFuelKindInBlend \r\n        ,cast(aer as float) as aer \r\n        ,cast(airPress as float) as airPress \r\n        ,cast(airTemp as float) as airTemp \r\n        ,cast(averageRelativeAeGeneratorPower as float) as averageRelativeAeGeneratorPower \r\n        ,cast(averageRelativeAePower as float) as averageRelativeAePower \r\n        ,cast(averageRelativeMePower as float) as averageRelativeMePower \r\n        ,cast(averageShaftRpm as float) as averageShaftRpm \r\n        ,cast(averageSlip as float) as averageSlip \r\n        ,cast(averageSlipOverGround as float) as averageSlipOverGround \r\n        ,cast(averageSpeedOverGround as float) as averageSpeedOverGround \r\n        ,cast(averageSpeedThroughWater as float) as averageSpeedThroughWater \r\n        ,cast(ballastWeight as float) as ballastWeight \r\n        ,cast(bunkerFreshWaterBunkered as float) as bunkerFreshWaterBunkered \r\n        ,cast(bunkerFreshWaterProduced as float) as bunkerFreshWaterProduced \r\n        ,cast(bunkerFuelButane as float) as bunkerFuelButane \r\n        ,cast(bunkerFuelEthanol as float) as bunkerFuelEthanol \r\n        ,cast(bunkerFuelHfo as float) as bunkerFuelHfo \r\n        ,cast(bunkerFuelHfoHs as float) as bunkerFuelHfoHs \r\n        ,cast(bunkerFuelHfoLls as float) as bunkerFuelHfoLls \r\n        ,cast(bunkerFuelHfoLs as float) as bunkerFuelHfoLs \r\n        ,cast(bunkerFuelLfo as float) as bunkerFuelLfo \r\n        ,cast(bunkerFuelLng as float) as bunkerFuelLng \r\n        ,cast(bunkerFuelMdo as float) as bunkerFuelMdo \r\n        ,cast(bunkerFuelMethanol as float) as bunkerFuelMethanol \r\n        ,cast(bunkerFuelFame as float) as bunkerFuelFame \r\n        ,cast(bunkerFuelBtl as float) as bunkerFuelBtl \r\n        ,cast(bunkerFuelHvo as float) as bunkerFuelHvo \r\n        ,cast(bunkerFuelBioFuelBlend as float) as bunkerFuelBioFuelBlend \r\n        ,cast(bunkerFuelMgo as float) as bunkerFuelMgo \r\n        ,cast(bunkerFuelPropane as float) as bunkerFuelPropane \r\n        ,cast(bunkerLubOilCirculationAe as float) as bunkerLubOilCirculationAe \r\n        ,cast(bunkerLubOilCirculationMe as float) as bunkerLubOilCirculationMe \r\n        ,cast(bunkerLubOilCirculationUndef as float) as bunkerLubOilCirculationUndef \r\n        ,cast(bunkerLubOilCylinder as float) as bunkerLubOilCylinder \r\n        ,cast(bunkerLubOilCylinderHs as float) as bunkerLubOilCylinderHs \r\n        ,cast(bunkerLubOilCylinderLs as float) as bunkerLubOilCylinderLs \r\n        ,cast(bunkerLubOilUndef as float) as bunkerLubOilUndef \r\n        ,cast(captain as varchar(max)) as captain \r\n        ,cast(cargoPassengers as float) as cargoPassengers \r\n        ,cast(cargoReefers as integer) as cargoReefers \r\n        ,cast(calculatedPortReefers as float) as calculatedPortReefers \r\n        ,cast(cargoTeuEmpty as float) as cargoTeuEmpty \r\n        ,cast(cargoTeuFull as float) as cargoTeuFull \r\n        ,cast(cargoVolume as float) as cargoVolume \r\n        ,cast(cargoWeight as float) as cargoWeight \r\n        ,cast(charterSpeedInstruction as varchar(max)) as charterSpeedInstruction \r\n        ,cast(charterSpeedInstructionKnots as float) as charterSpeedInstructionKnots \r\n        ,cast(charterVoyageStatus as varchar(max)) as charterVoyageStatus \r\n        ,cast(chiefEng as varchar(max)) as chiefEng \r\n        ,cast(completenessScore as float) as completenessScore \r\n        ,cast(coolingWaterTemp as float) as coolingWaterTemp \r\n        ,cast(courseMadeGood as float) as courseMadeGood \r\n        ,cast(currentFactor as float) as currentFactor \r\n        ,cast(customId as varchar(max)) as customId \r\n        ,cast(dailyAbFoc as float) as dailyAbFoc \r\n        ,cast(dailyAbFocIso as float) as dailyAbFocIso \r\n        ,cast(dailyAeFoc as float) as dailyAeFoc \r\n        ,cast(dailyAeFocIso as float) as dailyAeFocIso \r\n        ,cast(dailyMeFoc as float) as dailyMeFoc \r\n        ,cast(dailyMeFocIso as float) as dailyMeFocIso \r\n        ,cast(dailyTotalFoc as float) as dailyTotalFoc \r\n        ,cast(dailyTotalFocIso as float) as dailyTotalFocIso \r\n        ,cast(deliveredPowerCorrected as float) as deliveredPowerCorrected \r\n        ,cast(displacement as float) as displacement \r\n        ,cast(douglasSeaScale as integer) as douglasSeaScale \r\n        ,cast(draftAft as float) as draftAft \r\n        ,cast(draftFwd as float) as draftFwd \r\n        ,cast(draftMid as float) as draftMid \r\n        ,cast(eeoiTeu as float) as eeoiTeu \r\n        ,cast(eeoiWeight as float) as eeoiWeight \r\n        ,cast(engineDistance as float) as engineDistance \r\n        ,cast(engineRoomTemp as float) as engineRoomTemp \r\n        ,cast(estimationScore as float) as estimationScore \r\n        ,cast(eventCustomId as varchar(max)) as eventCustomId \r\n        ,cast(eventName as varchar(max)) as eventName \r\n        ,cast(eventShortName as varchar(max)) as eventShortName \r\n        ,cast(eventType as varchar(max)) as eventType \r\n        ,cast(gainLossFuelButane as float) as gainLossFuelButane \r\n        ,cast(gainLossFuelEthanol as float) as gainLossFuelEthanol \r\n        ,cast(gainLossFuelHfo as float) as gainLossFuelHfo \r\n        ,cast(gainLossFuelHfoHs as float) as gainLossFuelHfoHs \r\n        ,cast(gainLossFuelHfoLls as float) as gainLossFuelHfoLls \r\n        ,cast(gainLossFuelHfoLs as float) as gainLossFuelHfoLs \r\n        ,cast(gainLossFuelLfo as float) as gainLossFuelLfo \r\n        ,cast(gainLossFuelLng as float) as gainLossFuelLng \r\n        ,cast(gainLossFuelMdo as float) as gainLossFuelMdo \r\n        ,cast(gainLossFuelMethanol as float) as gainLossFuelMethanol \r\n        ,cast(gainLossFuelBtl as float) as gainLossFuelBtl \r\n        ,cast(gainLossFuelFame as float) as gainLossFuelFame \r\n        ,cast(gainLossFuelHvo as float) as gainLossFuelHvo \r\n        ,cast(gainLossFuelBioFuelBlend as float) as gainLossFuelBioFuelBlend \r\n        ,cast(gainLossFuelMgo as float) as gainLossFuelMgo \r\n        ,cast(gainLossFuelPropane as float) as gainLossFuelPropane \r\n        ,cast(gainLossLubOilCirculationAe as float) as gainLossLubOilCirculationAe \r\n        ,cast(gainLossLubOilCirculationMe as float) as gainLossLubOilCirculationMe \r\n        ,cast(gainLossLubOilCirculationUndef as float) as gainLossLubOilCirculationUndef \r\n        ,cast(gainLossLubOilCylinder as float) as gainLossLubOilCylinder \r\n        ,cast(gainLossLubOilCylinderHs as float) as gainLossLubOilCylinderHs \r\n        ,cast(gainLossLubOilCylinderLs as float) as gainLossLubOilCylinderLs \r\n        ,cast(gainLossLubOilUndef as float) as gainLossLubOilUndef \r\n        ,cast(heading as float) as heading \r\n        ,cast(id as integer) as id \r\n        ,cast(isCombinatorMode as bit) as isCombinatorMode \r\n        ,cast(isOnScrubberMode as bit) as isOnScrubberMode \r\n        ,cast(isOnShorePowerSupply as bit) as isOnShorePowerSupply \r\n        ,cast(shoreEnergyReceived as float) as shoreEnergyReceived \r\n        ,cast(isSlowSteaming as bit) as isSlowSteaming \r\n        ,cast(isTcCutout as bit) as isTcCutout \r\n        ,cast(legEventId as integer) as legEventId \r\n        ,cast(meanDraft as float) as meanDraft \r\n        ,cast(meHfoFoc as float) as meHfoFoc \r\n        ,cast(meHfoHsFoc as float) as meHfoHsFoc \r\n        ,cast(meHfoHsLcv as float) as meHfoHsLcv \r\n        ,cast(meHfoHsSulphurContent as float) as meHfoHsSulphurContent \r\n        ,cast(meHfoLcv as float) as meHfoLcv \r\n        ,cast(meHfoLlsFoc as float) as meHfoLlsFoc \r\n        ,cast(meHfoLlsLcv as float) as meHfoLlsLcv \r\n        ,cast(meHfoLlsSulphurContent as float) as meHfoLlsSulphurContent \r\n        ,cast(meHfoLsFoc as float) as meHfoLsFoc \r\n        ,cast(meHfoLsLcv as float) as meHfoLsLcv \r\n        ,cast(meHfoLsSulphurContent as float) as meHfoLsSulphurContent \r\n        ,cast(meHfoSulphurContent as float) as meHfoSulphurContent \r\n        ,cast(meLfoFoc as float) as meLfoFoc \r\n        ,cast(meLfoLcv as float) as meLfoLcv \r\n        ,cast(meLfoSulphurContent as float) as meLfoSulphurContent \r\n        ,cast(meMdoFoc as float) as meMdoFoc \r\n        ,cast(meMdoHsFoc as float) as meMdoHsFoc \r\n        ,cast(meMdoHsLcv as float) as meMdoHsLcv \r\n        ,cast(meMdoHsSulphurContent as float) as meMdoHsSulphurContent \r\n        ,cast(meMdoLcv as float) as meMdoLcv \r\n        ,cast(meMdoLlsFoc as float) as meMdoLlsFoc \r\n        ,cast(meMdoLlsLcv as float) as meMdoLlsLcv \r\n        ,cast(meMdoLlsSulphurContent as float) as meMdoLlsSulphurContent \r\n        ,cast(meMdoLsFoc as float) as meMdoLsFoc \r\n        ,cast(meMdoLsLcv as float) as meMdoLsLcv \r\n        ,cast(meMdoLsSulphurContent as float) as meMdoLsSulphurContent \r\n        ,cast(meMdoSulphurContent as float) as meMdoSulphurContent \r\n        ,cast(meMgoFoc as float) as meMgoFoc \r\n        ,cast(meMgoLcv as float) as meMgoLcv \r\n        ,cast(meMgoLlsFoc as float) as meMgoLlsFoc \r\n        ,cast(meMgoLlsLcv as float) as meMgoLlsLcv \r\n        ,cast(meMgoLlsSulphurContent as float) as meMgoLlsSulphurContent \r\n        ,cast(meMgoLsFoc as float) as meMgoLsFoc \r\n        ,cast(meMgoLsLcv as float) as meMgoLsLcv \r\n        ,cast(meMgoLsSulphurContent as float) as meMgoLsSulphurContent \r\n        ,cast(meMgoSulphurContent as float) as meMgoSulphurContent \r\n        ,cast(meMethanolFoc as float) as meMethanolFoc \r\n        ,cast(meMethanolLcv as float) as meMethanolLcv \r\n        ,cast(meMethanolSulphurContent as float) as meMethanolSulphurContent \r\n        ,cast(meLngFoc as float) as meLngFoc \r\n        ,cast(meLngLcv as float) as meLngLcv \r\n        ,cast(meLngSulphurContent as float) as meLngSulphurContent \r\n        ,cast(meBtlFoc as float) as meBtlFoc \r\n        ,cast(meBtlLcv as float) as meBtlLcv \r\n        ,cast(meBtlSulphurContent as float) as meBtlSulphurContent \r\n        ,cast(meFameFoc as float) as meFameFoc \r\n        ,cast(meFameLcv as float) as meFameLcv \r\n        ,cast(meFameSulphurContent as float) as meFameSulphurContent \r\n        ,cast(meHvoFoc as float) as meHvoFoc \r\n        ,cast(meHvoLcv as float) as meHvoLcv \r\n        ,cast(meHvoSulphurContent as float) as meHvoSulphurContent \r\n        ,cast(meBioFuelBlendFoc as float) as meBioFuelBlendFoc \r\n        ,cast(meBioFuelBlendLcv as float) as meBioFuelBlendLcv \r\n        ,cast(meBioFuelBlendSulphurContent as float) as meBioFuelBlendSulphurContent \r\n        ,cast(meAveragePercentageOfBioFuelInBlend as float) as meAveragePercentageOfBioFuelInBlend \r\n        ,cast(meMostOccurringBioFuelKindInBlend as varchar(max)) as meMostOccurringBioFuelKindInBlend \r\n        ,cast(meMostOccurringFossilFuelKindInBlend as varchar(max)) as meMostOccurringFossilFuelKindInBlend \r\n        ,cast(noxEmissionsAb as float) as noxEmissionsAb \r\n        ,cast(noxEmissionsAe as float) as noxEmissionsAe \r\n        ,cast(noxEmissionsMe as float) as noxEmissionsMe \r\n        ,cast(period as float) as period \r\n        ,cast(plausibilityCountFine as integer) as plausibilityCountFine \r\n        ,cast(plausibilityCountMajor as integer) as plausibilityCountMajor \r\n        ,cast(plausibilityCountMinor as integer) as plausibilityCountMinor \r\n        ,cast(plausibilityCountNotSet as integer) as plausibilityCountNotSet \r\n        ,cast(plausibilityScore as float) as plausibilityScore \r\n        ,cast(posLat as float) as posLat \r\n        ,cast(posLng as float) as posLng \r\n        ,cast(resistanceByWind as float) as resistanceByWind \r\n        ,cast(robFreshWaterDistilled as float) as robFreshWaterDistilled \r\n        ,cast(robFreshWaterDrinking as float) as robFreshWaterDrinking \r\n        ,cast(robFreshWaterUndef as float) as robFreshWaterUndef \r\n        ,cast(robFuelButane as float) as robFuelButane \r\n        ,cast(robFuelEthanol as float) as robFuelEthanol \r\n        ,cast(robFuelHfo as float) as robFuelHfo \r\n        ,cast(robFuelHfoHs as float) as robFuelHfoHs \r\n        ,cast(robFuelHfoLls as float) as robFuelHfoLls \r\n        ,cast(robFuelHfoLs as float) as robFuelHfoLs \r\n        ,cast(robFuelLfo as float) as robFuelLfo \r\n        ,cast(robFuelLng as float) as robFuelLng \r\n        ,cast(robFuelMdo as float) as robFuelMdo \r\n        ,cast(robFuelMethanol as float) as robFuelMethanol \r\n        ,cast(robFuelBtl as float) as robFuelBtl \r\n        ,cast(robFuelFame as float) as robFuelFame \r\n        ,cast(robFuelHvo as float) as robFuelHvo \r\n        ,cast(robFuelBioFuelBlend as float) as robFuelBioFuelBlend \r\n        ,cast(robFuelMgo as float) as robFuelMgo \r\n        ,cast(robFuelPropane as float) as robFuelPropane \r\n        ,cast(robLubOilCirculationAe as float) as robLubOilCirculationAe \r\n        ,cast(robLubOilCirculationMe as float) as robLubOilCirculationMe \r\n        ,cast(robLubOilCirculationUndef as float) as robLubOilCirculationUndef \r\n        ,cast(robLubOilCylinder as float) as robLubOilCylinder \r\n        ,cast(robLubOilCylinderHs as float) as robLubOilCylinderHs \r\n        ,cast(robLubOilCylinderLs as float) as robLubOilCylinderLs \r\n        ,cast(robLubOilUndef as float) as robLubOilUndef \r\n        ,cast(sailedDistanceOverGround as float) as sailedDistanceOverGround \r\n        ,cast(sailedDistanceThroughWater as float) as sailedDistanceThroughWater \r\n        ,cast(sailingTime as float) as sailingTime \r\n        ,cast(distanceToGo as float) as distanceToGo \r\n        ,cast(seaState as integer) as seaState \r\n        ,cast(seaWaterTemp as float) as seaWaterTemp \r\n        ,cast(ship_id as integer) as ship_id \r\n        ,cast(ship_imoNumber as integer) as ship_imoNumber \r\n        ,cast(ship_name as varchar(max)) as ship_name \r\n        ,cast(ship_shortName as varchar(max)) as ship_shortName \r\n        ,cast(ship_alternativeName as varchar(max)) as ship_alternativeName \r\n        ,cast(ship_callSign as varchar(max)) as ship_callSign \r\n        ,cast(ship_currentVersionStamp as integer) as ship_currentVersionStamp \r\n        ,cast(ship_shipClassId as integer) as ship_shipClassId \r\n        ,cast(ship_shipClassName as varchar(max)) as ship_shipClassName \r\n        ,cast(ship_ownerName as varchar(max)) as ship_ownerName \r\n        ,cast(ship_portOfRegistryUnloc as varchar(max)) as ship_portOfRegistryUnloc \r\n        ,cast(ship_isHidden as bit) as ship_isHidden \r\n        ,cast(ship_link as varchar(max)) as ship_link \r\n        ,cast(soxEmissionsAb as float) as soxEmissionsAb \r\n        ,cast(soxEmissionsAe as float) as soxEmissionsAe \r\n        ,cast(soxEmissionsMe as float) as soxEmissionsMe \r\n        ,cast(speedLoss as float) as speedLoss \r\n        ,cast(speedLossUncorrected as float) as speedLossUncorrected \r\n        ,cast(state as varchar(max)) as state \r\n        ,cast(swellDirection as float) as swellDirection \r\n        ,cast(swellHeight as float) as swellHeight \r\n        ,cast(totalAverageAePower as float) as totalAverageAePower \r\n        ,cast(totalAverageElectricalPower as float) as totalAverageElectricalPower \r\n        ,cast(totalAverageMePower as float) as totalAverageMePower \r\n        ,cast(totalAverageShaftPower as float) as totalAverageShaftPower \r\n        ,cast(totalAverageShaftPowerCorrected as float) as totalAverageShaftPowerCorrected \r\n        ,cast(totalBunkerFuelOil as float) as totalBunkerFuelOil \r\n        ,cast(totalBunkerLubOilCirculation as float) as totalBunkerLubOilCirculation \r\n        ,cast(totalCirculationLubOilAeConsumption as float) as totalCirculationLubOilAeConsumption \r\n        ,cast(totalCirculationLubOilMeConsumption as float) as totalCirculationLubOilMeConsumption \r\n        ,cast(totalCo2 as float) as totalCo2 \r\n        ,cast(totalCo2Ab as float) as totalCo2Ab \r\n        ,cast(totalCo2Ae as float) as totalCo2Ae \r\n        ,cast(totalCo2Igs as float) as totalCo2Igs \r\n        ,cast(totalCo2Inc as float) as totalCo2Inc \r\n        ,cast(totalCo2Me as float) as totalCo2Me \r\n        ,cast(totalCo2Undef as float) as totalCo2Undef \r\n        ,cast(totalCylinderHsLubOilConsumption as float) as totalCylinderHsLubOilConsumption \r\n        ,cast(totalCylinderLsLubOilConsumption as float) as totalCylinderLsLubOilConsumption \r\n        ,cast(totalCylinderOilConsumption as float) as totalCylinderOilConsumption \r\n        ,cast(totalFoc as float) as totalFoc \r\n        ,cast(totalFocAb as float) as totalFocAb \r\n        ,cast(totalFocAbIso as float) as totalFocAbIso \r\n        ,cast(totalFocAe as float) as totalFocAe \r\n        ,cast(totalFocAeIso as float) as totalFocAeIso \r\n        ,cast(totalFocButane as float) as totalFocButane \r\n        ,cast(totalFocEthanol as float) as totalFocEthanol \r\n        ,cast(totalFocHfo as float) as totalFocHfo \r\n        ,cast(totalFocHfoHs as float) as totalFocHfoHs \r\n        ,cast(totalFocHfoLls as float) as totalFocHfoLls \r\n        ,cast(totalFocHfoLs as float) as totalFocHfoLs \r\n        ,cast(totalFocIgs as float) as totalFocIgs \r\n        ,cast(totalFocIgsIso as float) as totalFocIgsIso \r\n        ,cast(totalFocInc as float) as totalFocInc \r\n        ,cast(totalFocIncIso as float) as totalFocIncIso \r\n        ,cast(totalFocIso as float) as totalFocIso \r\n        ,cast(totalFocLfo as float) as totalFocLfo \r\n        ,cast(totalFocLng as float) as totalFocLng \r\n        ,cast(totalFocMdo as float) as totalFocMdo \r\n        ,cast(totalFocMe as float) as totalFocMe \r\n        ,cast(totalFocMeIso as float) as totalFocMeIso \r\n        ,cast(totalFocMethanol as float) as totalFocMethanol \r\n        ,cast(totalFocMgo as float) as totalFocMgo \r\n        ,cast(totalFocPropane as float) as totalFocPropane \r\n        ,cast(totalFocUndef as float) as totalFocUndef \r\n        ,cast(totalFreshWaterConsumptionBoiler as float) as totalFreshWaterConsumptionBoiler \r\n        ,cast(totalFreshWaterConsumptionDomestic as float) as totalFreshWaterConsumptionDomestic \r\n        ,cast(totalFreshWaterConsumptionUndef as float) as totalFreshWaterConsumptionUndef \r\n        ,cast(totalFreshWaterConsumptionWashing as float) as totalFreshWaterConsumptionWashing \r\n        ,cast(totalGainLossFuelOil as float) as totalGainLossFuelOil \r\n        ,cast(totalGainLossLubOilCirculation as float) as totalGainLossLubOilCirculation \r\n        ,cast(totalGeneratedAeEnergy as float) as totalGeneratedAeEnergy \r\n        ,cast(totalGeneratedElectricalEnergy as float) as totalGeneratedElectricalEnergy \r\n        ,cast(totalGeneratedMeEnergy as float) as totalGeneratedMeEnergy \r\n        ,cast(totalGeneratedShaftEnergy as float) as totalGeneratedShaftEnergy \r\n        ,cast(totalNoxEmissions as float) as totalNoxEmissions \r\n        ,cast(totalOilyWaterDischargeUndef as float) as totalOilyWaterDischargeUndef \r\n        ,cast(totalOilyWaterDischargeViaOdme as float) as totalOilyWaterDischargeViaOdme \r\n        ,cast(totalOilyWaterDischargeViaOws as float) as totalOilyWaterDischargeViaOws \r\n        ,cast(totalRobFreshWater as float) as totalRobFreshWater \r\n        ,cast(totalRobFuelOil as float) as totalRobFuelOil \r\n        ,cast(totalRobLubOilCirculation as float) as totalRobLubOilCirculation \r\n        ,cast(totalRunningHoursMe as float) as totalRunningHoursMe \r\n        ,cast(totalScocMe as float) as totalScocMe \r\n        ,cast(totalSfocAe as float) as totalSfocAe \r\n        ,cast(totalSfocAeIso as float) as totalSfocAeIso \r\n        ,cast(totalSfocMe as float) as totalSfocMe \r\n        ,cast(totalSfocMeIso as float) as totalSfocMeIso \r\n        ,cast(totalSoxEmissions as float) as totalSoxEmissions \r\n        ,cast(totalWasteDisposalCategoryAPlastic as float) as totalWasteDisposalCategoryAPlastic \r\n        ,cast(totalWasteDisposalCategoryBFoodWaste as float) as totalWasteDisposalCategoryBFoodWaste \r\n        ,cast(totalWasteDisposalCategoryCDomesticWaste as float) as totalWasteDisposalCategoryCDomesticWaste \r\n        ,cast(totalWasteDisposalCategoryDCookingOil as float) as totalWasteDisposalCategoryDCookingOil \r\n        ,cast(totalWasteDisposalCategoryEIncineratorAsh as float) as totalWasteDisposalCategoryEIncineratorAsh \r\n        ,cast(totalWasteDisposalCategoryFOperationalWaste as float) as totalWasteDisposalCategoryFOperationalWaste \r\n        ,cast(totalWasteDisposalCategoryGAnimalCarcass as float) as totalWasteDisposalCategoryGAnimalCarcass \r\n        ,cast(totalWasteDisposalCategoryHFishingGear as float) as totalWasteDisposalCategoryHFishingGear \r\n        ,cast(totalWasteDisposalCategoryIElectronicWaste as float) as totalWasteDisposalCategoryIElectronicWaste \r\n        ,cast(totalWasteDisposalCategoryJCargoResidueNonHme as float) as totalWasteDisposalCategoryJCargoResidueNonHme \r\n        ,cast(totalWasteDisposalCategoryKCargoResidueHme as float) as totalWasteDisposalCategoryKCargoResidueHme \r\n        ,cast(totalWasteDisposalSludgeAndOilResidue as float) as totalWasteDisposalSludgeAndOilResidue \r\n        ,cast(totalWasteDisposalUndef as float) as totalWasteDisposalUndef \r\n        ,cast(transportEfficiency as float) as transportEfficiency \r\n        ,cast(trim as float) as trim \r\n        ,cast(versionStamp as integer) as versionStamp \r\n        ,cast(waterDepth as float) as waterDepth \r\n        ,cast(waterDepthBelowKeel as float) as waterDepthBelowKeel \r\n        ,cast(waveDirection as float) as waveDirection \r\n        ,cast(waveDirectionRel as float) as waveDirectionRel \r\n        ,cast(waveHeight as float) as waveHeight \r\n        ,cast(windDirRel as float) as windDirRel \r\n        ,cast(windDirTrue as float) as windDirTrue \r\n        ,cast(windForce as int) as windForce \r\n        ,cast(windSpeedRel as float) as windSpeedRel \r\n        ,cast(windSpeedRelKnots as float) as windSpeedRelKnots \r\n        ,cast(windSpeedTrue as float) as windSpeedTrue \r\n        ,cast(windSpeedTrueKnots as float) as windSpeedTrueKnots \r\n        ,cast(voyageName as varchar(max)) as voyageName\r\n        ,getdate() as LoadDateTime\r\n        ,LOAD_ID\r\n        ,isDeleted\r\n    from source  rs\r\n)\r\nselect * from cte", "language": "sql", "refs": [["bto_reportsummaries"]], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.dbtProject_v2.bto_reportsummaries"]}, "compiled_path": "target\\compiled\\dbtProject_v2\\models\\silver\\bto_ReportSummaries.sql", "compiled": true, "compiled_code": "with source as (\n    select \n        j.imoNumber,\n        rs.reportId,\n        rs.Load_ID,\n        rs.isdeleted,\n        j.abHfoFoc,\n        j.abHfoHsFoc,\n        j.abHfoHsLcv,\n        j.abHfoHsSulphurContent,\n        j.abHfoLcv,\n        j.abHfoLlsFoc,\n        j.abHfoLlsLcv,\n        j.abHfoLlsSulphurContent,\n        j.abHfoLsFoc,\n        j.abHfoLsLcv,\n        j.abHfoLsSulphurContent,\n        j.abHfoSulphurContent,\n        j.abLfoFoc,\n        j.abLfoLcv,\n        j.abLfoSulphurContent,\n        j.abMdoFoc,\n        j.abMdoHsFoc,\n        j.abMdoHsLcv,\n        j.abMdoHsSulphurContent,\n        j.abMdoLcv,\n        j.abMdoLlsFoc,\n        j.abMdoLlsLcv,\n        j.abMdoLlsSulphurContent,\n        j.abMdoLsFoc,\n        j.abMdoLsLcv,\n        j.abMdoLsSulphurContent,\n        j.abMdoSulphurContent,\n        j.abMgoFoc,\n        j.abMgoLcv,\n        j.abMgoLlsFoc,\n        j.abMgoLlsLcv,\n        j.abMgoLlsSulphurContent,\n        j.abMgoLsFoc,\n        j.abMgoLsLcv,\n        j.abMgoLsSulphurContent,\n        j.abMgoSulphurContent,\n        j.abMethanolFoc,\n        j.abMethanolLcv,\n        j.abMethanolSulphurContent,\n        j.abLngFoc,\n        j.abLngLcv,\n        j.abLngSulphurContent,\n        j.abBtlFoc,\n        j.abBtlLcv,\n        j.abBtlSulphurContent,\n        j.abFameFoc,\n        j.abFameLcv,\n        j.abFameSulphurContent,\n        j.abHvoFoc,\n        j.abHvoLcv,\n        j.abHvoSulphurContent,\n        j.abBioFuelBlendFoc,\n        j.abBioFuelBlendLcv,\n        j.abBioFuelBlendSulphurContent,\n        j.abAveragePercentageOfBioFuelInBlend,\n        j.abMostOccurringBioFuelKindInBlend,\n        j.abMostOccurringFossilFuelKindInBlend,\n        j.aeHfoFoc,\n        j.aeHfoHsFoc,\n        j.aeHfoHsLcv,\n        j.aeHfoHsSulphurContent,\n        j.aeHfoLcv,\n        j.aeHfoLlsFoc,\n        j.aeHfoLlsLcv,\n        j.aeHfoLlsSulphurContent,\n        j.aeHfoLsFoc,\n        j.aeHfoLsLcv,\n        j.aeHfoLsSulphurContent,\n        j.aeHfoSulphurContent,\n        j.aeLfoFoc,\n        j.aeLfoLcv,\n        j.aeLfoSulphurContent,\n        j.aeMdoFoc,\n        j.aeMdoHsFoc,\n        j.aeMdoHsLcv,\n        j.aeMdoHsSulphurContent,\n        j.aeMdoLcv,\n        j.aeMdoLlsFoc,\n        j.aeMdoLlsLcv,\n        j.aeMdoLlsSulphurContent,\n        j.aeMdoLsFoc,\n        j.aeMdoLsLcv,\n        j.aeMdoLsSulphurContent,\n        j.aeMdoSulphurContent,\n        j.aeMgoFoc,\n        j.aeMgoLcv,\n        j.aeMgoLlsFoc,\n        j.aeMgoLlsLcv,\n        j.aeMgoLlsSulphurContent,\n        j.aeMgoLsFoc,\n        j.aeMgoLsLcv,\n        j.aeMgoLsSulphurContent,\n        j.aeMgoSulphurContent,\n        j.aeMethanolFoc,\n        j.aeMethanolLcv,\n        j.aeMethanolSulphurContent,\n        j.aeLngFoc,\n        j.aeLngLcv,\n        j.aeLngSulphurContent,\n        j.aeBtlFoc,\n        j.aeBtlLcv,\n        j.aeBtlSulphurContent,\n        j.aeFameFoc,\n        j.aeFameLcv,\n        j.aeFameSulphurContent,\n        j.aeHvoFoc,\n        j.aeHvoLcv,\n        j.aeHvoSulphurContent,\n        j.aeBioFuelBlendFoc,\n        j.aeBioFuelBlendLcv,\n        j.aeBioFuelBlendSulphurContent,\n        j.aeAveragePercentageOfBioFuelInBlend,\n        j.aeMostOccurringBioFuelKindInBlend,\n        j.aeMostOccurringFossilFuelKindInBlend,\n        j.aer,\n        j.aggregationDetails,\n        j.airPress,\n        j.airTemp,\n        j.averageRelativeAeGeneratorPower,\n        j.averageRelativeAePower,\n        j.averageRelativeMePower,\n        j.averageShaftRpm,\n        j.averageSlip,\n        j.averageSlipOverGround,\n        j.averageSpeedOverGround,\n        j.averageSpeedThroughWater,\n        j.ballastWeight,\n        j.bunkerFreshWaterBunkered,\n        j.bunkerFreshWaterProduced,\n        j.bunkerFuelButane,\n        j.bunkerFuelEthanol,\n        j.bunkerFuelHfo,\n        j.bunkerFuelHfoHs,\n        j.bunkerFuelHfoLls,\n        j.bunkerFuelHfoLs,\n        j.bunkerFuelLfo,\n        j.bunkerFuelLng,\n        j.bunkerFuelMdo,\n        j.bunkerFuelMethanol,\n        j.bunkerFuelFame,\n        j.bunkerFuelBtl,\n        j.bunkerFuelHvo,\n        j.bunkerFuelBioFuelBlend,\n        j.bunkerFuelMgo,\n        j.bunkerFuelPropane,\n        j.bunkerLubOilCirculationAe,\n        j.bunkerLubOilCirculationMe,\n        j.bunkerLubOilCirculationUndef,\n        j.bunkerLubOilCylinder,\n        j.bunkerLubOilCylinderHs,\n        j.bunkerLubOilCylinderLs,\n        j.bunkerLubOilUndef,\n        j.captain,\n        j.cargoPassengers,\n        j.cargoReefers,\n        j.calculatedPortReefers,\n        j.cargoTeuEmpty,\n        j.cargoTeuFull,\n        j.cargoVolume,\n        j.cargoWeight,\n        j.charterSpeedInstruction,\n        j.charterSpeedInstructionKnots,\n        j.charterVoyageStatus,\n        j.chiefEng,\n        j.completenessScore,\n        j.coolingWaterTemp,\n        j.courseMadeGood,\n        j.currentFactor,\n        j.customId,\n        j.dailyAbFoc,\n        j.dailyAbFocIso,\n        j.dailyAeFoc,\n        j.dailyAeFocIso,\n        j.dailyMeFoc,\n        j.dailyMeFocIso,\n        j.dailyTotalFoc,\n        j.dailyTotalFocIso,\n        j.deliveredPowerCorrected,\n        j.displacement,\n        j.douglasSeaScale,\n        j.draftAft,\n        j.draftFwd,\n        j.draftMid,\n        j.eeoiTeu,\n        j.eeoiWeight,\n        j.engineDistance,\n        j.engineRoomTemp,\n        j.estimationScore,\n        j.eventCustomId,\n        j.eventName,\n        j.eventShortName,\n        j.eventType,\n        j.gainLossFuelButane,\n        j.gainLossFuelEthanol,\n        j.gainLossFuelHfo,\n        j.gainLossFuelHfoHs,\n        j.gainLossFuelHfoLls,\n        j.gainLossFuelHfoLs,\n        j.gainLossFuelLfo,\n        j.gainLossFuelLng,\n        j.gainLossFuelMdo,\n        j.gainLossFuelMethanol,\n        j.gainLossFuelBtl,\n        j.gainLossFuelFame,\n        j.gainLossFuelHvo,\n        j.gainLossFuelBioFuelBlend,\n        j.gainLossFuelMgo,\n        j.gainLossFuelPropane,\n        j.gainLossLubOilCirculationAe,\n        j.gainLossLubOilCirculationMe,\n        j.gainLossLubOilCirculationUndef,\n        j.gainLossLubOilCylinder,\n        j.gainLossLubOilCylinderHs,\n        j.gainLossLubOilCylinderLs,\n        j.gainLossLubOilUndef,\n        j.heading,\n        j.id,\n        j.isCombinatorMode,\n        j.isOnScrubberMode,\n        j.isOnShorePowerSupply,\n        j.shoreEnergyReceived,\n        j.isSlowSteaming,\n        j.isTcCutout,\n        j.legEventId,\n        j.mastersEta,\n        j.meanDraft,\n        j.meHfoFoc,\n        j.meHfoHsFoc,\n        j.meHfoHsLcv,\n        j.meHfoHsSulphurContent,\n        j.meHfoLcv,\n        j.meHfoLlsFoc,\n        j.meHfoLlsLcv,\n        j.meHfoLlsSulphurContent,\n        j.meHfoLsFoc,\n        j.meHfoLsLcv,\n        j.meHfoLsSulphurContent,\n        j.meHfoSulphurContent,\n        j.meLfoFoc,\n        j.meLfoLcv,\n        j.meLfoSulphurContent,\n        j.meMdoFoc,\n        j.meMdoHsFoc,\n        j.meMdoHsLcv,\n        j.meMdoHsSulphurContent,\n        j.meMdoLcv,\n        j.meMdoLlsFoc,\n        j.meMdoLlsLcv,\n        j.meMdoLlsSulphurContent,\n        j.meMdoLsFoc,\n        j.meMdoLsLcv,\n        j.meMdoLsSulphurContent,\n        j.meMdoSulphurContent,\n        j.meMgoFoc,\n        j.meMgoLcv,\n        j.meMgoLlsFoc,\n        j.meMgoLlsLcv,\n        j.meMgoLlsSulphurContent,\n        j.meMgoLsFoc,\n        j.meMgoLsLcv,\n        j.meMgoLsSulphurContent,\n        j.meMgoSulphurContent,\n        j.meMethanolFoc,\n        j.meMethanolLcv,\n        j.meMethanolSulphurContent,\n        j.meLngFoc,\n        j.meLngLcv,\n        j.meLngSulphurContent,\n        j.meBtlFoc,\n        j.meBtlLcv,\n        j.meBtlSulphurContent,\n        j.meFameFoc,\n        j.meFameLcv,\n        j.meFameSulphurContent,\n        j.meHvoFoc,\n        j.meHvoLcv,\n        j.meHvoSulphurContent,\n        j.meBioFuelBlendFoc,\n        j.meBioFuelBlendLcv,\n        j.meBioFuelBlendSulphurContent,\n        j.meAveragePercentageOfBioFuelInBlend,\n        j.meMostOccurringBioFuelKindInBlend,\n        j.meMostOccurringFossilFuelKindInBlend,\n        j.noxEmissionsAb,\n        j.noxEmissionsAe,\n        j.noxEmissionsMe,\n        j.period,\n        j.plausibilityCountFine,\n        j.plausibilityCountMajor,\n        j.plausibilityCountMinor,\n        j.plausibilityCountNotSet,\n        j.plausibilityScore,\n        j.posLat,\n        j.posLng,\n        j.resistanceByWind,\n        j.robFreshWaterDistilled,\n        j.robFreshWaterDrinking,\n        j.robFreshWaterUndef,\n        j.robFuelButane,\n        j.robFuelEthanol,\n        j.robFuelHfo,\n        j.robFuelHfoHs,\n        j.robFuelHfoLls,\n        j.robFuelHfoLs,\n        j.robFuelLfo,\n        j.robFuelLng,\n        j.robFuelMdo,\n        j.robFuelMethanol,\n        j.robFuelBtl,\n        j.robFuelFame,\n        j.robFuelHvo,\n        j.robFuelBioFuelBlend,\n        j.robFuelMgo,\n        j.robFuelPropane,\n        j.robLubOilCirculationAe,\n        j.robLubOilCirculationMe,\n        j.robLubOilCirculationUndef,\n        j.robLubOilCylinder,\n        j.robLubOilCylinderHs,\n        j.robLubOilCylinderLs,\n        j.robLubOilUndef,\n        j.sailedDistanceOverGround,\n        j.sailedDistanceThroughWater,\n        j.sailingTime,\n        j.distanceToGo,\n        j.seaState,\n        j.seaWaterTemp,\n        j.ship_id,\n        j.ship_imoNumber,\n        j.ship_name,\n        j.ship_shortName,\n        j.ship_alternativeName,\n        j.ship_callSign,\n        j.ship_currentVersionStamp,\n        j.ship_shipClassId,\n        j.ship_shipClassName,\n        j.ship_ownerName,\n        j.ship_portOfRegistryUnloc,\n        j.ship_isHidden,\n        j.ship_link,\n        j.soxEmissionsAb,\n        j.soxEmissionsAe,\n        j.soxEmissionsMe,\n        j.speedLoss,\n        j.speedLossUncorrected,\n        j.state,\n        j.swellDirection,\n        j.swellHeight,\n        j.timeStamp,\n        j.totalAverageAePower,\n        j.totalAverageElectricalPower,\n        j.totalAverageMePower,\n        j.totalAverageShaftPower,\n        j.totalAverageShaftPowerCorrected,\n        j.totalBunkerFuelOil,\n        j.totalBunkerLubOilCirculation,\n        j.totalCirculationLubOilAeConsumption,\n        j.totalCirculationLubOilMeConsumption,\n        j.totalCo2,\n        j.totalCo2Ab,\n        j.totalCo2Ae,\n        j.totalCo2Igs,\n        j.totalCo2Inc,\n        j.totalCo2Me,\n        j.totalCo2Undef,\n        j.totalCylinderHsLubOilConsumption,\n        j.totalCylinderLsLubOilConsumption,\n        j.totalCylinderOilConsumption,\n        j.totalFoc,\n        j.totalFocAb,\n        j.totalFocAbIso,\n        j.totalFocAe,\n        j.totalFocAeIso,\n        j.totalFocButane,\n        j.totalFocEthanol,\n        j.totalFocHfo,\n        j.totalFocHfoHs,\n        j.totalFocHfoLls,\n        j.totalFocHfoLs,\n        j.totalFocIgs,\n        j.totalFocIgsIso,\n        j.totalFocInc,\n        j.totalFocIncIso,\n        j.totalFocIso,\n        j.totalFocLfo,\n        j.totalFocLng,\n        j.totalFocMdo,\n        j.totalFocMe,\n        j.totalFocMeIso,\n        j.totalFocMethanol,\n        j.totalFocMgo,\n        j.totalFocPropane,\n        j.totalFocUndef,\n        j.totalFreshWaterConsumptionBoiler,\n        j.totalFreshWaterConsumptionDomestic,\n        j.totalFreshWaterConsumptionUndef,\n        j.totalFreshWaterConsumptionWashing,\n        j.totalGainLossFuelOil,\n        j.totalGainLossLubOilCirculation,\n        j.totalGeneratedAeEnergy,\n        j.totalGeneratedElectricalEnergy,\n        j.totalGeneratedMeEnergy,\n        j.totalGeneratedShaftEnergy,\n        j.totalNoxEmissions,\n        j.totalOilyWaterDischargeUndef,\n        j.totalOilyWaterDischargeViaOdme,\n        j.totalOilyWaterDischargeViaOws,\n        j.totalRobFreshWater,\n        j.totalRobFuelOil,\n        j.totalRobLubOilCirculation,\n        j.totalRunningHoursMe,\n        j.totalScocMe,\n        j.totalSfocAe,\n        j.totalSfocAeIso,\n        j.totalSfocMe,\n        j.totalSfocMeIso,\n        j.totalSoxEmissions,\n        j.totalWasteDisposalCategoryAPlastic,\n        j.totalWasteDisposalCategoryBFoodWaste,\n        j.totalWasteDisposalCategoryCDomesticWaste,\n        j.totalWasteDisposalCategoryDCookingOil,\n        j.totalWasteDisposalCategoryEIncineratorAsh,\n        j.totalWasteDisposalCategoryFOperationalWaste,\n        j.totalWasteDisposalCategoryGAnimalCarcass,\n        j.totalWasteDisposalCategoryHFishingGear,\n        j.totalWasteDisposalCategoryIElectronicWaste,\n        j.totalWasteDisposalCategoryJCargoResidueNonHme,\n        j.totalWasteDisposalCategoryKCargoResidueHme,\n        j.totalWasteDisposalSludgeAndOilResidue,\n        j.totalWasteDisposalUndef,\n        j.transportEfficiency,\n        j.trim,\n        j.versionStamp,\n        j.waterDepth,\n        j.waterDepthBelowKeel,\n        j.waveDirection,\n        j.waveDirectionRel,\n        j.waveHeight,\n        j.windDirRel,\n        j.windDirTrue,\n        j.windForce,\n        j.windSpeedRel,\n        j.windSpeedRelKnots,\n        j.windSpeedTrue,\n        j.windSpeedTrueKnots,\n        j.voyageName\n    from \"Bronze\".\"dbo\".\"bto_reportsummaries\" rs\n    CROSS APPLY OPENJSON(json_data)\n        with(\n            imoNumber nvarchar(max) '$.ship.imoNumber',\n            abHfoFoc nvarchar(max) '$.abHfoFoc',\n            abHfoHsFoc nvarchar(max) '$.abHfoHsFoc',\n            abHfoHsLcv nvarchar(max) '$.abHfoHsLcv',\n            abHfoHsSulphurContent nvarchar(max) '$.abHfoHsSulphurContent',\n            abHfoLcv nvarchar(max) '$.abHfoLcv',\n            abHfoLlsFoc nvarchar(max) '$.abHfoLlsFoc',\n            abHfoLlsLcv nvarchar(max) '$.abHfoLlsLcv',\n            abHfoLlsSulphurContent nvarchar(max) '$.abHfoLlsSulphurContent',\n            abHfoLsFoc nvarchar(max) '$.abHfoLsFoc',\n            abHfoLsLcv nvarchar(max) '$.abHfoLsLcv',\n            abHfoLsSulphurContent nvarchar(max) '$.abHfoLsSulphurContent',\n            abHfoSulphurContent nvarchar(max) '$.abHfoSulphurContent',\n            abLfoFoc nvarchar(max) '$.abLfoFoc',\n            abLfoLcv nvarchar(max) '$.abLfoLcv',\n            abLfoSulphurContent nvarchar(max) '$.abLfoSulphurContent',\n            abMdoFoc nvarchar(max) '$.abMdoFoc',\n            abMdoHsFoc nvarchar(max) '$.abMdoHsFoc',\n            abMdoHsLcv nvarchar(max) '$.abMdoHsLcv',\n            abMdoHsSulphurContent nvarchar(max) '$.abMdoHsSulphurContent',\n            abMdoLcv nvarchar(max) '$.abMdoLcv',\n            abMdoLlsFoc nvarchar(max) '$.abMdoLlsFoc',\n            abMdoLlsLcv nvarchar(max) '$.abMdoLlsLcv',\n            abMdoLlsSulphurContent nvarchar(max) '$.abMdoLlsSulphurContent',\n            abMdoLsFoc nvarchar(max) '$.abMdoLsFoc',\n            abMdoLsLcv nvarchar(max) '$.abMdoLsLcv',\n            abMdoLsSulphurContent nvarchar(max) '$.abMdoLsSulphurContent',\n            abMdoSulphurContent nvarchar(max) '$.abMdoSulphurContent',\n            abMgoFoc nvarchar(max) '$.abMgoFoc',\n            abMgoLcv nvarchar(max) '$.abMgoLcv',\n            abMgoLlsFoc nvarchar(max) '$.abMgoLlsFoc',\n            abMgoLlsLcv nvarchar(max) '$.abMgoLlsLcv',\n            abMgoLlsSulphurContent nvarchar(max) '$.abMgoLlsSulphurContent',\n            abMgoLsFoc nvarchar(max) '$.abMgoLsFoc',\n            abMgoLsLcv nvarchar(max) '$.abMgoLsLcv',\n            abMgoLsSulphurContent nvarchar(max) '$.abMgoLsSulphurContent',\n            abMgoSulphurContent nvarchar(max) '$.abMgoSulphurContent',\n            abMethanolFoc nvarchar(max) '$.abMethanolFoc',\n            abMethanolLcv nvarchar(max) '$.abMethanolLcv',\n            abMethanolSulphurContent nvarchar(max) '$.abMethanolSulphurContent',\n            abLngFoc nvarchar(max) '$.abLngFoc',\n            abLngLcv nvarchar(max) '$.abLngLcv',\n            abLngSulphurContent nvarchar(max) '$.abLngSulphurContent',\n            abBtlFoc nvarchar(max) '$.abBtlFoc',\n            abBtlLcv nvarchar(max) '$.abBtlLcv',\n            abBtlSulphurContent nvarchar(max) '$.abBtlSulphurContent',\n            abFameFoc nvarchar(max) '$.abFameFoc',\n            abFameLcv nvarchar(max) '$.abFameLcv',\n            abFameSulphurContent nvarchar(max) '$.abFameSulphurContent',\n            abHvoFoc nvarchar(max) '$.abHvoFoc',\n            abHvoLcv nvarchar(max) '$.abHvoLcv',\n            abHvoSulphurContent nvarchar(max) '$.abHvoSulphurContent',\n            abBioFuelBlendFoc nvarchar(max) '$.abBioFuelBlendFoc',\n            abBioFuelBlendLcv nvarchar(max) '$.abBioFuelBlendLcv',\n            abBioFuelBlendSulphurContent nvarchar(max) '$.abBioFuelBlendSulphurContent',\n            abAveragePercentageOfBioFuelInBlend nvarchar(max) '$.abAveragePercentageOfBioFuelInBlend',\n            abMostOccurringBioFuelKindInBlend nvarchar(max) '$.abMostOccurringBioFuelKindInBlend',\n            abMostOccurringFossilFuelKindInBlend nvarchar(max) '$.abMostOccurringFossilFuelKindInBlend',\n            aeHfoFoc nvarchar(max) '$.aeHfoFoc',\n            aeHfoHsFoc nvarchar(max) '$.aeHfoHsFoc',\n            aeHfoHsLcv nvarchar(max) '$.aeHfoHsLcv',\n            aeHfoHsSulphurContent nvarchar(max) '$.aeHfoHsSulphurContent',\n            aeHfoLcv nvarchar(max) '$.aeHfoLcv',\n            aeHfoLlsFoc nvarchar(max) '$.aeHfoLlsFoc',\n            aeHfoLlsLcv nvarchar(max) '$.aeHfoLlsLcv',\n            aeHfoLlsSulphurContent nvarchar(max) '$.aeHfoLlsSulphurContent',\n            aeHfoLsFoc nvarchar(max) '$.aeHfoLsFoc',\n            aeHfoLsLcv nvarchar(max) '$.aeHfoLsLcv',\n            aeHfoLsSulphurContent nvarchar(max) '$.aeHfoLsSulphurContent',\n            aeHfoSulphurContent nvarchar(max) '$.aeHfoSulphurContent',\n            aeLfoFoc nvarchar(max) '$.aeLfoFoc',\n            aeLfoLcv nvarchar(max) '$.aeLfoLcv',\n            aeLfoSulphurContent nvarchar(max) '$.aeLfoSulphurContent',\n            aeMdoFoc nvarchar(max) '$.aeMdoFoc',\n            aeMdoHsFoc nvarchar(max) '$.aeMdoHsFoc',\n            aeMdoHsLcv nvarchar(max) '$.aeMdoHsLcv',\n            aeMdoHsSulphurContent nvarchar(max) '$.aeMdoHsSulphurContent',\n            aeMdoLcv nvarchar(max) '$.aeMdoLcv',\n            aeMdoLlsFoc nvarchar(max) '$.aeMdoLlsFoc',\n            aeMdoLlsLcv nvarchar(max) '$.aeMdoLlsLcv',\n            aeMdoLlsSulphurContent nvarchar(max) '$.aeMdoLlsSulphurContent',\n            aeMdoLsFoc nvarchar(max) '$.aeMdoLsFoc',\n            aeMdoLsLcv nvarchar(max) '$.aeMdoLsLcv',\n            aeMdoLsSulphurContent nvarchar(max) '$.aeMdoLsSulphurContent',\n            aeMdoSulphurContent nvarchar(max) '$.aeMdoSulphurContent',\n            aeMgoFoc nvarchar(max) '$.aeMgoFoc',\n            aeMgoLcv nvarchar(max) '$.aeMgoLcv',\n            aeMgoLlsFoc nvarchar(max) '$.aeMgoLlsFoc',\n            aeMgoLlsLcv nvarchar(max) '$.aeMgoLlsLcv',\n            aeMgoLlsSulphurContent nvarchar(max) '$.aeMgoLlsSulphurContent',\n            aeMgoLsFoc nvarchar(max) '$.aeMgoLsFoc',\n            aeMgoLsLcv nvarchar(max) '$.aeMgoLsLcv',\n            aeMgoLsSulphurContent nvarchar(max) '$.aeMgoLsSulphurContent',\n            aeMgoSulphurContent nvarchar(max) '$.aeMgoSulphurContent',\n            aeMethanolFoc nvarchar(max) '$.aeMethanolFoc',\n            aeMethanolLcv nvarchar(max) '$.aeMethanolLcv',\n            aeMethanolSulphurContent nvarchar(max) '$.aeMethanolSulphurContent',\n            aeLngFoc nvarchar(max) '$.aeLngFoc',\n            aeLngLcv nvarchar(max) '$.aeLngLcv',\n            aeLngSulphurContent nvarchar(max) '$.aeLngSulphurContent',\n            aeBtlFoc nvarchar(max) '$.aeBtlFoc',\n            aeBtlLcv nvarchar(max) '$.aeBtlLcv',\n            aeBtlSulphurContent nvarchar(max) '$.aeBtlSulphurContent',\n            aeFameFoc nvarchar(max) '$.aeFameFoc',\n            aeFameLcv nvarchar(max) '$.aeFameLcv',\n            aeFameSulphurContent nvarchar(max) '$.aeFameSulphurContent',\n            aeHvoFoc nvarchar(max) '$.aeHvoFoc',\n            aeHvoLcv nvarchar(max) '$.aeHvoLcv',\n            aeHvoSulphurContent nvarchar(max) '$.aeHvoSulphurContent',\n            aeBioFuelBlendFoc nvarchar(max) '$.aeBioFuelBlendFoc',\n            aeBioFuelBlendLcv nvarchar(max) '$.aeBioFuelBlendLcv',\n            aeBioFuelBlendSulphurContent nvarchar(max) '$.aeBioFuelBlendSulphurContent',\n            aeAveragePercentageOfBioFuelInBlend nvarchar(max) '$.aeAveragePercentageOfBioFuelInBlend',\n            aeMostOccurringBioFuelKindInBlend nvarchar(max) '$.aeMostOccurringBioFuelKindInBlend',\n            aeMostOccurringFossilFuelKindInBlend nvarchar(max) '$.aeMostOccurringFossilFuelKindInBlend',\n            aer nvarchar(max) '$.aer',\n            aggregationDetails nvarchar(max) '$.aggregationDetails',\n            airPress nvarchar(max) '$.airPress',\n            airTemp nvarchar(max) '$.airTemp',\n            averageRelativeAeGeneratorPower nvarchar(max) '$.averageRelativeAeGeneratorPower',\n            averageRelativeAePower nvarchar(max) '$.averageRelativeAePower',\n            averageRelativeMePower nvarchar(max) '$.averageRelativeMePower',\n            averageShaftRpm nvarchar(max) '$.averageShaftRpm',\n            averageSlip nvarchar(max) '$.averageSlip',\n            averageSlipOverGround nvarchar(max) '$.averageSlipOverGround',\n            averageSpeedOverGround nvarchar(max) '$.averageSpeedOverGround',\n            averageSpeedThroughWater nvarchar(max) '$.averageSpeedThroughWater',\n            ballastWeight nvarchar(max) '$.ballastWeight',\n            bunkerFreshWaterBunkered nvarchar(max) '$.bunkerFreshWaterBunkered',\n            bunkerFreshWaterProduced nvarchar(max) '$.bunkerFreshWaterProduced',\n            bunkerFuelButane nvarchar(max) '$.bunkerFuelButane',\n            bunkerFuelEthanol nvarchar(max) '$.bunkerFuelEthanol',\n            bunkerFuelHfo nvarchar(max) '$.bunkerFuelHfo',\n            bunkerFuelHfoHs nvarchar(max) '$.bunkerFuelHfoHs',\n            bunkerFuelHfoLls nvarchar(max) '$.bunkerFuelHfoLls',\n            bunkerFuelHfoLs nvarchar(max) '$.bunkerFuelHfoLs',\n            bunkerFuelLfo nvarchar(max) '$.bunkerFuelLfo',\n            bunkerFuelLng nvarchar(max) '$.bunkerFuelLng',\n            bunkerFuelMdo nvarchar(max) '$.bunkerFuelMdo',\n            bunkerFuelMethanol nvarchar(max) '$.bunkerFuelMethanol',\n            bunkerFuelFame nvarchar(max) '$.bunkerFuelFame',\n            bunkerFuelBtl nvarchar(max) '$.bunkerFuelBtl',\n            bunkerFuelHvo nvarchar(max) '$.bunkerFuelHvo',\n            bunkerFuelBioFuelBlend nvarchar(max) '$.bunkerFuelBioFuelBlend',\n            bunkerFuelMgo nvarchar(max) '$.bunkerFuelMgo',\n            bunkerFuelPropane nvarchar(max) '$.bunkerFuelPropane',\n            bunkerLubOilCirculationAe nvarchar(max) '$.bunkerLubOilCirculationAe',\n            bunkerLubOilCirculationMe nvarchar(max) '$.bunkerLubOilCirculationMe',\n            bunkerLubOilCirculationUndef nvarchar(max) '$.bunkerLubOilCirculationUndef',\n            bunkerLubOilCylinder nvarchar(max) '$.bunkerLubOilCylinder',\n            bunkerLubOilCylinderHs nvarchar(max) '$.bunkerLubOilCylinderHs',\n            bunkerLubOilCylinderLs nvarchar(max) '$.bunkerLubOilCylinderLs',\n            bunkerLubOilUndef nvarchar(max) '$.bunkerLubOilUndef',\n            captain nvarchar(max) '$.captain',\n            cargoPassengers nvarchar(max) '$.cargoPassengers',\n            cargoReefers nvarchar(max) '$.cargoReefers',\n            calculatedPortReefers nvarchar(max) '$.calculatedPortReefers',\n            cargoTeuEmpty nvarchar(max) '$.cargoTeuEmpty',\n            cargoTeuFull nvarchar(max) '$.cargoTeuFull',\n            cargoVolume nvarchar(max) '$.cargoVolume',\n            cargoWeight nvarchar(max) '$.cargoWeight',\n            charterSpeedInstruction nvarchar(max) '$.charterSpeedInstruction',\n            charterSpeedInstructionKnots nvarchar(max) '$.charterSpeedInstructionKnots',\n            charterVoyageStatus nvarchar(max) '$.charterVoyageStatus',\n            chiefEng nvarchar(max) '$.chiefEng',\n            completenessScore nvarchar(max) '$.completenessScore',\n            coolingWaterTemp nvarchar(max) '$.coolingWaterTemp',\n            courseMadeGood nvarchar(max) '$.courseMadeGood',\n            currentFactor nvarchar(max) '$.currentFactor',\n            customId nvarchar(max) '$.customId',\n            dailyAbFoc nvarchar(max) '$.dailyAbFoc',\n            dailyAbFocIso nvarchar(max) '$.dailyAbFocIso',\n            dailyAeFoc nvarchar(max) '$.dailyAeFoc',\n            dailyAeFocIso nvarchar(max) '$.dailyAeFocIso',\n            dailyMeFoc nvarchar(max) '$.dailyMeFoc',\n            dailyMeFocIso nvarchar(max) '$.dailyMeFocIso',\n            dailyTotalFoc nvarchar(max) '$.dailyTotalFoc',\n            dailyTotalFocIso nvarchar(max) '$.dailyTotalFocIso',\n            deliveredPowerCorrected nvarchar(max) '$.deliveredPowerCorrected',\n            displacement nvarchar(max) '$.displacement',\n            douglasSeaScale nvarchar(max) '$.douglasSeaScale',\n            draftAft nvarchar(max) '$.draftAft',\n            draftFwd nvarchar(max) '$.draftFwd',\n            draftMid nvarchar(max) '$.draftMid',\n            eeoiTeu nvarchar(max) '$.eeoiTeu',\n            eeoiWeight nvarchar(max) '$.eeoiWeight',\n            engineDistance nvarchar(max) '$.engineDistance',\n            engineRoomTemp nvarchar(max) '$.engineRoomTemp',\n            estimationScore nvarchar(max) '$.estimationScore',\n            eventCustomId nvarchar(max) '$.eventCustomId',\n            eventName nvarchar(max) '$.eventName',\n            eventShortName nvarchar(max) '$.eventShortName',\n            eventType nvarchar(max) '$.eventType',\n            gainLossFuelButane nvarchar(max) '$.gainLossFuelButane',\n            gainLossFuelEthanol nvarchar(max) '$.gainLossFuelEthanol',\n            gainLossFuelHfo nvarchar(max) '$.gainLossFuelHfo',\n            gainLossFuelHfoHs nvarchar(max) '$.gainLossFuelHfoHs',\n            gainLossFuelHfoLls nvarchar(max) '$.gainLossFuelHfoLls',\n            gainLossFuelHfoLs nvarchar(max) '$.gainLossFuelHfoLs',\n            gainLossFuelLfo nvarchar(max) '$.gainLossFuelLfo',\n            gainLossFuelLng nvarchar(max) '$.gainLossFuelLng',\n            gainLossFuelMdo nvarchar(max) '$.gainLossFuelMdo',\n            gainLossFuelMethanol nvarchar(max) '$.gainLossFuelMethanol',\n            gainLossFuelBtl nvarchar(max) '$.gainLossFuelBtl',\n            gainLossFuelFame nvarchar(max) '$.gainLossFuelFame',\n            gainLossFuelHvo nvarchar(max) '$.gainLossFuelHvo',\n            gainLossFuelBioFuelBlend nvarchar(max) '$.gainLossFuelBioFuelBlend',\n            gainLossFuelMgo nvarchar(max) '$.gainLossFuelMgo',\n            gainLossFuelPropane nvarchar(max) '$.gainLossFuelPropane',\n            gainLossLubOilCirculationAe nvarchar(max) '$.gainLossLubOilCirculationAe',\n            gainLossLubOilCirculationMe nvarchar(max) '$.gainLossLubOilCirculationMe',\n            gainLossLubOilCirculationUndef nvarchar(max) '$.gainLossLubOilCirculationUndef',\n            gainLossLubOilCylinder nvarchar(max) '$.gainLossLubOilCylinder',\n            gainLossLubOilCylinderHs nvarchar(max) '$.gainLossLubOilCylinderHs',\n            gainLossLubOilCylinderLs nvarchar(max) '$.gainLossLubOilCylinderLs',\n            gainLossLubOilUndef nvarchar(max) '$.gainLossLubOilUndef',\n            heading nvarchar(max) '$.heading',\n            id nvarchar(max) '$.id',\n            isCombinatorMode nvarchar(max) '$.isCombinatorMode',\n            isOnScrubberMode nvarchar(max) '$.isOnScrubberMode',\n            isOnShorePowerSupply nvarchar(max) '$.isOnShorePowerSupply',\n            shoreEnergyReceived nvarchar(max) '$.shoreEnergyReceived',\n            isSlowSteaming nvarchar(max) '$.isSlowSteaming',\n            isTcCutout nvarchar(max) '$.isTcCutout',\n            legEventId nvarchar(max) '$.legEventId',\n            mastersEta nvarchar(max) '$.mastersEta',\n            meanDraft nvarchar(max) '$.meanDraft',\n            meHfoFoc nvarchar(max) '$.meHfoFoc',\n            meHfoHsFoc nvarchar(max) '$.meHfoHsFoc',\n            meHfoHsLcv nvarchar(max) '$.meHfoHsLcv',\n            meHfoHsSulphurContent nvarchar(max) '$.meHfoHsSulphurContent',\n            meHfoLcv nvarchar(max) '$.meHfoLcv',\n            meHfoLlsFoc nvarchar(max) '$.meHfoLlsFoc',\n            meHfoLlsLcv nvarchar(max) '$.meHfoLlsLcv',\n            meHfoLlsSulphurContent nvarchar(max) '$.meHfoLlsSulphurContent',\n            meHfoLsFoc nvarchar(max) '$.meHfoLsFoc',\n            meHfoLsLcv nvarchar(max) '$.meHfoLsLcv',\n            meHfoLsSulphurContent nvarchar(max) '$.meHfoLsSulphurContent',\n            meHfoSulphurContent nvarchar(max) '$.meHfoSulphurContent',\n            meLfoFoc nvarchar(max) '$.meLfoFoc',\n            meLfoLcv nvarchar(max) '$.meLfoLcv',\n            meLfoSulphurContent nvarchar(max) '$.meLfoSulphurContent',\n            meMdoFoc nvarchar(max) '$.meMdoFoc',\n            meMdoHsFoc nvarchar(max) '$.meMdoHsFoc',\n            meMdoHsLcv nvarchar(max) '$.meMdoHsLcv',\n            meMdoHsSulphurContent nvarchar(max) '$.meMdoHsSulphurContent',\n            meMdoLcv nvarchar(max) '$.meMdoLcv',\n            meMdoLlsFoc nvarchar(max) '$.meMdoLlsFoc',\n            meMdoLlsLcv nvarchar(max) '$.meMdoLlsLcv',\n            meMdoLlsSulphurContent nvarchar(max) '$.meMdoLlsSulphurContent',\n            meMdoLsFoc nvarchar(max) '$.meMdoLsFoc',\n            meMdoLsLcv nvarchar(max) '$.meMdoLsLcv',\n            meMdoLsSulphurContent nvarchar(max) '$.meMdoLsSulphurContent',\n            meMdoSulphurContent nvarchar(max) '$.meMdoSulphurContent',\n            meMgoFoc nvarchar(max) '$.meMgoFoc',\n            meMgoLcv nvarchar(max) '$.meMgoLcv',\n            meMgoLlsFoc nvarchar(max) '$.meMgoLlsFoc',\n            meMgoLlsLcv nvarchar(max) '$.meMgoLlsLcv',\n            meMgoLlsSulphurContent nvarchar(max) '$.meMgoLlsSulphurContent',\n            meMgoLsFoc nvarchar(max) '$.meMgoLsFoc',\n            meMgoLsLcv nvarchar(max) '$.meMgoLsLcv',\n            meMgoLsSulphurContent nvarchar(max) '$.meMgoLsSulphurContent',\n            meMgoSulphurContent nvarchar(max) '$.meMgoSulphurContent',\n            meMethanolFoc nvarchar(max) '$.meMethanolFoc',\n            meMethanolLcv nvarchar(max) '$.meMethanolLcv',\n            meMethanolSulphurContent nvarchar(max) '$.meMethanolSulphurContent',\n            meLngFoc nvarchar(max) '$.meLngFoc',\n            meLngLcv nvarchar(max) '$.meLngLcv',\n            meLngSulphurContent nvarchar(max) '$.meLngSulphurContent',\n            meBtlFoc nvarchar(max) '$.meBtlFoc',\n            meBtlLcv nvarchar(max) '$.meBtlLcv',\n            meBtlSulphurContent nvarchar(max) '$.meBtlSulphurContent',\n            meFameFoc nvarchar(max) '$.meFameFoc',\n            meFameLcv nvarchar(max) '$.meFameLcv',\n            meFameSulphurContent nvarchar(max) '$.meFameSulphurContent',\n            meHvoFoc nvarchar(max) '$.meHvoFoc',\n            meHvoLcv nvarchar(max) '$.meHvoLcv',\n            meHvoSulphurContent nvarchar(max) '$.meHvoSulphurContent',\n            meBioFuelBlendFoc nvarchar(max) '$.meBioFuelBlendFoc',\n            meBioFuelBlendLcv nvarchar(max) '$.meBioFuelBlendLcv',\n            meBioFuelBlendSulphurContent nvarchar(max) '$.meBioFuelBlendSulphurContent',\n            meAveragePercentageOfBioFuelInBlend nvarchar(max) '$.meAveragePercentageOfBioFuelInBlend',\n            meMostOccurringBioFuelKindInBlend nvarchar(max) '$.meMostOccurringBioFuelKindInBlend',\n            meMostOccurringFossilFuelKindInBlend nvarchar(max) '$.meMostOccurringFossilFuelKindInBlend',\n            noxEmissionsAb nvarchar(max) '$.noxEmissionsAb',\n            noxEmissionsAe nvarchar(max) '$.noxEmissionsAe',\n            noxEmissionsMe nvarchar(max) '$.noxEmissionsMe',\n            period nvarchar(max) '$.period',\n            plausibilityCountFine nvarchar(max) '$.plausibilityCountFine',\n            plausibilityCountMajor nvarchar(max) '$.plausibilityCountMajor',\n            plausibilityCountMinor nvarchar(max) '$.plausibilityCountMinor',\n            plausibilityCountNotSet nvarchar(max) '$.plausibilityCountNotSet',\n            plausibilityScore nvarchar(max) '$.plausibilityScore',\n            posLat nvarchar(max) '$.posLat',\n            posLng nvarchar(max) '$.posLng',\n            resistanceByWind nvarchar(max) '$.resistanceByWind',\n            robFreshWaterDistilled nvarchar(max) '$.robFreshWaterDistilled',\n            robFreshWaterDrinking nvarchar(max) '$.robFreshWaterDrinking',\n            robFreshWaterUndef nvarchar(max) '$.robFreshWaterUndef',\n            robFuelButane nvarchar(max) '$.robFuelButane',\n            robFuelEthanol nvarchar(max) '$.robFuelEthanol',\n            robFuelHfo nvarchar(max) '$.robFuelHfo',\n            robFuelHfoHs nvarchar(max) '$.robFuelHfoHs',\n            robFuelHfoLls nvarchar(max) '$.robFuelHfoLls',\n            robFuelHfoLs nvarchar(max) '$.robFuelHfoLs',\n            robFuelLfo nvarchar(max) '$.robFuelLfo',\n            robFuelLng nvarchar(max) '$.robFuelLng',\n            robFuelMdo nvarchar(max) '$.robFuelMdo',\n            robFuelMethanol nvarchar(max) '$.robFuelMethanol',\n            robFuelBtl nvarchar(max) '$.robFuelBtl',\n            robFuelFame nvarchar(max) '$.robFuelFame',\n            robFuelHvo nvarchar(max) '$.robFuelHvo',\n            robFuelBioFuelBlend nvarchar(max) '$.robFuelBioFuelBlend',\n            robFuelMgo nvarchar(max) '$.robFuelMgo',\n            robFuelPropane nvarchar(max) '$.robFuelPropane',\n            robLubOilCirculationAe nvarchar(max) '$.robLubOilCirculationAe',\n            robLubOilCirculationMe nvarchar(max) '$.robLubOilCirculationMe',\n            robLubOilCirculationUndef nvarchar(max) '$.robLubOilCirculationUndef',\n            robLubOilCylinder nvarchar(max) '$.robLubOilCylinder',\n            robLubOilCylinderHs nvarchar(max) '$.robLubOilCylinderHs',\n            robLubOilCylinderLs nvarchar(max) '$.robLubOilCylinderLs',\n            robLubOilUndef nvarchar(max) '$.robLubOilUndef',\n            sailedDistanceOverGround nvarchar(max) '$.sailedDistanceOverGround',\n            sailedDistanceThroughWater nvarchar(max) '$.sailedDistanceThroughWater',\n            sailingTime nvarchar(max) '$.sailingTime',\n            distanceToGo nvarchar(max) '$.distanceToGo',\n            seaState nvarchar(max) '$.seaState',\n            seaWaterTemp nvarchar(max) '$.seaWaterTemp',\n            ship_id nvarchar(max) '$.ship.id',\n            ship_imoNumber nvarchar(max) '$.ship.imoNumber',\n            ship_name nvarchar(max) '$.ship.name',\n            ship_shortName nvarchar(max) '$.ship.shortName',\n            ship_alternativeName nvarchar(max) '$.ship.alternativeName',\n            ship_callSign nvarchar(max) '$.ship.callSign',\n            ship_currentVersionStamp nvarchar(max) '$.ship.currentVersionStamp',\n            ship_shipClassId nvarchar(max) '$.ship.shipClassId',\n            ship_shipClassName nvarchar(max) '$.ship.shipClassName',\n            ship_ownerName nvarchar(max) '$.ship.ownerName',\n            ship_portOfRegistryUnloc nvarchar(max) '$.ship.portOfRegistryUnloc',\n            ship_isHidden nvarchar(max) '$.ship.isHidden',\n            ship_link nvarchar(max) '$.ship.link',\n            soxEmissionsAb nvarchar(max) '$.soxEmissionsAb',\n            soxEmissionsAe nvarchar(max) '$.soxEmissionsAe',\n            soxEmissionsMe nvarchar(max) '$.soxEmissionsMe',\n            speedLoss nvarchar(max) '$.speedLoss',\n            speedLossUncorrected nvarchar(max) '$.speedLossUncorrected',\n            state nvarchar(max) '$.state',\n            swellDirection nvarchar(max) '$.swellDirection',\n            swellHeight nvarchar(max) '$.swellHeight',\n            timeStamp nvarchar(max) '$.timeStamp',\n            totalAverageAePower nvarchar(max) '$.totalAverageAePower',\n            totalAverageElectricalPower nvarchar(max) '$.totalAverageElectricalPower',\n            totalAverageMePower nvarchar(max) '$.totalAverageMePower',\n            totalAverageShaftPower nvarchar(max) '$.totalAverageShaftPower',\n            totalAverageShaftPowerCorrected nvarchar(max) '$.totalAverageShaftPowerCorrected',\n            totalBunkerFuelOil nvarchar(max) '$.totalBunkerFuelOil',\n            totalBunkerLubOilCirculation nvarchar(max) '$.totalBunkerLubOilCirculation',\n            totalCirculationLubOilAeConsumption nvarchar(max) '$.totalCirculationLubOilAeConsumption',\n            totalCirculationLubOilMeConsumption nvarchar(max) '$.totalCirculationLubOilMeConsumption',\n            totalCo2 nvarchar(max) '$.totalCo2',\n            totalCo2Ab nvarchar(max) '$.totalCo2Ab',\n            totalCo2Ae nvarchar(max) '$.totalCo2Ae',\n            totalCo2Igs nvarchar(max) '$.totalCo2Igs',\n            totalCo2Inc nvarchar(max) '$.totalCo2Inc',\n            totalCo2Me nvarchar(max) '$.totalCo2Me',\n            totalCo2Undef nvarchar(max) '$.totalCo2Undef',\n            totalCylinderHsLubOilConsumption nvarchar(max) '$.totalCylinderHsLubOilConsumption',\n            totalCylinderLsLubOilConsumption nvarchar(max) '$.totalCylinderLsLubOilConsumption',\n            totalCylinderOilConsumption nvarchar(max) '$.totalCylinderOilConsumption',\n            totalFoc nvarchar(max) '$.totalFoc',\n            totalFocAb nvarchar(max) '$.totalFocAb',\n            totalFocAbIso nvarchar(max) '$.totalFocAbIso',\n            totalFocAe nvarchar(max) '$.totalFocAe',\n            totalFocAeIso nvarchar(max) '$.totalFocAeIso',\n            totalFocButane nvarchar(max) '$.totalFocButane',\n            totalFocEthanol nvarchar(max) '$.totalFocEthanol',\n            totalFocHfo nvarchar(max) '$.totalFocHfo',\n            totalFocHfoHs nvarchar(max) '$.totalFocHfoHs',\n            totalFocHfoLls nvarchar(max) '$.totalFocHfoLls',\n            totalFocHfoLs nvarchar(max) '$.totalFocHfoLs',\n            totalFocIgs nvarchar(max) '$.totalFocIgs',\n            totalFocIgsIso nvarchar(max) '$.totalFocIgsIso',\n            totalFocInc nvarchar(max) '$.totalFocInc',\n            totalFocIncIso nvarchar(max) '$.totalFocIncIso',\n            totalFocIso nvarchar(max) '$.totalFocIso',\n            totalFocLfo nvarchar(max) '$.totalFocLfo',\n            totalFocLng nvarchar(max) '$.totalFocLng',\n            totalFocMdo nvarchar(max) '$.totalFocMdo',\n            totalFocMe nvarchar(max) '$.totalFocMe',\n            totalFocMeIso nvarchar(max) '$.totalFocMeIso',\n            totalFocMethanol nvarchar(max) '$.totalFocMethanol',\n            totalFocMgo nvarchar(max) '$.totalFocMgo',\n            totalFocPropane nvarchar(max) '$.totalFocPropane',\n            totalFocUndef nvarchar(max) '$.totalFocUndef',\n            totalFreshWaterConsumptionBoiler nvarchar(max) '$.totalFreshWaterConsumptionBoiler',\n            totalFreshWaterConsumptionDomestic nvarchar(max) '$.totalFreshWaterConsumptionDomestic',\n            totalFreshWaterConsumptionUndef nvarchar(max) '$.totalFreshWaterConsumptionUndef',\n            totalFreshWaterConsumptionWashing nvarchar(max) '$.totalFreshWaterConsumptionWashing',\n            totalGainLossFuelOil nvarchar(max) '$.totalGainLossFuelOil',\n            totalGainLossLubOilCirculation nvarchar(max) '$.totalGainLossLubOilCirculation',\n            totalGeneratedAeEnergy nvarchar(max) '$.totalGeneratedAeEnergy',\n            totalGeneratedElectricalEnergy nvarchar(max) '$.totalGeneratedElectricalEnergy',\n            totalGeneratedMeEnergy nvarchar(max) '$.totalGeneratedMeEnergy',\n            totalGeneratedShaftEnergy nvarchar(max) '$.totalGeneratedShaftEnergy',\n            totalNoxEmissions nvarchar(max) '$.totalNoxEmissions',\n            totalOilyWaterDischargeUndef nvarchar(max) '$.totalOilyWaterDischargeUndef',\n            totalOilyWaterDischargeViaOdme nvarchar(max) '$.totalOilyWaterDischargeViaOdme',\n            totalOilyWaterDischargeViaOws nvarchar(max) '$.totalOilyWaterDischargeViaOws',\n            totalRobFreshWater nvarchar(max) '$.totalRobFreshWater',\n            totalRobFuelOil nvarchar(max) '$.totalRobFuelOil',\n            totalRobLubOilCirculation nvarchar(max) '$.totalRobLubOilCirculation',\n            totalRunningHoursMe nvarchar(max) '$.totalRunningHoursMe',\n            totalScocMe nvarchar(max) '$.totalScocMe',\n            totalSfocAe nvarchar(max) '$.totalSfocAe',\n            totalSfocAeIso nvarchar(max) '$.totalSfocAeIso',\n            totalSfocMe nvarchar(max) '$.totalSfocMe',\n            totalSfocMeIso nvarchar(max) '$.totalSfocMeIso',\n            totalSoxEmissions nvarchar(max) '$.totalSoxEmissions',\n            totalWasteDisposalCategoryAPlastic nvarchar(max) '$.totalWasteDisposalCategoryAPlastic',\n            totalWasteDisposalCategoryBFoodWaste nvarchar(max) '$.totalWasteDisposalCategoryBFoodWaste',\n            totalWasteDisposalCategoryCDomesticWaste nvarchar(max) '$.totalWasteDisposalCategoryCDomesticWaste',\n            totalWasteDisposalCategoryDCookingOil nvarchar(max) '$.totalWasteDisposalCategoryDCookingOil',\n            totalWasteDisposalCategoryEIncineratorAsh nvarchar(max) '$.totalWasteDisposalCategoryEIncineratorAsh',\n            totalWasteDisposalCategoryFOperationalWaste nvarchar(max) '$.totalWasteDisposalCategoryFOperationalWaste',\n            totalWasteDisposalCategoryGAnimalCarcass nvarchar(max) '$.totalWasteDisposalCategoryGAnimalCarcass',\n            totalWasteDisposalCategoryHFishingGear nvarchar(max) '$.totalWasteDisposalCategoryHFishingGear',\n            totalWasteDisposalCategoryIElectronicWaste nvarchar(max) '$.totalWasteDisposalCategoryIElectronicWaste',\n            totalWasteDisposalCategoryJCargoResidueNonHme nvarchar(max) '$.totalWasteDisposalCategoryJCargoResidueNonHme',\n            totalWasteDisposalCategoryKCargoResidueHme nvarchar(max) '$.totalWasteDisposalCategoryKCargoResidueHme',\n            totalWasteDisposalSludgeAndOilResidue nvarchar(max) '$.totalWasteDisposalSludgeAndOilResidue',\n            totalWasteDisposalUndef nvarchar(max) '$.totalWasteDisposalUndef',\n            transportEfficiency nvarchar(max) '$.transportEfficiency',\n            trim nvarchar(max) '$.trim',\n            versionStamp nvarchar(max) '$.versionStamp',\n            waterDepth nvarchar(max) '$.waterDepth',\n            waterDepthBelowKeel nvarchar(max) '$.waterDepthBelowKeel',\n            waveDirection nvarchar(max) '$.waveDirection',\n            waveDirectionRel nvarchar(max) '$.waveDirectionRel',\n            waveHeight nvarchar(max) '$.waveHeight',\n            windDirRel nvarchar(max) '$.windDirRel',\n            windDirTrue nvarchar(max) '$.windDirTrue',\n            windForce nvarchar(max) '$.windForce',\n            windSpeedRel nvarchar(max) '$.windSpeedRel',\n            windSpeedRelKnots nvarchar(max) '$.windSpeedRelKnots',\n            windSpeedTrue nvarchar(max) '$.windSpeedTrue',\n            windSpeedTrueKnots nvarchar(max) '$.windSpeedTrueKnots',\n            voyageName nvarchar(max) '$.voyageName'\n        ) j\n        where IMO not in (1234567, 1005100, 1010715, 1001001)\n),\ncte as (\n\t SELECT \n            \n        cast(imoNumber as integer) as imo\n        ,cast(reportId as integer) reportId\n        ,CAST(CASE\n            WHEN timestamp LIKE '%+%' THEN LEFT(timestamp, CHARINDEX('+', timestamp, 10) - 1)\n            WHEN timestamp LIKE '%-%' THEN LEFT(timestamp, CHARINDEX('-', timestamp, 10) - 1)\n            ELSE timestamp\n        END AS DATETIME ) AS localTime,\n\n        CAST(CONVERT(datetimeoffset, timestamp) AT TIME ZONE 'utc' AS DATETIME ) AS timestamputc\n        ,cast(timeStamp as datetimeoffset) as timeStamp\n        ,cast(mastersEta as datetimeoffset) as mastersEta\n        ,cast(abHfoFoc as float) as abHfoFoc\n        ,cast(abHfoHsFoc as float) as abHfoHsFoc \n        ,cast(abHfoHsLcv as float) as abHfoHsLcv \n        ,cast(abHfoHsSulphurContent as float) as abHfoHsSulphurContent \n        ,cast(abHfoLcv as float) as abHfoLcv \n        ,cast(abHfoLlsFoc as float) as abHfoLlsFoc \n        ,cast(abHfoLlsLcv as float) as abHfoLlsLcv \n        ,cast(abHfoLlsSulphurContent as float) as abHfoLlsSulphurContent \n        ,cast(abHfoLsFoc as float) as abHfoLsFoc \n        ,cast(abHfoLsLcv as float) as abHfoLsLcv \n        ,cast(abHfoLsSulphurContent as float) as abHfoLsSulphurContent \n        ,cast(abHfoSulphurContent as float) as abHfoSulphurContent \n        ,cast(abLfoFoc as float) as abLfoFoc \n        ,cast(abLfoLcv as float) as abLfoLcv \n        ,cast(abLfoSulphurContent as float) as abLfoSulphurContent \n        ,cast(abMdoFoc as float) as abMdoFoc \n        ,cast(abMdoHsFoc as float) as abMdoHsFoc \n        ,cast(abMdoHsLcv as float) as abMdoHsLcv \n        ,cast(abMdoHsSulphurContent as float) as abMdoHsSulphurContent \n        ,cast(abMdoLcv as float) as abMdoLcv \n        ,cast(abMdoLlsFoc as float) as abMdoLlsFoc \n        ,cast(abMdoLlsLcv as float) as abMdoLlsLcv \n        ,cast(abMdoLlsSulphurContent as float) as abMdoLlsSulphurContent \n        ,cast(abMdoLsFoc as float) as abMdoLsFoc \n        ,cast(abMdoLsLcv as float) as abMdoLsLcv \n        ,cast(abMdoLsSulphurContent as float) as abMdoLsSulphurContent \n        ,cast(abMdoSulphurContent as float) as abMdoSulphurContent \n        ,cast(abMgoFoc as float) as abMgoFoc \n        ,cast(abMgoLcv as float) as abMgoLcv \n        ,cast(abMgoLlsFoc as float) as abMgoLlsFoc \n        ,cast(abMgoLlsLcv as float) as abMgoLlsLcv \n        ,cast(abMgoLlsSulphurContent as float) as abMgoLlsSulphurContent \n        ,cast(abMgoLsFoc as float) as abMgoLsFoc \n        ,cast(abMgoLsLcv as float) as abMgoLsLcv \n        ,cast(abMgoLsSulphurContent as float) as abMgoLsSulphurContent \n        ,cast(abMgoSulphurContent as float) as abMgoSulphurContent \n        ,cast(abMethanolFoc as float) as abMethanolFoc \n        ,cast(abMethanolLcv as float) as abMethanolLcv \n        ,cast(abMethanolSulphurContent as float) as abMethanolSulphurContent \n        ,cast(abLngFoc as float) as abLngFoc \n        ,cast(abLngLcv as float) as abLngLcv \n        ,cast(abLngSulphurContent as float) as abLngSulphurContent \n        ,cast(abBtlFoc as float) as abBtlFoc \n        ,cast(abBtlLcv as float) as abBtlLcv \n        ,cast(abBtlSulphurContent as float) as abBtlSulphurContent \n        ,cast(abFameFoc as float) as abFameFoc \n        ,cast(abFameLcv as float) as abFameLcv \n        ,cast(abFameSulphurContent as float) as abFameSulphurContent \n        ,cast(abHvoFoc as float) as abHvoFoc \n        ,cast(abHvoLcv as float) as abHvoLcv \n        ,cast(abHvoSulphurContent as float) as abHvoSulphurContent \n        ,cast(abBioFuelBlendFoc as float) as abBioFuelBlendFoc \n        ,cast(abBioFuelBlendLcv as float) as abBioFuelBlendLcv \n        ,cast(abBioFuelBlendSulphurContent as float) as abBioFuelBlendSulphurContent \n        ,cast(abAveragePercentageOfBioFuelInBlend as float) as abAveragePercentageOfBioFuelInBlend \n        ,cast(abMostOccurringBioFuelKindInBlend as varchar(max)) as abMostOccurringBioFuelKindInBlend \n        ,cast(abMostOccurringFossilFuelKindInBlend as varchar(max)) as abMostOccurringFossilFuelKindInBlend \n        ,cast(aeHfoFoc as float) as aeHfoFoc \n        ,cast(aeHfoHsFoc as float) as aeHfoHsFoc \n        ,cast(aeHfoHsLcv as float) as aeHfoHsLcv \n        ,cast(aeHfoHsSulphurContent as float) as aeHfoHsSulphurContent \n        ,cast(aeHfoLcv as float) as aeHfoLcv \n        ,cast(aeHfoLlsFoc as float) as aeHfoLlsFoc \n        ,cast(aeHfoLlsLcv as float) as aeHfoLlsLcv \n        ,cast(aeHfoLlsSulphurContent as float) as aeHfoLlsSulphurContent \n        ,cast(aeHfoLsFoc as float) as aeHfoLsFoc \n        ,cast(aeHfoLsLcv as float) as aeHfoLsLcv \n        ,cast(aeHfoLsSulphurContent as float) as aeHfoLsSulphurContent \n        ,cast(aeHfoSulphurContent as float) as aeHfoSulphurContent \n        ,cast(aeLfoFoc as float) as aeLfoFoc \n        ,cast(aeLfoLcv as float) as aeLfoLcv \n        ,cast(aeLfoSulphurContent as float) as aeLfoSulphurContent \n        ,cast(aeMdoFoc as float) as aeMdoFoc \n        ,cast(aeMdoHsFoc as float) as aeMdoHsFoc \n        ,cast(aeMdoHsLcv as float) as aeMdoHsLcv \n        ,cast(aeMdoHsSulphurContent as float) as aeMdoHsSulphurContent \n        ,cast(aeMdoLcv as float) as aeMdoLcv \n        ,cast(aeMdoLlsFoc as float) as aeMdoLlsFoc \n        ,cast(aeMdoLlsLcv as float) as aeMdoLlsLcv \n        ,cast(aeMdoLlsSulphurContent as float) as aeMdoLlsSulphurContent \n        ,cast(aeMdoLsFoc as float) as aeMdoLsFoc \n        ,cast(aeMdoLsLcv as float) as aeMdoLsLcv \n        ,cast(aeMdoLsSulphurContent as float) as aeMdoLsSulphurContent \n        ,cast(aeMdoSulphurContent as float) as aeMdoSulphurContent \n        ,cast(aeMgoFoc as float) as aeMgoFoc \n        ,cast(aeMgoLcv as float) as aeMgoLcv \n        ,cast(aeMgoLlsFoc as float) as aeMgoLlsFoc \n        ,cast(aeMgoLlsLcv as float) as aeMgoLlsLcv \n        ,cast(aeMgoLlsSulphurContent as float) as aeMgoLlsSulphurContent \n        ,cast(aeMgoLsFoc as float) as aeMgoLsFoc \n        ,cast(aeMgoLsLcv as float) as aeMgoLsLcv \n        ,cast(aeMgoLsSulphurContent as float) as aeMgoLsSulphurContent \n        ,cast(aeMgoSulphurContent as float) as aeMgoSulphurContent \n        ,cast(aeMethanolFoc as float) as aeMethanolFoc \n        ,cast(aeMethanolLcv as float) as aeMethanolLcv \n        ,cast(aeMethanolSulphurContent as float) as aeMethanolSulphurContent \n        ,cast(aeLngFoc as float) as aeLngFoc \n        ,cast(aeLngLcv as float) as aeLngLcv \n        ,cast(aeLngSulphurContent as float) as aeLngSulphurContent \n        ,cast(aeBtlFoc as float) as aeBtlFoc \n        ,cast(aeBtlLcv as float) as aeBtlLcv \n        ,cast(aeBtlSulphurContent as float) as aeBtlSulphurContent \n        ,cast(aeFameFoc as float) as aeFameFoc \n        ,cast(aeFameLcv as float) as aeFameLcv \n        ,cast(aeFameSulphurContent as float) as aeFameSulphurContent \n        ,cast(aeHvoFoc as float) as aeHvoFoc \n        ,cast(aeHvoLcv as float) as aeHvoLcv \n        ,cast(aeHvoSulphurContent as float) as aeHvoSulphurContent \n        ,cast(aeBioFuelBlendFoc as float) as aeBioFuelBlendFoc \n        ,cast(aeBioFuelBlendLcv as float) as aeBioFuelBlendLcv \n        ,cast(aeBioFuelBlendSulphurContent as float) as aeBioFuelBlendSulphurContent \n        ,cast(aeAveragePercentageOfBioFuelInBlend as float) as aeAveragePercentageOfBioFuelInBlend \n        ,cast(aeMostOccurringBioFuelKindInBlend as varchar(max)) as aeMostOccurringBioFuelKindInBlend \n        ,cast(aeMostOccurringFossilFuelKindInBlend as varchar(max)) as aeMostOccurringFossilFuelKindInBlend \n        ,cast(aer as float) as aer \n        ,cast(airPress as float) as airPress \n        ,cast(airTemp as float) as airTemp \n        ,cast(averageRelativeAeGeneratorPower as float) as averageRelativeAeGeneratorPower \n        ,cast(averageRelativeAePower as float) as averageRelativeAePower \n        ,cast(averageRelativeMePower as float) as averageRelativeMePower \n        ,cast(averageShaftRpm as float) as averageShaftRpm \n        ,cast(averageSlip as float) as averageSlip \n        ,cast(averageSlipOverGround as float) as averageSlipOverGround \n        ,cast(averageSpeedOverGround as float) as averageSpeedOverGround \n        ,cast(averageSpeedThroughWater as float) as averageSpeedThroughWater \n        ,cast(ballastWeight as float) as ballastWeight \n        ,cast(bunkerFreshWaterBunkered as float) as bunkerFreshWaterBunkered \n        ,cast(bunkerFreshWaterProduced as float) as bunkerFreshWaterProduced \n        ,cast(bunkerFuelButane as float) as bunkerFuelButane \n        ,cast(bunkerFuelEthanol as float) as bunkerFuelEthanol \n        ,cast(bunkerFuelHfo as float) as bunkerFuelHfo \n        ,cast(bunkerFuelHfoHs as float) as bunkerFuelHfoHs \n        ,cast(bunkerFuelHfoLls as float) as bunkerFuelHfoLls \n        ,cast(bunkerFuelHfoLs as float) as bunkerFuelHfoLs \n        ,cast(bunkerFuelLfo as float) as bunkerFuelLfo \n        ,cast(bunkerFuelLng as float) as bunkerFuelLng \n        ,cast(bunkerFuelMdo as float) as bunkerFuelMdo \n        ,cast(bunkerFuelMethanol as float) as bunkerFuelMethanol \n        ,cast(bunkerFuelFame as float) as bunkerFuelFame \n        ,cast(bunkerFuelBtl as float) as bunkerFuelBtl \n        ,cast(bunkerFuelHvo as float) as bunkerFuelHvo \n        ,cast(bunkerFuelBioFuelBlend as float) as bunkerFuelBioFuelBlend \n        ,cast(bunkerFuelMgo as float) as bunkerFuelMgo \n        ,cast(bunkerFuelPropane as float) as bunkerFuelPropane \n        ,cast(bunkerLubOilCirculationAe as float) as bunkerLubOilCirculationAe \n        ,cast(bunkerLubOilCirculationMe as float) as bunkerLubOilCirculationMe \n        ,cast(bunkerLubOilCirculationUndef as float) as bunkerLubOilCirculationUndef \n        ,cast(bunkerLubOilCylinder as float) as bunkerLubOilCylinder \n        ,cast(bunkerLubOilCylinderHs as float) as bunkerLubOilCylinderHs \n        ,cast(bunkerLubOilCylinderLs as float) as bunkerLubOilCylinderLs \n        ,cast(bunkerLubOilUndef as float) as bunkerLubOilUndef \n        ,cast(captain as varchar(max)) as captain \n        ,cast(cargoPassengers as float) as cargoPassengers \n        ,cast(cargoReefers as integer) as cargoReefers \n        ,cast(calculatedPortReefers as float) as calculatedPortReefers \n        ,cast(cargoTeuEmpty as float) as cargoTeuEmpty \n        ,cast(cargoTeuFull as float) as cargoTeuFull \n        ,cast(cargoVolume as float) as cargoVolume \n        ,cast(cargoWeight as float) as cargoWeight \n        ,cast(charterSpeedInstruction as varchar(max)) as charterSpeedInstruction \n        ,cast(charterSpeedInstructionKnots as float) as charterSpeedInstructionKnots \n        ,cast(charterVoyageStatus as varchar(max)) as charterVoyageStatus \n        ,cast(chiefEng as varchar(max)) as chiefEng \n        ,cast(completenessScore as float) as completenessScore \n        ,cast(coolingWaterTemp as float) as coolingWaterTemp \n        ,cast(courseMadeGood as float) as courseMadeGood \n        ,cast(currentFactor as float) as currentFactor \n        ,cast(customId as varchar(max)) as customId \n        ,cast(dailyAbFoc as float) as dailyAbFoc \n        ,cast(dailyAbFocIso as float) as dailyAbFocIso \n        ,cast(dailyAeFoc as float) as dailyAeFoc \n        ,cast(dailyAeFocIso as float) as dailyAeFocIso \n        ,cast(dailyMeFoc as float) as dailyMeFoc \n        ,cast(dailyMeFocIso as float) as dailyMeFocIso \n        ,cast(dailyTotalFoc as float) as dailyTotalFoc \n        ,cast(dailyTotalFocIso as float) as dailyTotalFocIso \n        ,cast(deliveredPowerCorrected as float) as deliveredPowerCorrected \n        ,cast(displacement as float) as displacement \n        ,cast(douglasSeaScale as integer) as douglasSeaScale \n        ,cast(draftAft as float) as draftAft \n        ,cast(draftFwd as float) as draftFwd \n        ,cast(draftMid as float) as draftMid \n        ,cast(eeoiTeu as float) as eeoiTeu \n        ,cast(eeoiWeight as float) as eeoiWeight \n        ,cast(engineDistance as float) as engineDistance \n        ,cast(engineRoomTemp as float) as engineRoomTemp \n        ,cast(estimationScore as float) as estimationScore \n        ,cast(eventCustomId as varchar(max)) as eventCustomId \n        ,cast(eventName as varchar(max)) as eventName \n        ,cast(eventShortName as varchar(max)) as eventShortName \n        ,cast(eventType as varchar(max)) as eventType \n        ,cast(gainLossFuelButane as float) as gainLossFuelButane \n        ,cast(gainLossFuelEthanol as float) as gainLossFuelEthanol \n        ,cast(gainLossFuelHfo as float) as gainLossFuelHfo \n        ,cast(gainLossFuelHfoHs as float) as gainLossFuelHfoHs \n        ,cast(gainLossFuelHfoLls as float) as gainLossFuelHfoLls \n        ,cast(gainLossFuelHfoLs as float) as gainLossFuelHfoLs \n        ,cast(gainLossFuelLfo as float) as gainLossFuelLfo \n        ,cast(gainLossFuelLng as float) as gainLossFuelLng \n        ,cast(gainLossFuelMdo as float) as gainLossFuelMdo \n        ,cast(gainLossFuelMethanol as float) as gainLossFuelMethanol \n        ,cast(gainLossFuelBtl as float) as gainLossFuelBtl \n        ,cast(gainLossFuelFame as float) as gainLossFuelFame \n        ,cast(gainLossFuelHvo as float) as gainLossFuelHvo \n        ,cast(gainLossFuelBioFuelBlend as float) as gainLossFuelBioFuelBlend \n        ,cast(gainLossFuelMgo as float) as gainLossFuelMgo \n        ,cast(gainLossFuelPropane as float) as gainLossFuelPropane \n        ,cast(gainLossLubOilCirculationAe as float) as gainLossLubOilCirculationAe \n        ,cast(gainLossLubOilCirculationMe as float) as gainLossLubOilCirculationMe \n        ,cast(gainLossLubOilCirculationUndef as float) as gainLossLubOilCirculationUndef \n        ,cast(gainLossLubOilCylinder as float) as gainLossLubOilCylinder \n        ,cast(gainLossLubOilCylinderHs as float) as gainLossLubOilCylinderHs \n        ,cast(gainLossLubOilCylinderLs as float) as gainLossLubOilCylinderLs \n        ,cast(gainLossLubOilUndef as float) as gainLossLubOilUndef \n        ,cast(heading as float) as heading \n        ,cast(id as integer) as id \n        ,cast(isCombinatorMode as bit) as isCombinatorMode \n        ,cast(isOnScrubberMode as bit) as isOnScrubberMode \n        ,cast(isOnShorePowerSupply as bit) as isOnShorePowerSupply \n        ,cast(shoreEnergyReceived as float) as shoreEnergyReceived \n        ,cast(isSlowSteaming as bit) as isSlowSteaming \n        ,cast(isTcCutout as bit) as isTcCutout \n        ,cast(legEventId as integer) as legEventId \n        ,cast(meanDraft as float) as meanDraft \n        ,cast(meHfoFoc as float) as meHfoFoc \n        ,cast(meHfoHsFoc as float) as meHfoHsFoc \n        ,cast(meHfoHsLcv as float) as meHfoHsLcv \n        ,cast(meHfoHsSulphurContent as float) as meHfoHsSulphurContent \n        ,cast(meHfoLcv as float) as meHfoLcv \n        ,cast(meHfoLlsFoc as float) as meHfoLlsFoc \n        ,cast(meHfoLlsLcv as float) as meHfoLlsLcv \n        ,cast(meHfoLlsSulphurContent as float) as meHfoLlsSulphurContent \n        ,cast(meHfoLsFoc as float) as meHfoLsFoc \n        ,cast(meHfoLsLcv as float) as meHfoLsLcv \n        ,cast(meHfoLsSulphurContent as float) as meHfoLsSulphurContent \n        ,cast(meHfoSulphurContent as float) as meHfoSulphurContent \n        ,cast(meLfoFoc as float) as meLfoFoc \n        ,cast(meLfoLcv as float) as meLfoLcv \n        ,cast(meLfoSulphurContent as float) as meLfoSulphurContent \n        ,cast(meMdoFoc as float) as meMdoFoc \n        ,cast(meMdoHsFoc as float) as meMdoHsFoc \n        ,cast(meMdoHsLcv as float) as meMdoHsLcv \n        ,cast(meMdoHsSulphurContent as float) as meMdoHsSulphurContent \n        ,cast(meMdoLcv as float) as meMdoLcv \n        ,cast(meMdoLlsFoc as float) as meMdoLlsFoc \n        ,cast(meMdoLlsLcv as float) as meMdoLlsLcv \n        ,cast(meMdoLlsSulphurContent as float) as meMdoLlsSulphurContent \n        ,cast(meMdoLsFoc as float) as meMdoLsFoc \n        ,cast(meMdoLsLcv as float) as meMdoLsLcv \n        ,cast(meMdoLsSulphurContent as float) as meMdoLsSulphurContent \n        ,cast(meMdoSulphurContent as float) as meMdoSulphurContent \n        ,cast(meMgoFoc as float) as meMgoFoc \n        ,cast(meMgoLcv as float) as meMgoLcv \n        ,cast(meMgoLlsFoc as float) as meMgoLlsFoc \n        ,cast(meMgoLlsLcv as float) as meMgoLlsLcv \n        ,cast(meMgoLlsSulphurContent as float) as meMgoLlsSulphurContent \n        ,cast(meMgoLsFoc as float) as meMgoLsFoc \n        ,cast(meMgoLsLcv as float) as meMgoLsLcv \n        ,cast(meMgoLsSulphurContent as float) as meMgoLsSulphurContent \n        ,cast(meMgoSulphurContent as float) as meMgoSulphurContent \n        ,cast(meMethanolFoc as float) as meMethanolFoc \n        ,cast(meMethanolLcv as float) as meMethanolLcv \n        ,cast(meMethanolSulphurContent as float) as meMethanolSulphurContent \n        ,cast(meLngFoc as float) as meLngFoc \n        ,cast(meLngLcv as float) as meLngLcv \n        ,cast(meLngSulphurContent as float) as meLngSulphurContent \n        ,cast(meBtlFoc as float) as meBtlFoc \n        ,cast(meBtlLcv as float) as meBtlLcv \n        ,cast(meBtlSulphurContent as float) as meBtlSulphurContent \n        ,cast(meFameFoc as float) as meFameFoc \n        ,cast(meFameLcv as float) as meFameLcv \n        ,cast(meFameSulphurContent as float) as meFameSulphurContent \n        ,cast(meHvoFoc as float) as meHvoFoc \n        ,cast(meHvoLcv as float) as meHvoLcv \n        ,cast(meHvoSulphurContent as float) as meHvoSulphurContent \n        ,cast(meBioFuelBlendFoc as float) as meBioFuelBlendFoc \n        ,cast(meBioFuelBlendLcv as float) as meBioFuelBlendLcv \n        ,cast(meBioFuelBlendSulphurContent as float) as meBioFuelBlendSulphurContent \n        ,cast(meAveragePercentageOfBioFuelInBlend as float) as meAveragePercentageOfBioFuelInBlend \n        ,cast(meMostOccurringBioFuelKindInBlend as varchar(max)) as meMostOccurringBioFuelKindInBlend \n        ,cast(meMostOccurringFossilFuelKindInBlend as varchar(max)) as meMostOccurringFossilFuelKindInBlend \n        ,cast(noxEmissionsAb as float) as noxEmissionsAb \n        ,cast(noxEmissionsAe as float) as noxEmissionsAe \n        ,cast(noxEmissionsMe as float) as noxEmissionsMe \n        ,cast(period as float) as period \n        ,cast(plausibilityCountFine as integer) as plausibilityCountFine \n        ,cast(plausibilityCountMajor as integer) as plausibilityCountMajor \n        ,cast(plausibilityCountMinor as integer) as plausibilityCountMinor \n        ,cast(plausibilityCountNotSet as integer) as plausibilityCountNotSet \n        ,cast(plausibilityScore as float) as plausibilityScore \n        ,cast(posLat as float) as posLat \n        ,cast(posLng as float) as posLng \n        ,cast(resistanceByWind as float) as resistanceByWind \n        ,cast(robFreshWaterDistilled as float) as robFreshWaterDistilled \n        ,cast(robFreshWaterDrinking as float) as robFreshWaterDrinking \n        ,cast(robFreshWaterUndef as float) as robFreshWaterUndef \n        ,cast(robFuelButane as float) as robFuelButane \n        ,cast(robFuelEthanol as float) as robFuelEthanol \n        ,cast(robFuelHfo as float) as robFuelHfo \n        ,cast(robFuelHfoHs as float) as robFuelHfoHs \n        ,cast(robFuelHfoLls as float) as robFuelHfoLls \n        ,cast(robFuelHfoLs as float) as robFuelHfoLs \n        ,cast(robFuelLfo as float) as robFuelLfo \n        ,cast(robFuelLng as float) as robFuelLng \n        ,cast(robFuelMdo as float) as robFuelMdo \n        ,cast(robFuelMethanol as float) as robFuelMethanol \n        ,cast(robFuelBtl as float) as robFuelBtl \n        ,cast(robFuelFame as float) as robFuelFame \n        ,cast(robFuelHvo as float) as robFuelHvo \n        ,cast(robFuelBioFuelBlend as float) as robFuelBioFuelBlend \n        ,cast(robFuelMgo as float) as robFuelMgo \n        ,cast(robFuelPropane as float) as robFuelPropane \n        ,cast(robLubOilCirculationAe as float) as robLubOilCirculationAe \n        ,cast(robLubOilCirculationMe as float) as robLubOilCirculationMe \n        ,cast(robLubOilCirculationUndef as float) as robLubOilCirculationUndef \n        ,cast(robLubOilCylinder as float) as robLubOilCylinder \n        ,cast(robLubOilCylinderHs as float) as robLubOilCylinderHs \n        ,cast(robLubOilCylinderLs as float) as robLubOilCylinderLs \n        ,cast(robLubOilUndef as float) as robLubOilUndef \n        ,cast(sailedDistanceOverGround as float) as sailedDistanceOverGround \n        ,cast(sailedDistanceThroughWater as float) as sailedDistanceThroughWater \n        ,cast(sailingTime as float) as sailingTime \n        ,cast(distanceToGo as float) as distanceToGo \n        ,cast(seaState as integer) as seaState \n        ,cast(seaWaterTemp as float) as seaWaterTemp \n        ,cast(ship_id as integer) as ship_id \n        ,cast(ship_imoNumber as integer) as ship_imoNumber \n        ,cast(ship_name as varchar(max)) as ship_name \n        ,cast(ship_shortName as varchar(max)) as ship_shortName \n        ,cast(ship_alternativeName as varchar(max)) as ship_alternativeName \n        ,cast(ship_callSign as varchar(max)) as ship_callSign \n        ,cast(ship_currentVersionStamp as integer) as ship_currentVersionStamp \n        ,cast(ship_shipClassId as integer) as ship_shipClassId \n        ,cast(ship_shipClassName as varchar(max)) as ship_shipClassName \n        ,cast(ship_ownerName as varchar(max)) as ship_ownerName \n        ,cast(ship_portOfRegistryUnloc as varchar(max)) as ship_portOfRegistryUnloc \n        ,cast(ship_isHidden as bit) as ship_isHidden \n        ,cast(ship_link as varchar(max)) as ship_link \n        ,cast(soxEmissionsAb as float) as soxEmissionsAb \n        ,cast(soxEmissionsAe as float) as soxEmissionsAe \n        ,cast(soxEmissionsMe as float) as soxEmissionsMe \n        ,cast(speedLoss as float) as speedLoss \n        ,cast(speedLossUncorrected as float) as speedLossUncorrected \n        ,cast(state as varchar(max)) as state \n        ,cast(swellDirection as float) as swellDirection \n        ,cast(swellHeight as float) as swellHeight \n        ,cast(totalAverageAePower as float) as totalAverageAePower \n        ,cast(totalAverageElectricalPower as float) as totalAverageElectricalPower \n        ,cast(totalAverageMePower as float) as totalAverageMePower \n        ,cast(totalAverageShaftPower as float) as totalAverageShaftPower \n        ,cast(totalAverageShaftPowerCorrected as float) as totalAverageShaftPowerCorrected \n        ,cast(totalBunkerFuelOil as float) as totalBunkerFuelOil \n        ,cast(totalBunkerLubOilCirculation as float) as totalBunkerLubOilCirculation \n        ,cast(totalCirculationLubOilAeConsumption as float) as totalCirculationLubOilAeConsumption \n        ,cast(totalCirculationLubOilMeConsumption as float) as totalCirculationLubOilMeConsumption \n        ,cast(totalCo2 as float) as totalCo2 \n        ,cast(totalCo2Ab as float) as totalCo2Ab \n        ,cast(totalCo2Ae as float) as totalCo2Ae \n        ,cast(totalCo2Igs as float) as totalCo2Igs \n        ,cast(totalCo2Inc as float) as totalCo2Inc \n        ,cast(totalCo2Me as float) as totalCo2Me \n        ,cast(totalCo2Undef as float) as totalCo2Undef \n        ,cast(totalCylinderHsLubOilConsumption as float) as totalCylinderHsLubOilConsumption \n        ,cast(totalCylinderLsLubOilConsumption as float) as totalCylinderLsLubOilConsumption \n        ,cast(totalCylinderOilConsumption as float) as totalCylinderOilConsumption \n        ,cast(totalFoc as float) as totalFoc \n        ,cast(totalFocAb as float) as totalFocAb \n        ,cast(totalFocAbIso as float) as totalFocAbIso \n        ,cast(totalFocAe as float) as totalFocAe \n        ,cast(totalFocAeIso as float) as totalFocAeIso \n        ,cast(totalFocButane as float) as totalFocButane \n        ,cast(totalFocEthanol as float) as totalFocEthanol \n        ,cast(totalFocHfo as float) as totalFocHfo \n        ,cast(totalFocHfoHs as float) as totalFocHfoHs \n        ,cast(totalFocHfoLls as float) as totalFocHfoLls \n        ,cast(totalFocHfoLs as float) as totalFocHfoLs \n        ,cast(totalFocIgs as float) as totalFocIgs \n        ,cast(totalFocIgsIso as float) as totalFocIgsIso \n        ,cast(totalFocInc as float) as totalFocInc \n        ,cast(totalFocIncIso as float) as totalFocIncIso \n        ,cast(totalFocIso as float) as totalFocIso \n        ,cast(totalFocLfo as float) as totalFocLfo \n        ,cast(totalFocLng as float) as totalFocLng \n        ,cast(totalFocMdo as float) as totalFocMdo \n        ,cast(totalFocMe as float) as totalFocMe \n        ,cast(totalFocMeIso as float) as totalFocMeIso \n        ,cast(totalFocMethanol as float) as totalFocMethanol \n        ,cast(totalFocMgo as float) as totalFocMgo \n        ,cast(totalFocPropane as float) as totalFocPropane \n        ,cast(totalFocUndef as float) as totalFocUndef \n        ,cast(totalFreshWaterConsumptionBoiler as float) as totalFreshWaterConsumptionBoiler \n        ,cast(totalFreshWaterConsumptionDomestic as float) as totalFreshWaterConsumptionDomestic \n        ,cast(totalFreshWaterConsumptionUndef as float) as totalFreshWaterConsumptionUndef \n        ,cast(totalFreshWaterConsumptionWashing as float) as totalFreshWaterConsumptionWashing \n        ,cast(totalGainLossFuelOil as float) as totalGainLossFuelOil \n        ,cast(totalGainLossLubOilCirculation as float) as totalGainLossLubOilCirculation \n        ,cast(totalGeneratedAeEnergy as float) as totalGeneratedAeEnergy \n        ,cast(totalGeneratedElectricalEnergy as float) as totalGeneratedElectricalEnergy \n        ,cast(totalGeneratedMeEnergy as float) as totalGeneratedMeEnergy \n        ,cast(totalGeneratedShaftEnergy as float) as totalGeneratedShaftEnergy \n        ,cast(totalNoxEmissions as float) as totalNoxEmissions \n        ,cast(totalOilyWaterDischargeUndef as float) as totalOilyWaterDischargeUndef \n        ,cast(totalOilyWaterDischargeViaOdme as float) as totalOilyWaterDischargeViaOdme \n        ,cast(totalOilyWaterDischargeViaOws as float) as totalOilyWaterDischargeViaOws \n        ,cast(totalRobFreshWater as float) as totalRobFreshWater \n        ,cast(totalRobFuelOil as float) as totalRobFuelOil \n        ,cast(totalRobLubOilCirculation as float) as totalRobLubOilCirculation \n        ,cast(totalRunningHoursMe as float) as totalRunningHoursMe \n        ,cast(totalScocMe as float) as totalScocMe \n        ,cast(totalSfocAe as float) as totalSfocAe \n        ,cast(totalSfocAeIso as float) as totalSfocAeIso \n        ,cast(totalSfocMe as float) as totalSfocMe \n        ,cast(totalSfocMeIso as float) as totalSfocMeIso \n        ,cast(totalSoxEmissions as float) as totalSoxEmissions \n        ,cast(totalWasteDisposalCategoryAPlastic as float) as totalWasteDisposalCategoryAPlastic \n        ,cast(totalWasteDisposalCategoryBFoodWaste as float) as totalWasteDisposalCategoryBFoodWaste \n        ,cast(totalWasteDisposalCategoryCDomesticWaste as float) as totalWasteDisposalCategoryCDomesticWaste \n        ,cast(totalWasteDisposalCategoryDCookingOil as float) as totalWasteDisposalCategoryDCookingOil \n        ,cast(totalWasteDisposalCategoryEIncineratorAsh as float) as totalWasteDisposalCategoryEIncineratorAsh \n        ,cast(totalWasteDisposalCategoryFOperationalWaste as float) as totalWasteDisposalCategoryFOperationalWaste \n        ,cast(totalWasteDisposalCategoryGAnimalCarcass as float) as totalWasteDisposalCategoryGAnimalCarcass \n        ,cast(totalWasteDisposalCategoryHFishingGear as float) as totalWasteDisposalCategoryHFishingGear \n        ,cast(totalWasteDisposalCategoryIElectronicWaste as float) as totalWasteDisposalCategoryIElectronicWaste \n        ,cast(totalWasteDisposalCategoryJCargoResidueNonHme as float) as totalWasteDisposalCategoryJCargoResidueNonHme \n        ,cast(totalWasteDisposalCategoryKCargoResidueHme as float) as totalWasteDisposalCategoryKCargoResidueHme \n        ,cast(totalWasteDisposalSludgeAndOilResidue as float) as totalWasteDisposalSludgeAndOilResidue \n        ,cast(totalWasteDisposalUndef as float) as totalWasteDisposalUndef \n        ,cast(transportEfficiency as float) as transportEfficiency \n        ,cast(trim as float) as trim \n        ,cast(versionStamp as integer) as versionStamp \n        ,cast(waterDepth as float) as waterDepth \n        ,cast(waterDepthBelowKeel as float) as waterDepthBelowKeel \n        ,cast(waveDirection as float) as waveDirection \n        ,cast(waveDirectionRel as float) as waveDirectionRel \n        ,cast(waveHeight as float) as waveHeight \n        ,cast(windDirRel as float) as windDirRel \n        ,cast(windDirTrue as float) as windDirTrue \n        ,cast(windForce as int) as windForce \n        ,cast(windSpeedRel as float) as windSpeedRel \n        ,cast(windSpeedRelKnots as float) as windSpeedRelKnots \n        ,cast(windSpeedTrue as float) as windSpeedTrue \n        ,cast(windSpeedTrueKnots as float) as windSpeedTrueKnots \n        ,cast(voyageName as varchar(max)) as voyageName\n        ,getdate() as LoadDateTime\n        ,LOAD_ID\n        ,isDeleted\n    from source  rs\n)\nselect * from cte", "extra_ctes_injected": true, "extra_ctes": []}, "test.dbtProject_v2.not_null_bto_ReportSummaries_reportId.b592e58cde": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "reportId", "model": "{{ get_where_subquery(ref('bto_ReportSummaries')) }}"}, "namespace": null}, "database": "FleetPerformance", "schema": "dbt_test__audit", "name": "not_null_bto_ReportSummaries_reportId", "resource_type": "test", "package_name": "dbtProject_v2", "path": "not_null_bto_ReportSummaries_reportId.sql", "original_file_path": "models\\schema.yml", "unique_id": "test.dbtProject_v2.not_null_bto_ReportSummaries_reportId.b592e58cde", "fqn": ["dbtProject_v2", "not_null_bto_ReportSummaries_reportId"], "alias": "not_null_bto_ReportSummaries_reportId", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1720544425.7633336, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [["bto_ReportSummaries"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.dbtProject_v2.bto_ReportSummaries"]}, "compiled_path": "target\\compiled\\dbtProject_v2\\models\\schema.yml\\not_null_bto_ReportSummaries_reportId.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect reportId\nfrom \"Silver\".\"dbo\".\"bto_ReportSummaries\"\nwhere reportId is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "reportId", "file_key_name": "models.bto_ReportSummaries"}, "test.dbtProject_v2.unique_bto_ReportSummaries_reportId.5afa2755b6": {"test_metadata": {"name": "unique", "kwargs": {"column_name": "reportId", "model": "{{ get_where_subquery(ref('bto_ReportSummaries')) }}"}, "namespace": null}, "database": "FleetPerformance", "schema": "dbt_test__audit", "name": "unique_bto_ReportSummaries_reportId", "resource_type": "test", "package_name": "dbtProject_v2", "path": "unique_bto_ReportSummaries_reportId.sql", "original_file_path": "models\\schema.yml", "unique_id": "test.dbtProject_v2.unique_bto_ReportSummaries_reportId.5afa2755b6", "fqn": ["dbtProject_v2", "unique_bto_ReportSummaries_reportId"], "alias": "unique_bto_ReportSummaries_reportId", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1720544425.7733526, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [["bto_ReportSummaries"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.dbtProject_v2.bto_ReportSummaries"]}, "compiled_path": "target\\compiled\\dbtProject_v2\\models\\schema.yml\\unique_bto_ReportSummaries_reportId.sql", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    reportId as unique_field,\n    count(*) as n_records\n\nfrom \"Silver\".\"dbo\".\"bto_ReportSummaries\"\nwhere reportId is not null\ngroup by reportId\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "reportId", "file_key_name": "models.bto_ReportSummaries"}, "test.dbtProject_v2.not_null_bto_ReportSummaries_IMO.63f9901f8b": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "IMO", "model": "{{ get_where_subquery(ref('bto_ReportSummaries')) }}"}, "namespace": null}, "database": "FleetPerformance", "schema": "dbt_test__audit", "name": "not_null_bto_ReportSummaries_IMO", "resource_type": "test", "package_name": "dbtProject_v2", "path": "not_null_bto_ReportSummaries_IMO.sql", "original_file_path": "models\\schema.yml", "unique_id": "test.dbtProject_v2.not_null_bto_ReportSummaries_IMO.63f9901f8b", "fqn": ["dbtProject_v2", "not_null_bto_ReportSummaries_IMO"], "alias": "not_null_bto_ReportSummaries_IMO", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1720544425.7733526, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [["bto_ReportSummaries"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.dbtProject_v2.bto_ReportSummaries"]}, "compiled_path": "target\\compiled\\dbtProject_v2\\models\\schema.yml\\not_null_bto_ReportSummaries_IMO.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect IMO\nfrom \"Silver\".\"dbo\".\"bto_ReportSummaries\"\nwhere IMO is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "IMO", "file_key_name": "models.bto_ReportSummaries"}, "test.dbtProject_v2.relationships_bto_ReportSummaries_legeventid__legEventId__ref_BTO_LegSummary_.556ee0b77f": {"test_metadata": {"name": "relationships", "kwargs": {"to": "ref('BTO_LegSummary')", "field": "legEventId", "column_name": "legeventid", "model": "{{ get_where_subquery(ref('bto_ReportSummaries')) }}"}, "namespace": null}, "database": "FleetPerformance", "schema": "dbt_test__audit", "name": "relationships_bto_ReportSummaries_legeventid__legEventId__ref_BTO_LegSummary_", "resource_type": "test", "package_name": "dbtProject_v2", "path": "relationships_bto_ReportSummar_3837a6207bdaee882a7cb7b15198a6b8.sql", "original_file_path": "models\\schema.yml", "unique_id": "test.dbtProject_v2.relationships_bto_ReportSummaries_legeventid__legEventId__ref_BTO_LegSummary_.556ee0b77f", "fqn": ["dbtProject_v2", "relationships_bto_ReportSummaries_legeventid__legEventId__ref_BTO_LegSummary_"], "alias": "relationships_bto_ReportSummar_3837a6207bdaee882a7cb7b15198a6b8", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "relationships_bto_ReportSummar_3837a6207bdaee882a7cb7b15198a6b8", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": "legEventId <> 3269406 and isDeleted = 0", "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"where": "legEventId <> 3269406 and isDeleted = 0", "alias": "relationships_bto_ReportSummar_3837a6207bdaee882a7cb7b15198a6b8"}, "created_at": 1720544425.7778704, "relation_name": null, "raw_code": "{{ test_relationships(**_dbt_generic_test_kwargs) }}{{ config(where=\"legEventId <> 3269406 and isDeleted = 0\",alias=\"relationships_bto_ReportSummar_3837a6207bdaee882a7cb7b15198a6b8\") }}", "language": "sql", "refs": [["BTO_LegSummary"], ["bto_ReportSummaries"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_relationships", "macro.dbt.get_where_subquery"], "nodes": ["model.dbtProject_v2.BTO_LegSummary", "model.dbtProject_v2.bto_ReportSummaries"]}, "compiled_path": "target\\compiled\\dbtProject_v2\\models\\schema.yml\\relationships_bto_ReportSummar_3837a6207bdaee882a7cb7b15198a6b8.sql", "compiled": true, "compiled_code": "\n    \n    \n\nwith child as (\n    select legeventid as from_field\n    from (select * from \"Silver\".\"dbo\".\"bto_ReportSummaries\" where legEventId <> 3269406 and isDeleted = 0) dbt_subquery\n    where legeventid is not null\n),\n\nparent as (\n    select legEventId as to_field\n    from \"Silver\".\"dbo\".\"BTO_LegSummary\"\n)\n\nselect\n    from_field\n\nfrom child\nleft join parent\n    on child.from_field = parent.to_field\n\nwhere parent.to_field is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "legeventid", "file_key_name": "models.bto_ReportSummaries"}, "test.dbtProject_v2.dbt_utils_recency_bto_ReportSummaries_day__timestamputc__1.2ed31da78c": {"test_metadata": {"name": "recency", "kwargs": {"datepart": "day", "field": "timestamputc", "interval": 1, "model": "{{ get_where_subquery(ref('bto_ReportSummaries')) }}"}, "namespace": "dbt_utils"}, "database": "FleetPerformance", "schema": "dbt_test__audit", "name": "dbt_utils_recency_bto_ReportSummaries_day__timestamputc__1", "resource_type": "test", "package_name": "dbtProject_v2", "path": "dbt_utils_recency_bto_ReportSummaries_day__timestamputc__1.sql", "original_file_path": "models\\schema.yml", "unique_id": "test.dbtProject_v2.dbt_utils_recency_bto_ReportSummaries_day__timestamputc__1.2ed31da78c", "fqn": ["dbtProject_v2", "dbt_utils_recency_bto_ReportSummaries_day__timestamputc__1"], "alias": "dbt_utils_recency_bto_ReportSummaries_day__timestamputc__1", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1720544425.7930012, "relation_name": null, "raw_code": "{{ dbt_utils.test_recency(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [["bto_ReportSummaries"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.test_recency", "macro.dbt.get_where_subquery"], "nodes": ["model.dbtProject_v2.bto_ReportSummaries"]}, "compiled_path": "target\\compiled\\dbtProject_v2\\models\\schema.yml\\dbt_utils_recency_bto_ReportSummaries_day__timestamputc__1.sql", "compiled": true, "compiled_code": "\n\n\n\n\n\n\nwith recency as (\n\n    select \n\n      \n      \n        max(timestamputc) as most_recent\n\n    from \"Silver\".\"dbo\".\"bto_ReportSummaries\"\n\n    \n\n)\n\nselect\n\n    \n    most_recent,\n    cast(\n\n    dateadd(\n        day,\n        -1,\n        cast(SYSDATETIME() as datetime)\n        )\n\n as DATETIMEOFFSET) as threshold\n\nfrom recency\nwhere most_recent < cast(\n\n    dateadd(\n        day,\n        -1,\n        cast(SYSDATETIME() as datetime)\n        )\n\n as DATETIMEOFFSET)\n\n", "extra_ctes_injected": true, "extra_ctes": [], "column_name": null, "file_key_name": "models.bto_ReportSummaries"}, "test.dbtProject_v2.missing_imo_RS_bto_ReportSummaries_.db41486cf2": {"test_metadata": {"name": "missing_imo_RS", "kwargs": {"model": "{{ get_where_subquery(ref('bto_ReportSummaries')) }}"}, "namespace": null}, "database": "FleetPerformance", "schema": "dbt_test__audit", "name": "missing_imo_RS_bto_ReportSummaries_", "resource_type": "test", "package_name": "dbtProject_v2", "path": "missing_imo_RS_bto_ReportSummaries_.sql", "original_file_path": "models\\schema.yml", "unique_id": "test.dbtProject_v2.missing_imo_RS_bto_ReportSummaries_.db41486cf2", "fqn": ["dbtProject_v2", "missing_imo_RS_bto_ReportSummaries_"], "alias": "missing_imo_RS_bto_ReportSummaries_", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1720544425.8240538, "relation_name": null, "raw_code": "{{ test_missing_imo_RS(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [["bto_ReportSummaries"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbtProject_v2.test_missing_imo_RS", "macro.dbt.get_where_subquery"], "nodes": ["model.dbtProject_v2.bto_ReportSummaries"]}, "compiled_path": "target\\compiled\\dbtProject_v2\\models\\schema.yml\\missing_imo_RS_bto_ReportSummaries_.sql", "compiled": true, "compiled_code": "\n\nwith a as (\n    select \n        distinct imoNumber \n    from \"PANDT\".\"FPS\".\"dbo\".\"navis_db_report_summary\" \n    where timeStamputc > '2016-01-01' and  timeStamputc < DATEADD(DAY, -1, GETDATE())\n) \n, b as (\n    select \n        distinct imo \n    from \"Silver\".\"dbo\".\"bto_ReportSummaries\"\n    where timeStamputc > '2016-01-01' and  timeStamputc < DATEADD(DAY, -1, GETDATE())\n) \nselect a.* from a\nleft join b\non a.imoNumber = b.imo\nwhere b.imo is null\n\n", "extra_ctes_injected": true, "extra_ctes": [], "column_name": null, "file_key_name": "models.bto_ReportSummaries"}, "test.dbtProject_v2.missing_reportId_RS_bto_ReportSummaries_.bd69a5aa7f": {"test_metadata": {"name": "missing_reportId_RS", "kwargs": {"model": "{{ get_where_subquery(ref('bto_ReportSummaries')) }}"}, "namespace": null}, "database": "FleetPerformance", "schema": "dbt_test__audit", "name": "missing_reportId_RS_bto_ReportSummaries_", "resource_type": "test", "package_name": "dbtProject_v2", "path": "missing_reportId_RS_bto_ReportSummaries_.sql", "original_file_path": "models\\schema.yml", "unique_id": "test.dbtProject_v2.missing_reportId_RS_bto_ReportSummaries_.bd69a5aa7f", "fqn": ["dbtProject_v2", "missing_reportId_RS_bto_ReportSummaries_"], "alias": "missing_reportId_RS_bto_ReportSummaries_", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1720544425.8385756, "relation_name": null, "raw_code": "{{ test_missing_reportId_RS(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [["bto_ReportSummaries"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbtProject_v2.test_missing_reportId_RS", "macro.dbt.get_where_subquery"], "nodes": ["model.dbtProject_v2.bto_ReportSummaries"]}, "compiled_path": "target\\compiled\\dbtProject_v2\\models\\schema.yml\\missing_reportId_RS_bto_ReportSummaries_.sql", "compiled": true, "compiled_code": "\n\nwith a as (\n    select \n        distinct reportId \n    from \"PANDT\".\"FPS\".\"dbo\".\"navis_db_report_summary\" \n    where timeStamputc > '2016-01-01' and  timeStamputc < DATEADD(DAY, -1, GETDATE())\n) \n, b as (\n    select \n        distinct reportId \n    from \"Silver\".\"dbo\".\"bto_ReportSummaries\"\n    where timeStamputc > '2016-01-01' and  timeStamputc < DATEADD(DAY, -1, GETDATE())\n) \nselect a.* from a\nleft join b\non a.reportId = b.reportId\nwhere b.reportId is null\n\n", "extra_ctes_injected": true, "extra_ctes": [], "column_name": null, "file_key_name": "models.bto_ReportSummaries"}, "test.dbtProject_v2.aggregate_reportId_RS_bto_ReportSummaries_.122b7476cd": {"test_metadata": {"name": "aggregate_reportId_RS", "kwargs": {"model": "{{ get_where_subquery(ref('bto_ReportSummaries')) }}"}, "namespace": null}, "database": "FleetPerformance", "schema": "dbt_test__audit", "name": "aggregate_reportId_RS_bto_ReportSummaries_", "resource_type": "test", "package_name": "dbtProject_v2", "path": "aggregate_reportId_RS_bto_ReportSummaries_.sql", "original_file_path": "models\\schema.yml", "unique_id": "test.dbtProject_v2.aggregate_reportId_RS_bto_ReportSummaries_.122b7476cd", "fqn": ["dbtProject_v2", "aggregate_reportId_RS_bto_ReportSummaries_"], "alias": "aggregate_reportId_RS_bto_ReportSummaries_", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1720544425.8385756, "relation_name": null, "raw_code": "{{ test_aggregate_reportId_RS(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [["bto_ReportSummaries"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbtProject_v2.test_aggregate_reportId_RS", "macro.dbt.get_where_subquery"], "nodes": ["model.dbtProject_v2.bto_ReportSummaries"]}, "compiled_path": "target\\compiled\\dbtProject_v2\\models\\schema.yml\\aggregate_reportId_RS_bto_ReportSummaries_.sql", "compiled": true, "compiled_code": "\n\nwith a as(\n\tselect reportId as reportId_cdl, versionstamp as versionstamp_cdl, sailedDistanceOverGround as sailedDistanceOverGround_cdl\n\tfrom \"Silver\".\"dbo\".\"bto_ReportSummaries\"\n)\n, b as (\n\tselect reportId as reportId_pandt, versionstamp as versionstamp_pandt, sailedDistanceOverGround as sailedDistanceOverGround_pandt\n\tfrom PANDT.FPS.dbo.navis_db_report_summary\n)\n, c as (\n\tselect a.reportId_cdl, sum(a.sailedDistanceOverGround_cdl) as sailedDistanceOverGround_cdl\n\tfrom a join b\n\ton a.versionstamp_cdl = b.versionstamp_pandt and a.reportId_cdl = b.reportId_pandt\n\tgroup by a.reportId_cdl\n)\n, d as (\n\tselect b.reportId_pandt, sum(b.sailedDistanceOverGround_pandt) as sailedDistanceOverGround_pandt\n\tfrom a join b\n\ton a.versionstamp_cdl = b.versionstamp_pandt and a.reportId_cdl = b.reportId_pandt\n\tgroup by b.reportId_pandt\n)\nselect * \nfrom c\njoin d\non c.reportId_cdl = d.reportId_pandt\nwhere c.sailedDistanceOverGround_cdl <> d.sailedDistanceOverGround_pandt\n\n", "extra_ctes_injected": true, "extra_ctes": [], "column_name": null, "file_key_name": "models.bto_ReportSummaries"}}, "sources": {"source.dbtProject_v2.stage.api_bto_ships": {"database": "StageData", "schema": "dbo", "name": "api_bto_ships", "resource_type": "source", "package_name": "dbtProject_v2", "path": "models\\sources.yml", "original_file_path": "models\\sources.yml", "unique_id": "source.dbtProject_v2.stage.api_bto_ships", "fqn": ["dbtProject_v2", "stage", "api_bto_ships"], "source_name": "stage", "source_description": "", "loader": "", "identifier": "api_bto_ships", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"StageData\".\"dbo\".\"api_bto_ships\"", "created_at": 1720537838.918785}, "source.dbtProject_v2.stage.api_btr_ships": {"database": "StageData", "schema": "dbo", "name": "api_btr_ships", "resource_type": "source", "package_name": "dbtProject_v2", "path": "models\\sources.yml", "original_file_path": "models\\sources.yml", "unique_id": "source.dbtProject_v2.stage.api_btr_ships", "fqn": ["dbtProject_v2", "stage", "api_btr_ships"], "source_name": "stage", "source_description": "", "loader": "", "identifier": "api_btr_ships", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"StageData\".\"dbo\".\"api_btr_ships\"", "created_at": 1720537838.918785}, "source.dbtProject_v2.stage.api_bto_shipsDeltaReports": {"database": "StageData", "schema": "dbo", "name": "api_bto_shipsDeltaReports", "resource_type": "source", "package_name": "dbtProject_v2", "path": "models\\sources.yml", "original_file_path": "models\\sources.yml", "unique_id": "source.dbtProject_v2.stage.api_bto_shipsDeltaReports", "fqn": ["dbtProject_v2", "stage", "api_bto_shipsDeltaReports"], "source_name": "stage", "source_description": "", "loader": "", "identifier": "api_bto_shipsDeltaReports", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"StageData\".\"dbo\".\"api_bto_shipsDeltaReports\"", "created_at": 1720537838.918785}, "source.dbtProject_v2.stage.api_bto_shipsReportSDelta": {"database": "StageData", "schema": "dbo", "name": "api_bto_shipsReportSDelta", "resource_type": "source", "package_name": "dbtProject_v2", "path": "models\\sources.yml", "original_file_path": "models\\sources.yml", "unique_id": "source.dbtProject_v2.stage.api_bto_shipsReportSDelta", "fqn": ["dbtProject_v2", "stage", "api_bto_shipsReportSDelta"], "source_name": "stage", "source_description": "", "loader": "", "identifier": "api_bto_shipsReportSDelta", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"StageData\".\"dbo\".\"api_bto_shipsReportSDelta\"", "created_at": 1720537838.918785}, "source.dbtProject_v2.stage.api_bto_LegSummary_Delta": {"database": "StageData", "schema": "dbo", "name": "api_bto_LegSummary_Delta", "resource_type": "source", "package_name": "dbtProject_v2", "path": "models\\sources.yml", "original_file_path": "models\\sources.yml", "unique_id": "source.dbtProject_v2.stage.api_bto_LegSummary_Delta", "fqn": ["dbtProject_v2", "stage", "api_bto_LegSummary_Delta"], "source_name": "stage", "source_description": "", "loader": "", "identifier": "api_bto_LegSummary_Delta", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"StageData\".\"dbo\".\"api_bto_LegSummary_Delta\"", "created_at": 1720537838.918785}, "source.dbtProject_v2.stage.api_bto_shipsDeltaReports_expanded": {"database": "StageData", "schema": "dbo", "name": "api_bto_shipsDeltaReports_expanded", "resource_type": "source", "package_name": "dbtProject_v2", "path": "models\\sources.yml", "original_file_path": "models\\sources.yml", "unique_id": "source.dbtProject_v2.stage.api_bto_shipsDeltaReports_expanded", "fqn": ["dbtProject_v2", "stage", "api_bto_shipsDeltaReports_expanded"], "source_name": "stage", "source_description": "", "loader": "", "identifier": "api_bto_shipsDeltaReports_expanded", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"StageData\".\"dbo\".\"api_bto_shipsDeltaReports_expanded\"", "created_at": 1720537838.9337847}, "source.dbtProject_v2.stage.api_bto_Events_Delta": {"database": "StageData", "schema": "dbo", "name": "api_bto_Events_Delta", "resource_type": "source", "package_name": "dbtProject_v2", "path": "models\\sources.yml", "original_file_path": "models\\sources.yml", "unique_id": "source.dbtProject_v2.stage.api_bto_Events_Delta", "fqn": ["dbtProject_v2", "stage", "api_bto_Events_Delta"], "source_name": "stage", "source_description": "", "loader": "", "identifier": "api_bto_Events_Delta", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"StageData\".\"dbo\".\"api_bto_Events_Delta\"", "created_at": 1720537838.9337847}, "source.dbtProject_v2.corpdata.DimVesselSS": {"database": "DataWarehouse", "schema": "dbo", "name": "DimVesselSS", "resource_type": "source", "package_name": "dbtProject_v2", "path": "models\\sources.yml", "original_file_path": "models\\sources.yml", "unique_id": "source.dbtProject_v2.corpdata.DimVesselSS", "fqn": ["dbtProject_v2", "corpdata", "DimVesselSS"], "source_name": "corpdata", "source_description": "", "loader": "", "identifier": "DimVesselSS", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"DataWarehouse\".\"dbo\".\"DimVesselSS\"", "created_at": 1720537838.9344387}}, "macros": {"macro.dbtProject_v2.generate_schema_name": {"name": "generate_schema_name", "resource_type": "macro", "package_name": "dbtProject_v2", "path": "macros\\generate_schema_name.sql", "original_file_path": "macros\\generate_schema_name.sql", "unique_id": "macro.dbtProject_v2.generate_schema_name", "macro_sql": "{% macro generate_schema_name(custom_schema_name, node) -%}\r\n\r\n    {%- set default_schema = target.schema -%}\r\n    {%- if custom_schema_name is none -%}\r\n\r\n        {{ default_schema }}\r\n\r\n    {%- else -%}\r\n\r\n        {{ custom_schema_name | trim }}\r\n\r\n    {%- endif -%}\r\n\r\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720537836.007143, "supported_languages": null}, "macro.dbtProject_v2.max_loadid": {"name": "max_loadid", "resource_type": "macro", "package_name": "dbtProject_v2", "path": "macros\\max_loadid.sql", "original_file_path": "macros\\max_loadid.sql", "unique_id": "macro.dbtProject_v2.max_loadid", "macro_sql": "{% macro max_loadid(reference_type, reference_name) %}\r\n    {% if var(\"load_id\", False) %}\r\n        {% set results_list = var(\"load_id\") %}\r\n        {{ return(results_list) }}\r\n    {% else %}\r\n        {% if reference_type == 'model' %}\r\n            {%- call statement('my_statement', fetch_result=True) -%}\r\n                SELECT MAX(LOAD_ID) AS Load_ID\r\n                FROM {{ ref(reference_name) }}\r\n            {%- endcall -%}\r\n            {% if execute %}\r\n                {% set results_list = load_result('my_statement')['data'][0][0] %}\r\n                {{ return(results_list) }}\r\n            {% else %}\r\n                {{ return([]) }}\r\n            {% endif %}\r\n        {% elif reference_type == 'source' %}\r\n            {%- call statement('my_statement', fetch_result=True) -%}\r\n                SELECT MAX(LOAD_ID) AS Load_ID\r\n                FROM {{ source('stage', reference_name) }}\r\n            {%- endcall -%}\r\n            {% if execute %}\r\n                {% set results_list = load_result('my_statement')['data'][0][0] %}\r\n                {{ return(results_list) }}\r\n            {% else %}\r\n                {{ return([]) }}\r\n            {% endif %}\r\n        {% else %}\r\n            {{ return([]) }}\r\n        {% endif %}\r\n    {% endif %}\r\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720537836.007143, "supported_languages": null}, "macro.dbtProject_v2.update_normalize_flag": {"name": "update_normalize_flag", "resource_type": "macro", "package_name": "dbtProject_v2", "path": "macros\\update_normalize_flag.sql", "original_file_path": "macros\\update_normalize_flag.sql", "unique_id": "macro.dbtProject_v2.update_normalize_flag", "macro_sql": "{% macro update_normalize_flag(lad_id , ref_name ) %}\r\n    UPDATE {{ source('json', ref_name) }} \r\n    SET isNormalized = 1\r\n    WHERE LOAD_ID = {{ lad_id }}\r\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720537836.007143, "supported_languages": null}, "macro.dbtProject_v2.test_aggregate_reportId_RS": {"name": "test_aggregate_reportId_RS", "resource_type": "macro", "package_name": "dbtProject_v2", "path": "tests\\generic\\aggregate_reportId_RS.sql", "original_file_path": "tests\\generic\\aggregate_reportId_RS.sql", "unique_id": "macro.dbtProject_v2.test_aggregate_reportId_RS", "macro_sql": "{% test aggregate_reportId_RS(model) %}\r\n\r\nwith a as(\r\n\tselect reportId as reportId_cdl, versionstamp as versionstamp_cdl, sailedDistanceOverGround as sailedDistanceOverGround_cdl\r\n\tfrom {{ model }}\r\n)\r\n, b as (\r\n\tselect reportId as reportId_pandt, versionstamp as versionstamp_pandt, sailedDistanceOverGround as sailedDistanceOverGround_pandt\r\n\tfrom PANDT.FPS.dbo.navis_db_report_summary\r\n)\r\n, c as (\r\n\tselect a.reportId_cdl, sum(a.sailedDistanceOverGround_cdl) as sailedDistanceOverGround_cdl\r\n\tfrom a join b\r\n\ton a.versionstamp_cdl = b.versionstamp_pandt and a.reportId_cdl = b.reportId_pandt\r\n\tgroup by a.reportId_cdl\r\n)\r\n, d as (\r\n\tselect b.reportId_pandt, sum(b.sailedDistanceOverGround_pandt) as sailedDistanceOverGround_pandt\r\n\tfrom a join b\r\n\ton a.versionstamp_cdl = b.versionstamp_pandt and a.reportId_cdl = b.reportId_pandt\r\n\tgroup by b.reportId_pandt\r\n)\r\nselect * \r\nfrom c\r\njoin d\r\non c.reportId_cdl = d.reportId_pandt\r\nwhere c.sailedDistanceOverGround_cdl <> d.sailedDistanceOverGround_pandt\r\n\r\n{% endtest %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720537836.0172148, "supported_languages": null}, "macro.dbtProject_v2.test_full_table_scan_LS": {"name": "test_full_table_scan_LS", "resource_type": "macro", "package_name": "dbtProject_v2", "path": "tests\\generic\\full_table_scan_LS.sql", "original_file_path": "tests\\generic\\full_table_scan_LS.sql", "unique_id": "macro.dbtProject_v2.test_full_table_scan_LS", "macro_sql": "{% test full_table_scan_LS(model) %}\r\n\r\nwith a as (\r\n\tselect * \r\n\tfrom PANDT.FPS.dbo.navis_db_leg_summary\r\n)\r\n, b as (\r\n\tselect \r\n\t\tlegEventId legEventId_ ,\r\n\t\tportOfOriginUnloc portOfOriginUnloc_,\r\n\t\tportOfOriginName portOfOriginName_,\r\n\t\tportOfDestinationUnloc portOfDestinationUnloc_,\r\n\t\tportOfDestinationName portOfDestinationName_\r\n\tfrom {{ model }}\r\n)\r\nselect *\r\nfrom a\r\njoin b\r\non a.legEventId = b.legEventId_\r\nwhere a.portOfOriginUnloc <> b.portOfOriginUnloc_\r\nor a.portOfOriginName <> b.portOfOriginName_\r\nor a.portOfDestinationUnloc <> b.portOfDestinationUnloc_\r\nor a.portOfDestinationName <> b.portOfDestinationName_\r\n\r\n{% endtest %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720537836.0172148, "supported_languages": null}, "macro.dbtProject_v2.test_missing_imo_lookupships": {"name": "test_missing_imo_lookupships", "resource_type": "macro", "package_name": "dbtProject_v2", "path": "tests\\generic\\missing_imo_lookupships.sql", "original_file_path": "tests\\generic\\missing_imo_lookupships.sql", "unique_id": "macro.dbtProject_v2.test_missing_imo_lookupships", "macro_sql": "{% test missing_imo_lookupships(model) %}\r\n\r\n    with a as (\r\n        select \r\n            distinct imo \r\n        from {{ var('linked_server') }}.{{ source('corpdata', 'DimVesselSS') }}\r\n\t\twhere IMO != 0 AND IMO NOT IN (1234567, 1005100, 1010715, 1001001, 9999981, 9999980, 9999977, 9999982, 9999978, 9999977, 9999979)\r\n\t\t)\r\n, b as (\r\n        select \r\n            distinct imo \r\n        from {{ model }}\r\n        ) \r\n    select a.* from a\r\n    left join b\r\n    on a.imo = b.imo\r\n    where b.imo is null\r\n\r\n{% endtest %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720537836.0172148, "supported_languages": null}, "macro.dbtProject_v2.test_missing_imo_RS": {"name": "test_missing_imo_RS", "resource_type": "macro", "package_name": "dbtProject_v2", "path": "tests\\generic\\missing_imo_RS.sql", "original_file_path": "tests\\generic\\missing_imo_RS.sql", "unique_id": "macro.dbtProject_v2.test_missing_imo_RS", "macro_sql": "{% test missing_imo_RS(model) %}\r\n\r\nwith a as (\r\n    select \r\n        distinct imoNumber \r\n    from \"PANDT\".\"FPS\".\"dbo\".\"navis_db_report_summary\" \r\n    where timeStamputc > '2016-01-01' and  timeStamputc < DATEADD(DAY, -1, GETDATE())\r\n) \r\n, b as (\r\n    select \r\n        distinct imo \r\n    from {{ model }}\r\n    where timeStamputc > '2016-01-01' and  timeStamputc < DATEADD(DAY, -1, GETDATE())\r\n) \r\nselect a.* from a\r\nleft join b\r\non a.imoNumber = b.imo\r\nwhere b.imo is null\r\n\r\n{% endtest %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720537836.0172148, "supported_languages": null}, "macro.dbtProject_v2.test_missing_legeventId_LS": {"name": "test_missing_legeventId_LS", "resource_type": "macro", "package_name": "dbtProject_v2", "path": "tests\\generic\\missing_legeventId_LS.sql", "original_file_path": "tests\\generic\\missing_legeventId_LS.sql", "unique_id": "macro.dbtProject_v2.test_missing_legeventId_LS", "macro_sql": "{% test missing_legeventId_LS(model) %}\r\n\r\nwith a as (\r\n\tselect distinct legEventId \r\n\tfrom \"PANDT\".\"FPS\".\"dbo\".\"navis_db_leg_summary\" \r\n\twhere legEventId not in (3109371, 3123099, 3245118)\r\n)\r\n, b as (\r\n\tselect distinct legEventId\r\n\tfrom {{ model }}\r\n)\r\nselect a.* \r\nfrom a\r\nleft join b\r\non a.legEventId = b.legEventId\r\nwhere b.legEventId is null\r\n\r\n{% endtest %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720537836.0172148, "supported_languages": null}, "macro.dbtProject_v2.test_missing_reportId_RS": {"name": "test_missing_reportId_RS", "resource_type": "macro", "package_name": "dbtProject_v2", "path": "tests\\generic\\missing_reportId_RS.sql", "original_file_path": "tests\\generic\\missing_reportId_RS.sql", "unique_id": "macro.dbtProject_v2.test_missing_reportId_RS", "macro_sql": "{% test missing_reportId_RS(model) %}\r\n\r\nwith a as (\r\n    select \r\n        distinct reportId \r\n    from \"PANDT\".\"FPS\".\"dbo\".\"navis_db_report_summary\" \r\n    where timeStamputc > '2016-01-01' and  timeStamputc < DATEADD(DAY, -1, GETDATE())\r\n) \r\n, b as (\r\n    select \r\n        distinct reportId \r\n    from {{ model }}\r\n    where timeStamputc > '2016-01-01' and  timeStamputc < DATEADD(DAY, -1, GETDATE())\r\n) \r\nselect a.* from a\r\nleft join b\r\non a.reportId = b.reportId\r\nwhere b.reportId is null\r\n\r\n{% endtest %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720537836.0172148, "supported_languages": null}, "macro.dbt_sqlserver.sqlserver__get_show_grant_sql": {"name": "sqlserver__get_show_grant_sql", "resource_type": "macro", "package_name": "dbt_sqlserver", "path": "macros\\adapters\\apply_grants.sql", "original_file_path": "macros\\adapters\\apply_grants.sql", "unique_id": "macro.dbt_sqlserver.sqlserver__get_show_grant_sql", "macro_sql": "{% macro sqlserver__get_show_grant_sql(relation) %}\n    select\n        GRANTEE as grantee,\n        PRIVILEGE_TYPE as privilege_type\n    from INFORMATION_SCHEMA.TABLE_PRIVILEGES with (nolock)\n    where TABLE_CATALOG = '{{ relation.database }}'\n      and TABLE_SCHEMA = '{{ relation.schema }}'\n      and TABLE_NAME = '{{ relation.identifier }}'\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720537836.0222812, "supported_languages": null}, "macro.dbt_sqlserver.sqlserver__get_grant_sql": {"name": "sqlserver__get_grant_sql", "resource_type": "macro", "package_name": "dbt_sqlserver", "path": "macros\\adapters\\apply_grants.sql", "original_file_path": "macros\\adapters\\apply_grants.sql", "unique_id": "macro.dbt_sqlserver.sqlserver__get_grant_sql", "macro_sql": "\n\n\n{%- macro sqlserver__get_grant_sql(relation, privilege, grantees) -%}\n    {%- set grantees_safe = [] -%}\n    {%- for grantee in grantees -%}\n        {%- set grantee_safe = \"[\" ~ grantee ~ \"]\" -%}\n        {%- do grantees_safe.append(grantee_safe) -%}\n    {%- endfor -%}\n    grant {{ privilege }} on {{ relation }} to {{ grantees_safe | join(', ') }}\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720537836.0222812, "supported_languages": null}, "macro.dbt_sqlserver.sqlserver__get_revoke_sql": {"name": "sqlserver__get_revoke_sql", "resource_type": "macro", "package_name": "dbt_sqlserver", "path": "macros\\adapters\\apply_grants.sql", "original_file_path": "macros\\adapters\\apply_grants.sql", "unique_id": "macro.dbt_sqlserver.sqlserver__get_revoke_sql", "macro_sql": "{%- macro sqlserver__get_revoke_sql(relation, privilege, grantees) -%}\n    {%- set grantees_safe = [] -%}\n    {%- for grantee in grantees -%}\n        {%- set grantee_safe = \"[\" ~ grantee ~ \"]\" -%}\n        {%- do grantees_safe.append(grantee_safe) -%}\n    {%- endfor -%}\n    revoke {{ privilege }} on {{ relation }} from {{ grantees_safe | join(', ') }}\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720537836.0222812, "supported_languages": null}, "macro.dbt_sqlserver.get_provision_sql": {"name": "get_provision_sql", "resource_type": "macro", "package_name": "dbt_sqlserver", "path": "macros\\adapters\\apply_grants.sql", "original_file_path": "macros\\adapters\\apply_grants.sql", "unique_id": "macro.dbt_sqlserver.get_provision_sql", "macro_sql": "{% macro get_provision_sql(relation, privilege, grantees) %}\n    {% for grantee in grantees %}\n        if not exists(select name from sys.database_principals where name = '{{ grantee }}')\n        create user [{{ grantee }}] from external provider;\n    {% endfor %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720537836.0222812, "supported_languages": null}, "macro.dbt_sqlserver.sqlserver__apply_grants": {"name": "sqlserver__apply_grants", "resource_type": "macro", "package_name": "dbt_sqlserver", "path": "macros\\adapters\\apply_grants.sql", "original_file_path": "macros\\adapters\\apply_grants.sql", "unique_id": "macro.dbt_sqlserver.sqlserver__apply_grants", "macro_sql": "{% macro sqlserver__apply_grants(relation, grant_config, should_revoke=True) %}\n    {#-- If grant_config is {} or None, this is a no-op --#}\n    {% if grant_config %}\n        {% if should_revoke %}\n            {#-- We think previous grants may have carried over --#}\n            {#-- Show current grants and calculate diffs --#}\n            {% set current_grants_table = run_query(get_show_grant_sql(relation)) %}\n            {% set current_grants_dict = adapter.standardize_grants_dict(current_grants_table) %}\n            {% set needs_granting = diff_of_two_dicts(grant_config, current_grants_dict) %}\n            {% set needs_revoking = diff_of_two_dicts(current_grants_dict, grant_config) %}\n            {% if not (needs_granting or needs_revoking) %}\n                {{ log('On ' ~ relation ~': All grants are in place, no revocation or granting needed.')}}\n            {% endif %}\n        {% else %}\n            {#-- We don't think there's any chance of previous grants having carried over. --#}\n            {#-- Jump straight to granting what the user has configured. --#}\n            {% set needs_revoking = {} %}\n            {% set needs_granting = grant_config %}\n        {% endif %}\n        {% if needs_granting or needs_revoking %}\n            {% set revoke_statement_list = get_dcl_statement_list(relation, needs_revoking, get_revoke_sql) %}\n\n            {% if config.get('auto_provision_aad_principals', False) %}\n                {% set provision_statement_list = get_dcl_statement_list(relation, needs_granting, get_provision_sql) %}\n            {% else %}\n                {% set provision_statement_list = [] %}\n            {% endif %}\n\n            {% set grant_statement_list = get_dcl_statement_list(relation, needs_granting, get_grant_sql) %}\n            {% set dcl_statement_list = revoke_statement_list + provision_statement_list + grant_statement_list %}\n            {% if dcl_statement_list %}\n                {{ call_dcl_statements(dcl_statement_list) }}\n            {% endif %}\n        {% endif %}\n    {% endif %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_query", "macro.dbt.get_show_grant_sql", "macro.dbt.get_dcl_statement_list", "macro.dbt.call_dcl_statements"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720537836.0222812, "supported_languages": null}, "macro.dbt_sqlserver.sqlserver__get_columns_in_relation": {"name": "sqlserver__get_columns_in_relation", "resource_type": "macro", "package_name": "dbt_sqlserver", "path": "macros\\adapters\\columns.sql", "original_file_path": "macros\\adapters\\columns.sql", "unique_id": "macro.dbt_sqlserver.sqlserver__get_columns_in_relation", "macro_sql": "{% macro sqlserver__get_columns_in_relation(relation) -%}\n  {% call statement('get_columns_in_relation', fetch_result=True) %}\n\n    with mapping as (\n        select\n            row_number() over (partition by object_name(c.object_id) order by c.column_id) as ordinal_position,\n            c.name collate database_default as column_name,\n            t.name as data_type,\n            c.max_length as character_maximum_length,\n            c.precision as numeric_precision,\n            c.scale as numeric_scale\n        from [{{ 'tempdb' if '#' in relation.identifier else relation.database }}].sys.columns c with (nolock)\n        inner join sys.types t with (nolock)\n        on c.user_type_id = t.user_type_id\n        where c.object_id = object_id('{{ 'tempdb..' ~ relation.include(database=false, schema=false) if '#' in relation.identifier else relation }}')\n    )\n\n    select\n        column_name,\n        data_type,\n        character_maximum_length,\n        numeric_precision,\n        numeric_scale\n    from mapping\n    order by ordinal_position\n\n  {% endcall %}\n  {% set table = load_result('get_columns_in_relation').table %}\n  {{ return(sql_convert_columns_in_relation(table)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt.sql_convert_columns_in_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720537836.0222812, "supported_languages": null}, "macro.dbt_sqlserver.sqlserver__get_columns_in_query": {"name": "sqlserver__get_columns_in_query", "resource_type": "macro", "package_name": "dbt_sqlserver", "path": "macros\\adapters\\columns.sql", "original_file_path": "macros\\adapters\\columns.sql", "unique_id": "macro.dbt_sqlserver.sqlserver__get_columns_in_query", "macro_sql": "{% macro sqlserver__get_columns_in_query(select_sql) %}\n    {% call statement('get_columns_in_query', fetch_result=True, auto_begin=False) -%}\n        select TOP 0 * from (\n            {{ select_sql }}\n        ) as __dbt_sbq\n        where 0 = 1\n    {% endcall %}\n\n    {{ return(load_result('get_columns_in_query').table.columns | map(attribute='name') | list) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720537836.0373669, "supported_languages": null}, "macro.dbt_sqlserver.sqlserver__alter_column_type": {"name": "sqlserver__alter_column_type", "resource_type": "macro", "package_name": "dbt_sqlserver", "path": "macros\\adapters\\columns.sql", "original_file_path": "macros\\adapters\\columns.sql", "unique_id": "macro.dbt_sqlserver.sqlserver__alter_column_type", "macro_sql": "{% macro sqlserver__alter_column_type(relation, column_name, new_column_type) %}\n\n  {%- set tmp_column = column_name + \"__dbt_alter\" -%}\n\n  {% call statement('alter_column_type') -%}\n    alter {{ relation.type }} {{ relation }} add \"{{ tmp_column }}\" {{ new_column_type }};\n  {%- endcall -%}\n  {% call statement('alter_column_type') -%}\n    update {{ relation }} set \"{{ tmp_column }}\" = \"{{ column_name }}\";\n  {%- endcall -%}\n  {% call statement('alter_column_type') -%}\n    alter {{ relation.type }} {{ relation }} drop column \"{{ column_name }}\";\n  {%- endcall -%}\n  {% call statement('alter_column_type') -%}\n    exec sp_rename '{{ relation | replace('\"', '') }}.{{ tmp_column }}', '{{ column_name }}', 'column'\n  {%- endcall -%}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720537836.0373669, "supported_languages": null}, "macro.dbt_sqlserver.sqlserver__alter_relation_add_remove_columns": {"name": "sqlserver__alter_relation_add_remove_columns", "resource_type": "macro", "package_name": "dbt_sqlserver", "path": "macros\\adapters\\columns.sql", "original_file_path": "macros\\adapters\\columns.sql", "unique_id": "macro.dbt_sqlserver.sqlserver__alter_relation_add_remove_columns", "macro_sql": "{% macro sqlserver__alter_relation_add_remove_columns(relation, add_columns, remove_columns) %}\n  {% call statement('add_drop_columns') -%}\n    {% if add_columns %}\n        alter {{ relation.type }} {{ relation }}\n        add {% for column in add_columns %}\"{{ column.name }}\" {{ column.data_type }}{{ ', ' if not loop.last }}{% endfor %};\n    {% endif %}\n\n    {% if remove_columns %}\n        alter {{ relation.type }} {{ relation }}\n        drop column {% for column in remove_columns %}\"{{ column.name }}\"{{ ',' if not loop.last }}{% endfor %};\n    {% endif %}\n  {%- endcall -%}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720537836.0373669, "supported_languages": null}, "macro.dbt_sqlserver.sqlserver__create_clustered_columnstore_index": {"name": "sqlserver__create_clustered_columnstore_index", "resource_type": "macro", "package_name": "dbt_sqlserver", "path": "macros\\adapters\\indexes.sql", "original_file_path": "macros\\adapters\\indexes.sql", "unique_id": "macro.dbt_sqlserver.sqlserver__create_clustered_columnstore_index", "macro_sql": "{% macro sqlserver__create_clustered_columnstore_index(relation) -%}\n  {%- set cci_name = (relation.schema ~ '_' ~ relation.identifier ~ '_cci') | replace(\".\", \"\") | replace(\" \", \"\") -%}\n  {%- set relation_name = relation.schema ~ '_' ~ relation.identifier -%}\n  {%- set full_relation = '\"' ~ relation.schema ~ '\".\"' ~ relation.identifier ~ '\"' -%}\n  use [{{ relation.database }}];\n  if EXISTS (\n        SELECT * FROM\n        sys.indexes WHERE name = '{{cci_name}}'\n        AND object_id=object_id('{{relation_name}}')\n    )\n  DROP index {{full_relation}}.{{cci_name}}\n  CREATE CLUSTERED COLUMNSTORE INDEX {{cci_name}}\n    ON {{full_relation}}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720537836.0373669, "supported_languages": null}, "macro.dbt_sqlserver.drop_xml_indexes": {"name": "drop_xml_indexes", "resource_type": "macro", "package_name": "dbt_sqlserver", "path": "macros\\adapters\\indexes.sql", "original_file_path": "macros\\adapters\\indexes.sql", "unique_id": "macro.dbt_sqlserver.drop_xml_indexes", "macro_sql": "{% macro drop_xml_indexes() -%}\n{# Altered from https://stackoverflow.com/q/1344401/10415173 #}\n{# and https://stackoverflow.com/a/33785833/10415173         #}\n\n\n{{ log(\"Running drop_xml_indexes() macro...\") }}\n\ndeclare @drop_xml_indexes nvarchar(max);\nselect @drop_xml_indexes = (\n    select 'IF INDEXPROPERTY(' + CONVERT(VARCHAR(MAX), sys.tables.[object_id]) + ', ''' + sys.indexes.[name] + ''', ''IndexId'') IS NOT NULL DROP INDEX [' + sys.indexes.[name] + '] ON ' + '[' + SCHEMA_NAME(sys.tables.[schema_id]) + '].[' + OBJECT_NAME(sys.tables.[object_id]) + ']; '\n\tfrom sys.indexes\n    inner join sys.tables on sys.indexes.object_id = sys.tables.object_id\n    where sys.indexes.[name] is not null\n      and sys.indexes.type_desc = 'XML'\n      and sys.tables.[name] = '{{ this.table }}'\n    for xml path('')\n); exec sp_executesql @drop_xml_indexes;\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720537836.0373669, "supported_languages": null}, "macro.dbt_sqlserver.drop_spatial_indexes": {"name": "drop_spatial_indexes", "resource_type": "macro", "package_name": "dbt_sqlserver", "path": "macros\\adapters\\indexes.sql", "original_file_path": "macros\\adapters\\indexes.sql", "unique_id": "macro.dbt_sqlserver.drop_spatial_indexes", "macro_sql": "{% macro drop_spatial_indexes() -%}\n{# Altered from https://stackoverflow.com/q/1344401/10415173 #}\n{# and https://stackoverflow.com/a/33785833/10415173         #}\n\n{{ log(\"Running drop_spatial_indexes() macro...\") }}\n\ndeclare @drop_spatial_indexes nvarchar(max);\nselect @drop_spatial_indexes = (\n    select 'IF INDEXPROPERTY(' + CONVERT(VARCHAR(MAX), sys.tables.[object_id]) + ', ''' + sys.indexes.[name] + ''', ''IndexId'') IS NOT NULL DROP INDEX [' + sys.indexes.[name] + '] ON ' + '[' + SCHEMA_NAME(sys.tables.[schema_id]) + '].[' + OBJECT_NAME(sys.tables.[object_id]) + ']; '\n    from sys.indexes\n    inner join sys.tables on sys.indexes.object_id = sys.tables.object_id\n    where sys.indexes.[name] is not null\n      and sys.indexes.type_desc = 'Spatial'\n      and sys.tables.[name] = '{{ this.table }}'\n    for xml path('')\n); exec sp_executesql @drop_spatial_indexes;\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720537836.0373669, "supported_languages": null}, "macro.dbt_sqlserver.drop_fk_constraints": {"name": "drop_fk_constraints", "resource_type": "macro", "package_name": "dbt_sqlserver", "path": "macros\\adapters\\indexes.sql", "original_file_path": "macros\\adapters\\indexes.sql", "unique_id": "macro.dbt_sqlserver.drop_fk_constraints", "macro_sql": "{% macro drop_fk_constraints() -%}\n{# Altered from https://stackoverflow.com/q/1344401/10415173 #}\n\n{{ log(\"Running drop_fk_constraints() macro...\") }}\n\ndeclare @drop_fk_constraints nvarchar(max);\nselect @drop_fk_constraints = (\n    select 'IF OBJECT_ID(''' + SCHEMA_NAME(CONVERT(VARCHAR(MAX), sys.foreign_keys.[schema_id])) + '.' + sys.foreign_keys.[name] + ''', ''F'') IS NOT NULL ALTER TABLE [' + SCHEMA_NAME(sys.foreign_keys.[schema_id]) + '].[' + OBJECT_NAME(sys.foreign_keys.[parent_object_id]) + '] DROP CONSTRAINT [' + sys.foreign_keys.[name]+ '];'\n    from sys.foreign_keys\n    inner join sys.tables on sys.foreign_keys.[referenced_object_id] = sys.tables.[object_id]\n    where sys.tables.[name] = '{{ this.table }}'\n    for xml path('')\n); exec sp_executesql @drop_fk_constraints;\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720537836.0373669, "supported_languages": null}, "macro.dbt_sqlserver.drop_pk_constraints": {"name": "drop_pk_constraints", "resource_type": "macro", "package_name": "dbt_sqlserver", "path": "macros\\adapters\\indexes.sql", "original_file_path": "macros\\adapters\\indexes.sql", "unique_id": "macro.dbt_sqlserver.drop_pk_constraints", "macro_sql": "{% macro drop_pk_constraints() -%}\n{# Altered from https://stackoverflow.com/q/1344401/10415173 #}\n{# and https://stackoverflow.com/a/33785833/10415173         #}\n\n{{ drop_xml_indexes() }}\n\n{{ drop_spatial_indexes() }}\n\n{{ drop_fk_constraints() }}\n\n{{ log(\"Running drop_pk_constraints() macro...\") }}\n\ndeclare @drop_pk_constraints nvarchar(max);\nselect @drop_pk_constraints = (\n    select 'IF INDEXPROPERTY(' + CONVERT(VARCHAR(MAX), sys.tables.[object_id]) + ', ''' + sys.indexes.[name] + ''', ''IndexId'') IS NOT NULL ALTER TABLE [' + SCHEMA_NAME(sys.tables.[schema_id]) + '].[' + sys.tables.[name] + '] DROP CONSTRAINT [' + sys.indexes.[name]+ '];'\n    from sys.indexes\n    inner join sys.tables on sys.indexes.[object_id] = sys.tables.[object_id]\n    where sys.indexes.is_primary_key = 1\n      and sys.tables.[name] = '{{ this.table }}'\n    for xml path('')\n); exec sp_executesql @drop_pk_constraints;\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_sqlserver.drop_xml_indexes", "macro.dbt_sqlserver.drop_spatial_indexes", "macro.dbt_sqlserver.drop_fk_constraints"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720537836.0373669, "supported_languages": null}, "macro.dbt_sqlserver.drop_all_indexes_on_table": {"name": "drop_all_indexes_on_table", "resource_type": "macro", "package_name": "dbt_sqlserver", "path": "macros\\adapters\\indexes.sql", "original_file_path": "macros\\adapters\\indexes.sql", "unique_id": "macro.dbt_sqlserver.drop_all_indexes_on_table", "macro_sql": "{% macro drop_all_indexes_on_table() -%}\n{# Altered from https://stackoverflow.com/q/1344401/10415173 #}\n{# and https://stackoverflow.com/a/33785833/10415173         #}\n\n{{ drop_pk_constraints() }}\n\n{{ log(\"Dropping remaining indexes...\") }}\n\ndeclare @drop_remaining_indexes_last nvarchar(max);\nselect @drop_remaining_indexes_last = (\n    select 'IF INDEXPROPERTY(' + CONVERT(VARCHAR(MAX), sys.tables.[object_id]) + ', ''' + sys.indexes.[name] + ''', ''IndexId'') IS NOT NULL DROP INDEX [' + sys.indexes.[name] + '] ON ' + '[' + SCHEMA_NAME(sys.tables.[schema_id]) + '].[' + OBJECT_NAME(sys.tables.[object_id]) + ']; '\n    from sys.indexes\n    inner join sys.tables on sys.indexes.object_id = sys.tables.object_id\n    where sys.indexes.[name] is not null\n      and sys.tables.[name] = '{{ this.table }}'\n    for xml path('')\n); exec sp_executesql @drop_remaining_indexes_last;\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_sqlserver.drop_pk_constraints"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720537836.0373669, "supported_languages": null}, "macro.dbt_sqlserver.create_clustered_index": {"name": "create_clustered_index", "resource_type": "macro", "package_name": "dbt_sqlserver", "path": "macros\\adapters\\indexes.sql", "original_file_path": "macros\\adapters\\indexes.sql", "unique_id": "macro.dbt_sqlserver.create_clustered_index", "macro_sql": "{% macro create_clustered_index(columns, unique=False) -%}\n\n{{ log(\"Creating clustered index...\") }}\n\n{% set idx_name = this.table + '__clustered_index_on_' + columns|join('_') %}\n\nif not exists(select * from sys.indexes\n                where\n                name = '{{ idx_name }}' and\n                object_id = OBJECT_ID('{{ this }}')\n)\nbegin\n\ncreate\n{% if unique -%}\nunique\n{% endif %}\nclustered index\n    {{ idx_name }}\n      on {{ this }} ({{ '[' + columns|join(\"], [\") + ']' }})\nend\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720537836.0373669, "supported_languages": null}, "macro.dbt_sqlserver.create_nonclustered_index": {"name": "create_nonclustered_index", "resource_type": "macro", "package_name": "dbt_sqlserver", "path": "macros\\adapters\\indexes.sql", "original_file_path": "macros\\adapters\\indexes.sql", "unique_id": "macro.dbt_sqlserver.create_nonclustered_index", "macro_sql": "{% macro create_nonclustered_index(columns, includes=False) %}\n\n{{ log(\"Creating nonclustered index...\") }}\n\n{% if includes -%}\n  {% set idx_name = this.table + '__index_on_' + columns|join('_')|replace(\" \", \"_\") + '_includes_' + includes|join('_')|replace(\" \", \"_\") %}\n{% else -%}\n  {% set idx_name = this.table + '__index_on_' + columns|join('_')|replace(\" \", \"_\") %}\n{% endif %}\n\nif not exists(select * from sys.indexes\n                where\n                name = '{{ idx_name }}' and\n                object_id = OBJECT_ID('{{ this }}')\n)\nbegin\ncreate nonclustered index\n    {{ idx_name }}\n      on {{ this }} ({{ '[' + columns|join(\"], [\") + ']' }})\n      {% if includes -%}\n        include ({{ '[' + includes|join(\"], [\") + ']' }})\n      {% endif %}\nend\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720537836.0535996, "supported_languages": null}, "macro.dbt_sqlserver.sqlserver__get_catalog": {"name": "sqlserver__get_catalog", "resource_type": "macro", "package_name": "dbt_sqlserver", "path": "macros\\adapters\\metadata.sql", "original_file_path": "macros\\adapters\\metadata.sql", "unique_id": "macro.dbt_sqlserver.sqlserver__get_catalog", "macro_sql": "{% macro sqlserver__get_catalog(information_schemas, schemas) -%}\n\n  {%- call statement('catalog', fetch_result=True) -%}\n\n    with\n    principals as (\n        select\n            name as principal_name,\n            principal_id as principal_id\n        from\n            sys.database_principals\n    ),\n\n    schemas as (\n        select\n            name as schema_name,\n            schema_id as schema_id,\n            principal_id as principal_id\n        from\n            sys.schemas\n    ),\n\n    tables as (\n        select\n            name as table_name,\n            schema_id as schema_id,\n            principal_id as principal_id,\n            'BASE TABLE' as table_type\n        from\n            sys.tables\n    ),\n\n    tables_with_metadata as (\n        select\n            table_name,\n            schema_name,\n            coalesce(tables.principal_id, schemas.principal_id) as owner_principal_id,\n            table_type\n        from\n            tables\n        join schemas on tables.schema_id = schemas.schema_id\n    ),\n\n    views as (\n        select\n            name as table_name,\n            schema_id as schema_id,\n            principal_id as principal_id,\n            'VIEW' as table_type\n        from\n            sys.views\n    ),\n\n    views_with_metadata as (\n        select\n            table_name,\n            schema_name,\n            coalesce(views.principal_id, schemas.principal_id) as owner_principal_id,\n            table_type\n        from\n            views\n        join schemas on views.schema_id = schemas.schema_id\n    ),\n\n    tables_and_views as (\n        select\n            table_name,\n            schema_name,\n            principal_name,\n            table_type\n        from\n            tables_with_metadata\n        join principals on tables_with_metadata.owner_principal_id = principals.principal_id\n        union all\n        select\n            table_name,\n            schema_name,\n            principal_name,\n            table_type\n        from\n            views_with_metadata\n        join principals on views_with_metadata.owner_principal_id = principals.principal_id\n    ),\n\n    cols as (\n\n        select\n            table_catalog as table_database,\n            table_schema,\n            table_name,\n            column_name,\n            ordinal_position as column_index,\n            data_type as column_type\n        from INFORMATION_SCHEMA.COLUMNS with (nolock)\n\n    )\n\n    select\n        cols.table_database,\n        tv.schema_name as table_schema,\n        tv.table_name,\n        tv.table_type,\n        null as table_comment,\n        tv.principal_name as table_owner,\n        cols.column_name,\n        cols.column_index,\n        cols.column_type,\n        null as column_comment\n    from tables_and_views tv\n             join cols on tv.schema_name = cols.table_schema and tv.table_name = cols.table_name\n    order by column_index\n\n    {%- endcall -%}\n\n  {{ return(load_result('catalog').table) }}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720537836.0535996, "supported_languages": null}, "macro.dbt_sqlserver.sqlserver__information_schema_name": {"name": "sqlserver__information_schema_name", "resource_type": "macro", "package_name": "dbt_sqlserver", "path": "macros\\adapters\\metadata.sql", "original_file_path": "macros\\adapters\\metadata.sql", "unique_id": "macro.dbt_sqlserver.sqlserver__information_schema_name", "macro_sql": "{% macro sqlserver__information_schema_name(database) -%}\n  {%- if database -%}\n    [{{ database }}].INFORMATION_SCHEMA\n  {%- else -%}\n    INFORMATION_SCHEMA\n  {%- endif -%}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720537836.0535996, "supported_languages": null}, "macro.dbt_sqlserver.sqlserver__list_schemas": {"name": "sqlserver__list_schemas", "resource_type": "macro", "package_name": "dbt_sqlserver", "path": "macros\\adapters\\metadata.sql", "original_file_path": "macros\\adapters\\metadata.sql", "unique_id": "macro.dbt_sqlserver.sqlserver__list_schemas", "macro_sql": "{% macro sqlserver__list_schemas(database) %}\n  {% call statement('list_schemas', fetch_result=True, auto_begin=False) -%}\n    USE {{ database }};\n    select  name as [schema]\n    from sys.schemas with (nolock)\n  {% endcall %}\n  {{ return(load_result('list_schemas').table) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720537836.0636168, "supported_languages": null}, "macro.dbt_sqlserver.sqlserver__check_schema_exists": {"name": "sqlserver__check_schema_exists", "resource_type": "macro", "package_name": "dbt_sqlserver", "path": "macros\\adapters\\metadata.sql", "original_file_path": "macros\\adapters\\metadata.sql", "unique_id": "macro.dbt_sqlserver.sqlserver__check_schema_exists", "macro_sql": "{% macro sqlserver__check_schema_exists(information_schema, schema) -%}\n  {% call statement('check_schema_exists', fetch_result=True, auto_begin=False) -%}\n    --USE {{ database_name }}\n    SELECT count(*) as schema_exist FROM sys.schemas WHERE name = '{{ schema }}'\n  {%- endcall %}\n  {{ return(load_result('check_schema_exists').table) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720537836.0636168, "supported_languages": null}, "macro.dbt_sqlserver.sqlserver__list_relations_without_caching": {"name": "sqlserver__list_relations_without_caching", "resource_type": "macro", "package_name": "dbt_sqlserver", "path": "macros\\adapters\\metadata.sql", "original_file_path": "macros\\adapters\\metadata.sql", "unique_id": "macro.dbt_sqlserver.sqlserver__list_relations_without_caching", "macro_sql": "{% macro sqlserver__list_relations_without_caching(schema_relation) %}\n  {% call statement('list_relations_without_caching', fetch_result=True) -%}\n    select\n      table_catalog as [database],\n      table_name as [name],\n      table_schema as [schema],\n      case when table_type = 'BASE TABLE' then 'table'\n           when table_type = 'VIEW' then 'view'\n           else table_type\n      end as table_type\n\n    from [{{ schema_relation.database }}].INFORMATION_SCHEMA.TABLES with (nolock)\n    where table_schema like '{{ schema_relation.schema }}'\n  {% endcall %}\n  {{ return(load_result('list_relations_without_caching').table) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720537836.0636168, "supported_languages": null}, "macro.dbt_sqlserver.sqlserver__make_temp_relation": {"name": "sqlserver__make_temp_relation", "resource_type": "macro", "package_name": "dbt_sqlserver", "path": "macros\\adapters\\relation.sql", "original_file_path": "macros\\adapters\\relation.sql", "unique_id": "macro.dbt_sqlserver.sqlserver__make_temp_relation", "macro_sql": "{% macro sqlserver__make_temp_relation(base_relation, suffix) %}\n    {%- set temp_identifier = '#' ~ base_relation.identifier ~ suffix -%}\n    {%- set temp_relation = base_relation.incorporate(\n                                path={\"identifier\": temp_identifier}) -%}\n\n    {{ return(temp_relation) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720537836.0676389, "supported_languages": null}, "macro.dbt_sqlserver.sqlserver__drop_relation": {"name": "sqlserver__drop_relation", "resource_type": "macro", "package_name": "dbt_sqlserver", "path": "macros\\adapters\\relation.sql", "original_file_path": "macros\\adapters\\relation.sql", "unique_id": "macro.dbt_sqlserver.sqlserver__drop_relation", "macro_sql": "{% macro sqlserver__drop_relation(relation) -%}\n  {% call statement('drop_relation', auto_begin=False) -%}\n    {{ sqlserver__drop_relation_script(relation) }}\n  {%- endcall %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt_sqlserver.sqlserver__drop_relation_script"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720537836.0676389, "supported_languages": null}, "macro.dbt_sqlserver.sqlserver__drop_relation_script": {"name": "sqlserver__drop_relation_script", "resource_type": "macro", "package_name": "dbt_sqlserver", "path": "macros\\adapters\\relation.sql", "original_file_path": "macros\\adapters\\relation.sql", "unique_id": "macro.dbt_sqlserver.sqlserver__drop_relation_script", "macro_sql": "{% macro sqlserver__drop_relation_script(relation) -%}\n    {% call statement('find_references', fetch_result=true) %}\n        USE [{{ relation.database }}];\n        SELECT referencing_schema_name, referencing_entity_name\n        FROM sys.dm_sql_referencing_entities ('{{ relation.include(database=false) }}', 'object')\n    {% endcall %}\n    {% set references = load_result('find_references')['data'] %}\n    {% for reference in references -%}\n        -- dropping referenced view {{ reference[0] }}.{{ reference[1] }}\n        {{ sqlserver__drop_relation_script(relation.incorporate(\n            type=\"view\",\n            path={\"schema\": reference[0], \"identifier\": reference[1]})) }}\n    {% endfor %}\n    {% if relation.type == 'view' -%}\n        {% set object_id_type = 'V' %}\n    {% elif relation.type == 'table'%}\n        {% set object_id_type = 'U' %}\n    {%- else -%}\n        {{ exceptions.raise_not_implemented('Invalid relation being dropped: ' ~ relation) }}\n    {% endif %}\n    USE [{{ relation.database }}];\n    if object_id ('{{ relation.include(database=False) }}','{{ object_id_type }}') is not null\n        begin\n            drop {{ relation.type }} {{ relation.include(database=False) }}\n        end\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720537836.0676389, "supported_languages": null}, "macro.dbt_sqlserver.sqlserver__rename_relation": {"name": "sqlserver__rename_relation", "resource_type": "macro", "package_name": "dbt_sqlserver", "path": "macros\\adapters\\relation.sql", "original_file_path": "macros\\adapters\\relation.sql", "unique_id": "macro.dbt_sqlserver.sqlserver__rename_relation", "macro_sql": "{% macro sqlserver__rename_relation(from_relation, to_relation) -%}\n  {% call statement('rename_relation') -%}\n    USE [{{ to_relation.database }}];\n    EXEC sp_rename '{{ from_relation.schema }}.{{ from_relation.identifier }}', '{{ to_relation.identifier }}'\n    IF EXISTS(\n    SELECT *\n    FROM sys.indexes\n    WHERE name='{{ from_relation.schema }}_{{ from_relation.identifier }}_cci' and object_id = OBJECT_ID('{{ from_relation.schema }}.{{ to_relation.identifier }}'))\n    EXEC sp_rename N'{{ from_relation.schema }}.{{ to_relation.identifier }}.{{ from_relation.schema }}_{{ from_relation.identifier }}_cci', N'{{ from_relation.schema }}_{{ to_relation.identifier }}_cci', N'INDEX'\n  {%- endcall %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720537836.0771556, "supported_languages": null}, "macro.dbt_sqlserver.sqlserver__create_schema": {"name": "sqlserver__create_schema", "resource_type": "macro", "package_name": "dbt_sqlserver", "path": "macros\\adapters\\schema.sql", "original_file_path": "macros\\adapters\\schema.sql", "unique_id": "macro.dbt_sqlserver.sqlserver__create_schema", "macro_sql": "{% macro sqlserver__create_schema(relation) -%}\n  {% call statement('create_schema') -%}\n    USE [{{ relation.database }}];\n    IF NOT EXISTS (SELECT * FROM sys.schemas WHERE name = '{{ relation.without_identifier().schema }}')\n    BEGIN\n    EXEC('CREATE SCHEMA [{{ relation.without_identifier().schema }}]')\n    END\n  {% endcall %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720537836.0771556, "supported_languages": null}, "macro.dbt_sqlserver.sqlserver__drop_schema": {"name": "sqlserver__drop_schema", "resource_type": "macro", "package_name": "dbt_sqlserver", "path": "macros\\adapters\\schema.sql", "original_file_path": "macros\\adapters\\schema.sql", "unique_id": "macro.dbt_sqlserver.sqlserver__drop_schema", "macro_sql": "{% macro sqlserver__drop_schema(relation) -%}\n  {%- set relations_in_schema = list_relations_without_caching(relation) %}\n\n  {% for row in relations_in_schema %}\n    {%- set schema_relation = api.Relation.create(database=relation.database,\n                                               schema=relation.schema,\n                                               identifier=row[1],\n                                               type=row[3]\n                                               ) -%}\n    {% do drop_relation(schema_relation) %}\n  {%- endfor %}\n\n  {% call statement('drop_schema') -%}\n      IF EXISTS (SELECT * FROM sys.schemas WHERE name = '{{ relation.schema }}')\n      BEGIN\n      EXEC('DROP SCHEMA {{ relation.schema }}')\n      END  {% endcall %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.list_relations_without_caching", "macro.dbt.drop_relation", "macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720537836.0771556, "supported_languages": null}, "macro.dbt_sqlserver.sqlserver__get_incremental_default_sql": {"name": "sqlserver__get_incremental_default_sql", "resource_type": "macro", "package_name": "dbt_sqlserver", "path": "macros\\materializations\\models\\incremental\\incremental_strategies.sql", "original_file_path": "macros\\materializations\\models\\incremental\\incremental_strategies.sql", "unique_id": "macro.dbt_sqlserver.sqlserver__get_incremental_default_sql", "macro_sql": "{% macro sqlserver__get_incremental_default_sql(arg_dict) %}\n\n    {% if arg_dict[\"unique_key\"] %}\n        {% do return(get_incremental_delete_insert_sql(arg_dict)) %}\n    {% else %}\n        {% do return(get_incremental_append_sql(arg_dict)) %}\n    {% endif %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_incremental_delete_insert_sql", "macro.dbt.get_incremental_append_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720537836.0771556, "supported_languages": null}, "macro.dbt_sqlserver.sqlserver__get_merge_sql": {"name": "sqlserver__get_merge_sql", "resource_type": "macro", "package_name": "dbt_sqlserver", "path": "macros\\materializations\\models\\incremental\\merge.sql", "original_file_path": "macros\\materializations\\models\\incremental\\merge.sql", "unique_id": "macro.dbt_sqlserver.sqlserver__get_merge_sql", "macro_sql": "{% macro sqlserver__get_merge_sql(target, source, unique_key, dest_columns, incremental_predicates=none) %}\n  {{ default__get_merge_sql(target, source, unique_key, dest_columns, incremental_predicates) }};\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720537836.0827217, "supported_languages": null}, "macro.dbt_sqlserver.sqlserver__get_insert_overwrite_merge_sql": {"name": "sqlserver__get_insert_overwrite_merge_sql", "resource_type": "macro", "package_name": "dbt_sqlserver", "path": "macros\\materializations\\models\\incremental\\merge.sql", "original_file_path": "macros\\materializations\\models\\incremental\\merge.sql", "unique_id": "macro.dbt_sqlserver.sqlserver__get_insert_overwrite_merge_sql", "macro_sql": "{% macro sqlserver__get_insert_overwrite_merge_sql(target, source, dest_columns, predicates, include_sql_header) %}\n  {{ default__get_insert_overwrite_merge_sql(target, source, dest_columns, predicates, include_sql_header) }};\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_insert_overwrite_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720537836.0827217, "supported_languages": null}, "macro.dbt_sqlserver.sqlserver__get_delete_insert_merge_sql": {"name": "sqlserver__get_delete_insert_merge_sql", "resource_type": "macro", "package_name": "dbt_sqlserver", "path": "macros\\materializations\\models\\incremental\\merge.sql", "original_file_path": "macros\\materializations\\models\\incremental\\merge.sql", "unique_id": "macro.dbt_sqlserver.sqlserver__get_delete_insert_merge_sql", "macro_sql": "{% macro sqlserver__get_delete_insert_merge_sql(target, source, unique_key, dest_columns, incremental_predicates=none) %}\n    {%- set dest_cols_csv = get_quoted_csv(dest_columns | map(attribute=\"name\")) -%}\n\n    {% if unique_key %}\n        {% if unique_key is sequence and unique_key is not string %}\n            delete from {{ target }}\n            where exists (\n                select null\n                from {{ source }}\n                where\n                {% for key in unique_key %}\n                    {{ source }}.{{ key }} = {{ target }}.{{ key }}\n                    {{ \"and \" if not loop.last }}\n                {% endfor %}\n\n            )\n            {% if incremental_predicates %}\n                {% for predicate in incremental_predicates %}\n                    and {{ predicate }}\n                {% endfor %}\n            {% endif %};\n        {% else %}\n            delete from {{ target }}\n            where (\n                {{ unique_key }}) in (\n                select ({{ unique_key }})\n                from {{ source }}\n            )\n            {%- if incremental_predicates %}\n                {% for predicate in incremental_predicates %}\n                    and {{ predicate }}\n                {% endfor %}\n            {%- endif -%};\n        {% endif %}\n    {% endif %}\n\n    insert into {{ target }} ({{ dest_cols_csv }})\n    (\n        select {{ dest_cols_csv }}\n        from {{ source }}\n    )\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_quoted_csv"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720537836.0827217, "supported_languages": null}, "macro.dbt_sqlserver.sqlserver__create_table_as": {"name": "sqlserver__create_table_as", "resource_type": "macro", "package_name": "dbt_sqlserver", "path": "macros\\materializations\\models\\table\\create_table_as.sql", "original_file_path": "macros\\materializations\\models\\table\\create_table_as.sql", "unique_id": "macro.dbt_sqlserver.sqlserver__create_table_as", "macro_sql": "{% macro sqlserver__create_table_as(temporary, relation, sql) -%}\n   {#- TODO: add contracts here when in dbt 1.5 -#}\n   {%- set sql_header = config.get('sql_header', none) -%}\n   {%- set as_columnstore = config.get('as_columnstore', default=true) -%}\n   {%- set temp_view_sql = sql.replace(\"'\", \"''\") -%}\n   {%- set tmp_relation = relation.incorporate(\n        path={\"identifier\": relation.identifier.replace(\"#\", \"\") ~ '_temp_view'},\n        type='view') -%}\n\n   {{- sql_header if sql_header is not none -}}\n\n    -- drop previous temp view\n   {{- sqlserver__drop_relation_script(tmp_relation) }}\n\n    -- create temp view\n   USE [{{ relation.database }}];\n   EXEC('create view {{ tmp_relation.include(database=False) }} as\n    {{ temp_view_sql }}\n    ');\n\n   -- select into the table and create it that way\n   {# TempDB schema is ignored, always goes to dbo #}\n   SELECT *\n   INTO {{ relation.include(database=False, schema=(not temporary))  }}\n   FROM {{ tmp_relation }}\n\n   -- drop temp view\n   {{ sqlserver__drop_relation_script(tmp_relation) }}\n\n   {%- if not temporary and as_columnstore -%}\n        -- add columnstore index\n        {{ sqlserver__create_clustered_columnstore_index(relation) }}\n   {%- endif -%}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.replace", "macro.dbt_sqlserver.sqlserver__drop_relation_script", "macro.dbt_sqlserver.sqlserver__create_clustered_columnstore_index"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720537836.0827217, "supported_languages": null}, "macro.dbt_sqlserver.sqlserver__create_view_as": {"name": "sqlserver__create_view_as", "resource_type": "macro", "package_name": "dbt_sqlserver", "path": "macros\\materializations\\models\\view\\create_view_as.sql", "original_file_path": "macros\\materializations\\models\\view\\create_view_as.sql", "unique_id": "macro.dbt_sqlserver.sqlserver__create_view_as", "macro_sql": "{% macro sqlserver__create_view_as(relation, sql) -%}\n    {%- set sql_header = config.get('sql_header', none) -%}\n    {{ sql_header if sql_header is not none }}\n    USE [{{ relation.database }}];\n    {{ sqlserver__create_view_exec(relation, sql) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_sqlserver.sqlserver__create_view_exec"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720537836.0827217, "supported_languages": null}, "macro.dbt_sqlserver.sqlserver__create_view_exec": {"name": "sqlserver__create_view_exec", "resource_type": "macro", "package_name": "dbt_sqlserver", "path": "macros\\materializations\\models\\view\\create_view_as.sql", "original_file_path": "macros\\materializations\\models\\view\\create_view_as.sql", "unique_id": "macro.dbt_sqlserver.sqlserver__create_view_exec", "macro_sql": "{% macro sqlserver__create_view_exec(relation, sql) -%}\n    {#- TODO: add contracts here when in dbt 1.5 -#}\n    {%- set temp_view_sql = sql.replace(\"'\", \"''\") -%}\n    execute('create view {{ relation.include(database=False) }} as\n        {{ temp_view_sql }}\n    ');\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.replace"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720537836.0827217, "supported_languages": null}, "macro.dbt_sqlserver.calc_batch_size": {"name": "calc_batch_size", "resource_type": "macro", "package_name": "dbt_sqlserver", "path": "macros\\materializations\\seeds\\helpers.sql", "original_file_path": "macros\\materializations\\seeds\\helpers.sql", "unique_id": "macro.dbt_sqlserver.calc_batch_size", "macro_sql": "{% macro calc_batch_size(num_columns,max_batch_size) %}\n    {#\n        SQL Server allows for a max of 2100 parameters in a single statement.\n        Check if the max_batch_size fits with the number of columns, otherwise\n        reduce the batch size so it fits.\n    #}\n    {% if num_columns * max_batch_size < 2100 %}\n    {% set batch_size = max_batch_size %}\n    {% else %}\n    {% set batch_size = (2100 / num_columns)|int %}\n    {% endif %}\n\n    {{ return(batch_size) }}\n{%  endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720537836.0978165, "supported_languages": null}, "macro.dbt_sqlserver.sqlserver__get_binding_char": {"name": "sqlserver__get_binding_char", "resource_type": "macro", "package_name": "dbt_sqlserver", "path": "macros\\materializations\\seeds\\helpers.sql", "original_file_path": "macros\\materializations\\seeds\\helpers.sql", "unique_id": "macro.dbt_sqlserver.sqlserver__get_binding_char", "macro_sql": "{% macro sqlserver__get_binding_char() %}\n  {{ return('?') }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720537836.0978165, "supported_languages": null}, "macro.dbt_sqlserver.sqlserver__get_batch_size": {"name": "sqlserver__get_batch_size", "resource_type": "macro", "package_name": "dbt_sqlserver", "path": "macros\\materializations\\seeds\\helpers.sql", "original_file_path": "macros\\materializations\\seeds\\helpers.sql", "unique_id": "macro.dbt_sqlserver.sqlserver__get_batch_size", "macro_sql": "{% macro sqlserver__get_batch_size() %}\n  {{ return(400) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720537836.0978165, "supported_languages": null}, "macro.dbt_sqlserver.basic_load_csv_rows": {"name": "basic_load_csv_rows", "resource_type": "macro", "package_name": "dbt_sqlserver", "path": "macros\\materializations\\seeds\\helpers.sql", "original_file_path": "macros\\materializations\\seeds\\helpers.sql", "unique_id": "macro.dbt_sqlserver.basic_load_csv_rows", "macro_sql": "{% macro basic_load_csv_rows(model, batch_size, agate_table) %}\n\n  {% set cols_sql = get_seed_column_quoted_csv(model, agate_table.column_names) %}\n  {% set bindings = [] %}\n\n  {% set statements = [] %}\n\n  {% for chunk in agate_table.rows | batch(batch_size) %}\n      {% set bindings = [] %}\n\n      {% for row in chunk %}\n          {% do bindings.extend(row) %}\n      {% endfor %}\n\n      {% set sql %}\n          insert into {{ this.render() }} ({{ cols_sql }}) values\n          {% for row in chunk -%}\n              ({%- for column in agate_table.column_names -%}\n                  {{ get_binding_char() }}\n                  {%- if not loop.last%},{%- endif %}\n              {%- endfor -%})\n              {%- if not loop.last%},{%- endif %}\n          {%- endfor %}\n      {% endset %}\n\n      {% do adapter.add_query(sql, bindings=bindings, abridge_sql_log=True) %}\n\n      {% if loop.index0 == 0 %}\n          {% do statements.append(sql) %}\n      {% endif %}\n  {% endfor %}\n\n  {# Return SQL so we can render it out into the compiled files #}\n  {{ return(statements[0]) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_seed_column_quoted_csv", "macro.dbt.get_binding_char"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720537836.0978165, "supported_languages": null}, "macro.dbt_sqlserver.sqlserver__load_csv_rows": {"name": "sqlserver__load_csv_rows", "resource_type": "macro", "package_name": "dbt_sqlserver", "path": "macros\\materializations\\seeds\\helpers.sql", "original_file_path": "macros\\materializations\\seeds\\helpers.sql", "unique_id": "macro.dbt_sqlserver.sqlserver__load_csv_rows", "macro_sql": "{% macro sqlserver__load_csv_rows(model, agate_table) %}\n  {% set max_batch_size = get_batch_size() %}\n  {% set cols_sql = get_seed_column_quoted_csv(model, agate_table.column_names) %}\n  {% set batch_size = calc_batch_size(cols_sql|length, max_batch_size) %}\n\n  {{ return(basic_load_csv_rows(model, batch_size, agate_table) )}}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_batch_size", "macro.dbt.get_seed_column_quoted_csv", "macro.dbt_sqlserver.calc_batch_size", "macro.dbt_sqlserver.basic_load_csv_rows"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720537836.0978165, "supported_languages": null}, "macro.dbt_sqlserver.sqlserver__post_snapshot": {"name": "sqlserver__post_snapshot", "resource_type": "macro", "package_name": "dbt_sqlserver", "path": "macros\\materializations\\snapshots\\snapshot.sql", "original_file_path": "macros\\materializations\\snapshots\\snapshot.sql", "unique_id": "macro.dbt_sqlserver.sqlserver__post_snapshot", "macro_sql": "{% macro sqlserver__post_snapshot(staging_relation) %}\n  -- Clean up the snapshot temp table\n  {% do drop_relation(staging_relation) %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.drop_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720537836.0978165, "supported_languages": null}, "macro.dbt_sqlserver.sqlserver__create_columns": {"name": "sqlserver__create_columns", "resource_type": "macro", "package_name": "dbt_sqlserver", "path": "macros\\materializations\\snapshots\\snapshot.sql", "original_file_path": "macros\\materializations\\snapshots\\snapshot.sql", "unique_id": "macro.dbt_sqlserver.sqlserver__create_columns", "macro_sql": "{% macro sqlserver__create_columns(relation, columns) %}\n  {# default__ macro uses \"add column\"\n     TSQL preferes just \"add\"\n  #}\n  {% for column in columns %}\n    {% call statement() %}\n      alter table {{ relation }} add \"{{ column.name }}\" {{ column.data_type }};\n    {% endcall %}\n  {% endfor %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720537836.0978165, "supported_languages": null}, "macro.dbt_sqlserver.sqlserver__get_true_sql": {"name": "sqlserver__get_true_sql", "resource_type": "macro", "package_name": "dbt_sqlserver", "path": "macros\\materializations\\snapshots\\snapshot.sql", "original_file_path": "macros\\materializations\\snapshots\\snapshot.sql", "unique_id": "macro.dbt_sqlserver.sqlserver__get_true_sql", "macro_sql": "{% macro sqlserver__get_true_sql() %}\n  {{ return('1=1') }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720537836.0978165, "supported_languages": null}, "macro.dbt_sqlserver.sqlserver__snapshot_merge_sql": {"name": "sqlserver__snapshot_merge_sql", "resource_type": "macro", "package_name": "dbt_sqlserver", "path": "macros\\materializations\\snapshots\\snapshot_merge.sql", "original_file_path": "macros\\materializations\\snapshots\\snapshot_merge.sql", "unique_id": "macro.dbt_sqlserver.sqlserver__snapshot_merge_sql", "macro_sql": "{% macro sqlserver__snapshot_merge_sql(target, source, insert_cols) %}\n  {{ default__snapshot_merge_sql(target, source, insert_cols) }};\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__snapshot_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720537836.0978165, "supported_languages": null}, "macro.dbt_sqlserver.sqlserver__snapshot_hash_arguments": {"name": "sqlserver__snapshot_hash_arguments", "resource_type": "macro", "package_name": "dbt_sqlserver", "path": "macros\\materializations\\snapshots\\strategies.sql", "original_file_path": "macros\\materializations\\snapshots\\strategies.sql", "unique_id": "macro.dbt_sqlserver.sqlserver__snapshot_hash_arguments", "macro_sql": "{% macro sqlserver__snapshot_hash_arguments(args) %}\n    CONVERT(VARCHAR(32), HashBytes('MD5', {% for arg in args %}\n        coalesce(cast({{ arg }} as varchar(max)), '') {% if not loop.last %} + '|' + {% endif %}\n    {% endfor %}), 2)\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720537836.113068, "supported_languages": null}, "macro.dbt_sqlserver.sqlserver__get_test_sql": {"name": "sqlserver__get_test_sql", "resource_type": "macro", "package_name": "dbt_sqlserver", "path": "macros\\materializations\\tests\\helpers.sql", "original_file_path": "macros\\materializations\\tests\\helpers.sql", "unique_id": "macro.dbt_sqlserver.sqlserver__get_test_sql", "macro_sql": "{% macro sqlserver__get_test_sql(main_sql, fail_calc, warn_if, error_if, limit) -%}\n    select\n      {{ \"top (\" ~ limit ~ ')' if limit != none }}\n      {{ fail_calc }} as failures,\n      case when {{ fail_calc }} {{ warn_if }}\n        then 'true' else 'false' end as should_warn,\n      case when {{ fail_calc }} {{ error_if }}\n        then 'true' else 'false' end as should_error\n    from (\n      {{ main_sql }}\n    ) dbt_internal_test\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720537836.113068, "supported_languages": null}, "macro.dbt_sqlserver.materialization_test_sqlserver": {"name": "materialization_test_sqlserver", "resource_type": "macro", "package_name": "dbt_sqlserver", "path": "macros\\materializations\\tests\\test.sql", "original_file_path": "macros\\materializations\\tests\\test.sql", "unique_id": "macro.dbt_sqlserver.materialization_test_sqlserver", "macro_sql": "{%- materialization test, adapter='sqlserver' -%}\n\n  {% set relations = [] %}\n\n  {% set identifier = model['alias'] %}\n  {% set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) %}\n  {% set target_relation = api.Relation.create(\n      identifier=identifier, schema=schema, database=database, type='table') -%} %}\n\n\n  {% if old_relation %}\n    {% do adapter.drop_relation(old_relation) %}\n  {% elif not old_relation %}\n    {% do adapter.create_schema(target_relation) %}\n  {% endif %}\n\n  {% call statement(auto_begin=True) %}\n      {{ create_table_as(False, target_relation, sql) }}\n  {% endcall %}\n\n  {% set main_sql %}\n      select *\n      from {{ target_relation }}\n  {% endset %}\n\n  {{ adapter.commit() }}\n\n\n  {% set limit = config.get('limit') %}\n  {% set fail_calc = config.get('fail_calc') %}\n  {% set warn_if = config.get('warn_if') %}\n  {% set error_if = config.get('error_if') %}\n\n  {% call statement('main', fetch_result=True) -%}\n\n    {{ get_test_sql(main_sql, fail_calc, warn_if, error_if, limit)}}\n\n  {%- endcall %}\n\n  {% if should_store_failures() %}\n    {% do relations.append(target_relation) %}\n  {% elif not should_store_failures() %}\n    {% do adapter.drop_relation(target_relation) %}\n  {% endif %}\n\n  {{ return({'relations': relations}) }}\n\n{%- endmaterialization -%}", "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt.create_table_as", "macro.dbt.get_test_sql", "macro.dbt.should_store_failures"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720537836.113068, "supported_languages": ["sql"]}, "macro.dbt_sqlserver.sqlserver__any_value": {"name": "sqlserver__any_value", "resource_type": "macro", "package_name": "dbt_sqlserver", "path": "macros\\utils\\any_value.sql", "original_file_path": "macros\\utils\\any_value.sql", "unique_id": "macro.dbt_sqlserver.sqlserver__any_value", "macro_sql": "{% macro sqlserver__any_value(expression) -%}\n\n    min({{ expression }})\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720537836.113068, "supported_languages": null}, "macro.dbt_sqlserver.sqlserver__array_construct": {"name": "sqlserver__array_construct", "resource_type": "macro", "package_name": "dbt_sqlserver", "path": "macros\\utils\\array_construct.sql", "original_file_path": "macros\\utils\\array_construct.sql", "unique_id": "macro.dbt_sqlserver.sqlserver__array_construct", "macro_sql": "{% macro sqlserver__array_construct(inputs, data_type) -%}\n    JSON_ARRAY({{ inputs|join(' , ') }})\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720537836.1228867, "supported_languages": null}, "macro.dbt_sqlserver.sqlserver__cast_bool_to_text": {"name": "sqlserver__cast_bool_to_text", "resource_type": "macro", "package_name": "dbt_sqlserver", "path": "macros\\utils\\cast_bool_to_text.sql", "original_file_path": "macros\\utils\\cast_bool_to_text.sql", "unique_id": "macro.dbt_sqlserver.sqlserver__cast_bool_to_text", "macro_sql": "{% macro sqlserver__cast_bool_to_text(field) %}\n    case {{ field }}\n        when 1 then 'true'\n        when 0 then 'false'\n        else null\n    end\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720537836.1228867, "supported_languages": null}, "macro.dbt_sqlserver.sqlserver__concat": {"name": "sqlserver__concat", "resource_type": "macro", "package_name": "dbt_sqlserver", "path": "macros\\utils\\concat.sql", "original_file_path": "macros\\utils\\concat.sql", "unique_id": "macro.dbt_sqlserver.sqlserver__concat", "macro_sql": "{% macro sqlserver__concat(fields) -%}\n    concat({{ fields|join(', ') }}, '')\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720537836.1228867, "supported_languages": null}, "macro.dbt_sqlserver.sqlserver__dateadd": {"name": "sqlserver__dateadd", "resource_type": "macro", "package_name": "dbt_sqlserver", "path": "macros\\utils\\dateadd.sql", "original_file_path": "macros\\utils\\dateadd.sql", "unique_id": "macro.dbt_sqlserver.sqlserver__dateadd", "macro_sql": "{% macro sqlserver__dateadd(datepart, interval, from_date_or_timestamp) %}\n\n    dateadd(\n        {{ datepart }},\n        {{ interval }},\n        cast({{ from_date_or_timestamp }} as datetime)\n        )\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720537836.1228867, "supported_languages": null}, "macro.dbt_sqlserver.sqlserver__date_trunc": {"name": "sqlserver__date_trunc", "resource_type": "macro", "package_name": "dbt_sqlserver", "path": "macros\\utils\\date_trunc.sql", "original_file_path": "macros\\utils\\date_trunc.sql", "unique_id": "macro.dbt_sqlserver.sqlserver__date_trunc", "macro_sql": "{% macro sqlserver__date_trunc(datepart, date) %}\n    CAST(DATEADD({{datepart}}, DATEDIFF({{datepart}}, 0, {{date}}), 0) AS DATE)\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720537836.1228867, "supported_languages": null}, "macro.dbt_sqlserver.sqlserver__hash": {"name": "sqlserver__hash", "resource_type": "macro", "package_name": "dbt_sqlserver", "path": "macros\\utils\\hash.sql", "original_file_path": "macros\\utils\\hash.sql", "unique_id": "macro.dbt_sqlserver.sqlserver__hash", "macro_sql": "{% macro sqlserver__hash(field) %}\n    convert(varchar(50), hashbytes('md5', {{field}}), 2)\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720537836.1228867, "supported_languages": null}, "macro.dbt_sqlserver.sqlserver__last_day": {"name": "sqlserver__last_day", "resource_type": "macro", "package_name": "dbt_sqlserver", "path": "macros\\utils\\last_day.sql", "original_file_path": "macros\\utils\\last_day.sql", "unique_id": "macro.dbt_sqlserver.sqlserver__last_day", "macro_sql": "{% macro sqlserver__last_day(date, datepart) -%}\n\n    {%- if datepart == 'quarter' -%}\n    \tCAST(DATEADD(QUARTER, DATEDIFF(QUARTER, 0, {{ date }}) + 1, -1) AS DATE)\n    {%- elif datepart == 'month' -%}\n        EOMONTH ( {{ date }})\n    {%- elif datepart == 'year' -%}\n        CAST(DATEADD(YEAR, DATEDIFF(year, 0, {{ date }}) + 1, -1) AS DATE)\n    {%- else -%}\n        {{dbt_utils.default_last_day(date, datepart)}}\n    {%- endif -%}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default_last_day"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720537836.127896, "supported_languages": null}, "macro.dbt_sqlserver.sqlserver__length": {"name": "sqlserver__length", "resource_type": "macro", "package_name": "dbt_sqlserver", "path": "macros\\utils\\length.sql", "original_file_path": "macros\\utils\\length.sql", "unique_id": "macro.dbt_sqlserver.sqlserver__length", "macro_sql": "{% macro sqlserver__length(expression) %}\n\n    len( {{ expression }} )\n\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720537836.127896, "supported_languages": null}, "macro.dbt_sqlserver.sqlserver__listagg": {"name": "sqlserver__listagg", "resource_type": "macro", "package_name": "dbt_sqlserver", "path": "macros\\utils\\listagg.sql", "original_file_path": "macros\\utils\\listagg.sql", "unique_id": "macro.dbt_sqlserver.sqlserver__listagg", "macro_sql": "{% macro sqlserver__listagg(measure, delimiter_text, order_by_clause, limit_num) -%}\n\n    string_agg({{ measure }}, {{ delimiter_text }})\n        {%- if order_by_clause != None %}\n            within group ({{ order_by_clause }})\n        {%- endif %}\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720537836.127896, "supported_languages": null}, "macro.dbt_sqlserver.sqlserver__position": {"name": "sqlserver__position", "resource_type": "macro", "package_name": "dbt_sqlserver", "path": "macros\\utils\\position.sql", "original_file_path": "macros\\utils\\position.sql", "unique_id": "macro.dbt_sqlserver.sqlserver__position", "macro_sql": "{% macro sqlserver__position(substring_text, string_text) %}\n\n    CHARINDEX(\n        {{ substring_text }},\n        {{ string_text }}\n    )\n\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720537836.127896, "supported_languages": null}, "macro.dbt_sqlserver.sqlserver__safe_cast": {"name": "sqlserver__safe_cast", "resource_type": "macro", "package_name": "dbt_sqlserver", "path": "macros\\utils\\safe_cast.sql", "original_file_path": "macros\\utils\\safe_cast.sql", "unique_id": "macro.dbt_sqlserver.sqlserver__safe_cast", "macro_sql": "{% macro sqlserver__safe_cast(field, type) %}\n    try_cast({{field}} as {{type}})\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720537836.127896, "supported_languages": null}, "macro.dbt_sqlserver.sqlserver__split_part": {"name": "sqlserver__split_part", "resource_type": "macro", "package_name": "dbt_sqlserver", "path": "macros\\utils\\split_part.sql", "original_file_path": "macros\\utils\\split_part.sql", "unique_id": "macro.dbt_sqlserver.sqlserver__split_part", "macro_sql": "{% macro sqlserver__split_part(string_text, delimiter_text, part_number) %}\n\n    LTRIM(CAST(('<X>'+REPLACE({{ string_text }},{{ delimiter_text }} ,'</X><X>')+'</X>') AS XML).value('(/X)[{{ part_number }}]', 'VARCHAR(128)'))\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720537836.127896, "supported_languages": null}, "macro.dbt_sqlserver.sqlserver__current_timestamp": {"name": "sqlserver__current_timestamp", "resource_type": "macro", "package_name": "dbt_sqlserver", "path": "macros\\utils\\timestamps.sql", "original_file_path": "macros\\utils\\timestamps.sql", "unique_id": "macro.dbt_sqlserver.sqlserver__current_timestamp", "macro_sql": "{% macro sqlserver__current_timestamp() -%}\n  SYSDATETIME()\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720537836.127896, "supported_languages": null}, "macro.dbt_sqlserver.sqlserver__snapshot_string_as_time": {"name": "sqlserver__snapshot_string_as_time", "resource_type": "macro", "package_name": "dbt_sqlserver", "path": "macros\\utils\\timestamps.sql", "original_file_path": "macros\\utils\\timestamps.sql", "unique_id": "macro.dbt_sqlserver.sqlserver__snapshot_string_as_time", "macro_sql": "{% macro sqlserver__snapshot_string_as_time(timestamp) -%}\n    {%- set result = \"CONVERT(DATETIME2, '\" ~ timestamp ~ \"')\" -%}\n    {{ return(result) }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720537836.127896, "supported_languages": null}, "macro.dbt.copy_grants": {"name": "copy_grants", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\apply_grants.sql", "original_file_path": "macros\\adapters\\apply_grants.sql", "unique_id": "macro.dbt.copy_grants", "macro_sql": "{% macro copy_grants() %}\n    {{ return(adapter.dispatch('copy_grants', 'dbt')()) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__copy_grants"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720537836.127896, "supported_languages": null}, "macro.dbt.default__copy_grants": {"name": "default__copy_grants", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\apply_grants.sql", "original_file_path": "macros\\adapters\\apply_grants.sql", "unique_id": "macro.dbt.default__copy_grants", "macro_sql": "{% macro default__copy_grants() %}\n    {{ return(True) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720537836.127896, "supported_languages": null}, "macro.dbt.support_multiple_grantees_per_dcl_statement": {"name": "support_multiple_grantees_per_dcl_statement", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\apply_grants.sql", "original_file_path": "macros\\adapters\\apply_grants.sql", "unique_id": "macro.dbt.support_multiple_grantees_per_dcl_statement", "macro_sql": "{% macro support_multiple_grantees_per_dcl_statement() %}\n    {{ return(adapter.dispatch('support_multiple_grantees_per_dcl_statement', 'dbt')()) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__support_multiple_grantees_per_dcl_statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720537836.143413, "supported_languages": null}, "macro.dbt.default__support_multiple_grantees_per_dcl_statement": {"name": "default__support_multiple_grantees_per_dcl_statement", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\apply_grants.sql", "original_file_path": "macros\\adapters\\apply_grants.sql", "unique_id": "macro.dbt.default__support_multiple_grantees_per_dcl_statement", "macro_sql": "\n\n{%- macro default__support_multiple_grantees_per_dcl_statement() -%}\n    {{ return(True) }}\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720537836.143413, "supported_languages": null}, "macro.dbt.should_revoke": {"name": "should_revoke", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\apply_grants.sql", "original_file_path": "macros\\adapters\\apply_grants.sql", "unique_id": "macro.dbt.should_revoke", "macro_sql": "{% macro should_revoke(existing_relation, full_refresh_mode=True) %}\n\n    {% if not existing_relation %}\n        {#-- The table doesn't already exist, so no grants to copy over --#}\n        {{ return(False) }}\n    {% elif full_refresh_mode %}\n        {#-- The object is being REPLACED -- whether grants are copied over depends on the value of user config --#}\n        {{ return(copy_grants()) }}\n    {% else %}\n        {#-- The table is being merged/upserted/inserted -- grants will be carried over --#}\n        {{ return(True) }}\n    {% endif %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.copy_grants"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720537836.143413, "supported_languages": null}, "macro.dbt.get_show_grant_sql": {"name": "get_show_grant_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\apply_grants.sql", "original_file_path": "macros\\adapters\\apply_grants.sql", "unique_id": "macro.dbt.get_show_grant_sql", "macro_sql": "{% macro get_show_grant_sql(relation) %}\n    {{ return(adapter.dispatch(\"get_show_grant_sql\", \"dbt\")(relation)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_sqlserver.sqlserver__get_show_grant_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720537836.143413, "supported_languages": null}, "macro.dbt.default__get_show_grant_sql": {"name": "default__get_show_grant_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\apply_grants.sql", "original_file_path": "macros\\adapters\\apply_grants.sql", "unique_id": "macro.dbt.default__get_show_grant_sql", "macro_sql": "{% macro default__get_show_grant_sql(relation) %}\n    show grants on {{ relation }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720537836.143413, "supported_languages": null}, "macro.dbt.get_grant_sql": {"name": "get_grant_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\apply_grants.sql", "original_file_path": "macros\\adapters\\apply_grants.sql", "unique_id": "macro.dbt.get_grant_sql", "macro_sql": "{% macro get_grant_sql(relation, privilege, grantees) %}\n    {{ return(adapter.dispatch('get_grant_sql', 'dbt')(relation, privilege, grantees)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_sqlserver.sqlserver__get_grant_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720537836.143413, "supported_languages": null}, "macro.dbt.default__get_grant_sql": {"name": "default__get_grant_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\apply_grants.sql", "original_file_path": "macros\\adapters\\apply_grants.sql", "unique_id": "macro.dbt.default__get_grant_sql", "macro_sql": "\n\n{%- macro default__get_grant_sql(relation, privilege, grantees) -%}\n    grant {{ privilege }} on {{ relation }} to {{ grantees | join(', ') }}\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720537836.143413, "supported_languages": null}, "macro.dbt.get_revoke_sql": {"name": "get_revoke_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\apply_grants.sql", "original_file_path": "macros\\adapters\\apply_grants.sql", "unique_id": "macro.dbt.get_revoke_sql", "macro_sql": "{% macro get_revoke_sql(relation, privilege, grantees) %}\n    {{ return(adapter.dispatch('get_revoke_sql', 'dbt')(relation, privilege, grantees)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_sqlserver.sqlserver__get_revoke_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720537836.143413, "supported_languages": null}, "macro.dbt.default__get_revoke_sql": {"name": "default__get_revoke_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\apply_grants.sql", "original_file_path": "macros\\adapters\\apply_grants.sql", "unique_id": "macro.dbt.default__get_revoke_sql", "macro_sql": "\n\n{%- macro default__get_revoke_sql(relation, privilege, grantees) -%}\n    revoke {{ privilege }} on {{ relation }} from {{ grantees | join(', ') }}\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720537836.143413, "supported_languages": null}, "macro.dbt.get_dcl_statement_list": {"name": "get_dcl_statement_list", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\apply_grants.sql", "original_file_path": "macros\\adapters\\apply_grants.sql", "unique_id": "macro.dbt.get_dcl_statement_list", "macro_sql": "{% macro get_dcl_statement_list(relation, grant_config, get_dcl_macro) %}\n    {{ return(adapter.dispatch('get_dcl_statement_list', 'dbt')(relation, grant_config, get_dcl_macro)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_dcl_statement_list"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720537836.143413, "supported_languages": null}, "macro.dbt.default__get_dcl_statement_list": {"name": "default__get_dcl_statement_list", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\apply_grants.sql", "original_file_path": "macros\\adapters\\apply_grants.sql", "unique_id": "macro.dbt.default__get_dcl_statement_list", "macro_sql": "\n\n{%- macro default__get_dcl_statement_list(relation, grant_config, get_dcl_macro) -%}\n    {#\n      -- Unpack grant_config into specific privileges and the set of users who need them granted/revoked.\n      -- Depending on whether this database supports multiple grantees per statement, pass in the list of\n      -- all grantees per privilege, or (if not) template one statement per privilege-grantee pair.\n      -- `get_dcl_macro` will be either `get_grant_sql` or `get_revoke_sql`\n    #}\n    {%- set dcl_statements = [] -%}\n    {%- for privilege, grantees in grant_config.items() %}\n        {%- if support_multiple_grantees_per_dcl_statement() and grantees -%}\n          {%- set dcl = get_dcl_macro(relation, privilege, grantees) -%}\n          {%- do dcl_statements.append(dcl) -%}\n        {%- else -%}\n          {%- for grantee in grantees -%}\n              {% set dcl = get_dcl_macro(relation, privilege, [grantee]) %}\n              {%- do dcl_statements.append(dcl) -%}\n          {% endfor -%}\n        {%- endif -%}\n    {%- endfor -%}\n    {{ return(dcl_statements) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.support_multiple_grantees_per_dcl_statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720537836.143413, "supported_languages": null}, "macro.dbt.call_dcl_statements": {"name": "call_dcl_statements", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\apply_grants.sql", "original_file_path": "macros\\adapters\\apply_grants.sql", "unique_id": "macro.dbt.call_dcl_statements", "macro_sql": "{% macro call_dcl_statements(dcl_statement_list) %}\n    {{ return(adapter.dispatch(\"call_dcl_statements\", \"dbt\")(dcl_statement_list)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__call_dcl_statements"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720537836.143413, "supported_languages": null}, "macro.dbt.default__call_dcl_statements": {"name": "default__call_dcl_statements", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\apply_grants.sql", "original_file_path": "macros\\adapters\\apply_grants.sql", "unique_id": "macro.dbt.default__call_dcl_statements", "macro_sql": "{% macro default__call_dcl_statements(dcl_statement_list) %}\n    {#\n      -- By default, supply all grant + revoke statements in a single semicolon-separated block,\n      -- so that they're all processed together.\n\n      -- Some databases do not support this. Those adapters will need to override this macro\n      -- to run each statement individually.\n    #}\n    {% call statement('grants') %}\n        {% for dcl_statement in dcl_statement_list %}\n            {{ dcl_statement }};\n        {% endfor %}\n    {% endcall %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720537836.1596298, "supported_languages": null}, "macro.dbt.apply_grants": {"name": "apply_grants", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\apply_grants.sql", "original_file_path": "macros\\adapters\\apply_grants.sql", "unique_id": "macro.dbt.apply_grants", "macro_sql": "{% macro apply_grants(relation, grant_config, should_revoke) %}\n    {{ return(adapter.dispatch(\"apply_grants\", \"dbt\")(relation, grant_config, should_revoke)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_sqlserver.sqlserver__apply_grants"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720537836.1596298, "supported_languages": null}, "macro.dbt.default__apply_grants": {"name": "default__apply_grants", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\apply_grants.sql", "original_file_path": "macros\\adapters\\apply_grants.sql", "unique_id": "macro.dbt.default__apply_grants", "macro_sql": "{% macro default__apply_grants(relation, grant_config, should_revoke=True) %}\n    {#-- If grant_config is {} or None, this is a no-op --#}\n    {% if grant_config %}\n        {% if should_revoke %}\n            {#-- We think previous grants may have carried over --#}\n            {#-- Show current grants and calculate diffs --#}\n            {% set current_grants_table = run_query(get_show_grant_sql(relation)) %}\n            {% set current_grants_dict = adapter.standardize_grants_dict(current_grants_table) %}\n            {% set needs_granting = diff_of_two_dicts(grant_config, current_grants_dict) %}\n            {% set needs_revoking = diff_of_two_dicts(current_grants_dict, grant_config) %}\n            {% if not (needs_granting or needs_revoking) %}\n                {{ log('On ' ~ relation ~': All grants are in place, no revocation or granting needed.')}}\n            {% endif %}\n        {% else %}\n            {#-- We don't think there's any chance of previous grants having carried over. --#}\n            {#-- Jump straight to granting what the user has configured. --#}\n            {% set needs_revoking = {} %}\n            {% set needs_granting = grant_config %}\n        {% endif %}\n        {% if needs_granting or needs_revoking %}\n            {% set revoke_statement_list = get_dcl_statement_list(relation, needs_revoking, get_revoke_sql) %}\n            {% set grant_statement_list = get_dcl_statement_list(relation, needs_granting, get_grant_sql) %}\n            {% set dcl_statement_list = revoke_statement_list + grant_statement_list %}\n            {% if dcl_statement_list %}\n                {{ call_dcl_statements(dcl_statement_list) }}\n            {% endif %}\n        {% endif %}\n    {% endif %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_query", "macro.dbt.get_show_grant_sql", "macro.dbt.get_dcl_statement_list", "macro.dbt.call_dcl_statements"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720537836.1596298, "supported_languages": null}, "macro.dbt.get_columns_in_relation": {"name": "get_columns_in_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\columns.sql", "original_file_path": "macros\\adapters\\columns.sql", "unique_id": "macro.dbt.get_columns_in_relation", "macro_sql": "{% macro get_columns_in_relation(relation) -%}\n  {{ return(adapter.dispatch('get_columns_in_relation', 'dbt')(relation)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_sqlserver.sqlserver__get_columns_in_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720537836.1736777, "supported_languages": null}, "macro.dbt.default__get_columns_in_relation": {"name": "default__get_columns_in_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\columns.sql", "original_file_path": "macros\\adapters\\columns.sql", "unique_id": "macro.dbt.default__get_columns_in_relation", "macro_sql": "{% macro default__get_columns_in_relation(relation) -%}\n  {{ exceptions.raise_not_implemented(\n    'get_columns_in_relation macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720537836.1736777, "supported_languages": null}, "macro.dbt.sql_convert_columns_in_relation": {"name": "sql_convert_columns_in_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\columns.sql", "original_file_path": "macros\\adapters\\columns.sql", "unique_id": "macro.dbt.sql_convert_columns_in_relation", "macro_sql": "{% macro sql_convert_columns_in_relation(table) -%}\n  {% set columns = [] %}\n  {% for row in table %}\n    {% do columns.append(api.Column(*row)) %}\n  {% endfor %}\n  {{ return(columns) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720537836.1736777, "supported_languages": null}, "macro.dbt.get_columns_in_query": {"name": "get_columns_in_query", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\columns.sql", "original_file_path": "macros\\adapters\\columns.sql", "unique_id": "macro.dbt.get_columns_in_query", "macro_sql": "{% macro get_columns_in_query(select_sql) -%}\n  {{ return(adapter.dispatch('get_columns_in_query', 'dbt')(select_sql)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_sqlserver.sqlserver__get_columns_in_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720537836.177192, "supported_languages": null}, "macro.dbt.default__get_columns_in_query": {"name": "default__get_columns_in_query", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\columns.sql", "original_file_path": "macros\\adapters\\columns.sql", "unique_id": "macro.dbt.default__get_columns_in_query", "macro_sql": "{% macro default__get_columns_in_query(select_sql) %}\n    {% call statement('get_columns_in_query', fetch_result=True, auto_begin=False) -%}\n        select * from (\n            {{ select_sql }}\n        ) as __dbt_sbq\n        where false\n        limit 0\n    {% endcall %}\n\n    {{ return(load_result('get_columns_in_query').table.columns | map(attribute='name') | list) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720537836.177192, "supported_languages": null}, "macro.dbt.alter_column_type": {"name": "alter_column_type", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\columns.sql", "original_file_path": "macros\\adapters\\columns.sql", "unique_id": "macro.dbt.alter_column_type", "macro_sql": "{% macro alter_column_type(relation, column_name, new_column_type) -%}\n  {{ return(adapter.dispatch('alter_column_type', 'dbt')(relation, column_name, new_column_type)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_sqlserver.sqlserver__alter_column_type"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720537836.177192, "supported_languages": null}, "macro.dbt.default__alter_column_type": {"name": "default__alter_column_type", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\columns.sql", "original_file_path": "macros\\adapters\\columns.sql", "unique_id": "macro.dbt.default__alter_column_type", "macro_sql": "{% macro default__alter_column_type(relation, column_name, new_column_type) -%}\n  {#\n    1. Create a new column (w/ temp name and correct type)\n    2. Copy data over to it\n    3. Drop the existing column (cascade!)\n    4. Rename the new column to existing column\n  #}\n  {%- set tmp_column = column_name + \"__dbt_alter\" -%}\n\n  {% call statement('alter_column_type') %}\n    alter table {{ relation }} add column {{ adapter.quote(tmp_column) }} {{ new_column_type }};\n    update {{ relation }} set {{ adapter.quote(tmp_column) }} = {{ adapter.quote(column_name) }};\n    alter table {{ relation }} drop column {{ adapter.quote(column_name) }} cascade;\n    alter table {{ relation }} rename column {{ adapter.quote(tmp_column) }} to {{ adapter.quote(column_name) }}\n  {% endcall %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720537836.177192, "supported_languages": null}, "macro.dbt.alter_relation_add_remove_columns": {"name": "alter_relation_add_remove_columns", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\columns.sql", "original_file_path": "macros\\adapters\\columns.sql", "unique_id": "macro.dbt.alter_relation_add_remove_columns", "macro_sql": "{% macro alter_relation_add_remove_columns(relation, add_columns = none, remove_columns = none) -%}\n  {{ return(adapter.dispatch('alter_relation_add_remove_columns', 'dbt')(relation, add_columns, remove_columns)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_sqlserver.sqlserver__alter_relation_add_remove_columns"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720537836.177192, "supported_languages": null}, "macro.dbt.default__alter_relation_add_remove_columns": {"name": "default__alter_relation_add_remove_columns", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\columns.sql", "original_file_path": "macros\\adapters\\columns.sql", "unique_id": "macro.dbt.default__alter_relation_add_remove_columns", "macro_sql": "{% macro default__alter_relation_add_remove_columns(relation, add_columns, remove_columns) %}\n\n  {% if add_columns is none %}\n    {% set add_columns = [] %}\n  {% endif %}\n  {% if remove_columns is none %}\n    {% set remove_columns = [] %}\n  {% endif %}\n\n  {% set sql -%}\n\n     alter {{ relation.type }} {{ relation }}\n\n            {% for column in add_columns %}\n               add column {{ column.name }} {{ column.data_type }}{{ ',' if not loop.last }}\n            {% endfor %}{{ ',' if add_columns and remove_columns }}\n\n            {% for column in remove_columns %}\n                drop column {{ column.name }}{{ ',' if not loop.last }}\n            {% endfor %}\n\n  {%- endset -%}\n\n  {% do run_query(sql) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720537836.177192, "supported_languages": null}, "macro.dbt.collect_freshness": {"name": "collect_freshness", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\freshness.sql", "original_file_path": "macros\\adapters\\freshness.sql", "unique_id": "macro.dbt.collect_freshness", "macro_sql": "{% macro collect_freshness(source, loaded_at_field, filter) %}\n  {{ return(adapter.dispatch('collect_freshness', 'dbt')(source, loaded_at_field, filter))}}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__collect_freshness"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720537836.188705, "supported_languages": null}, "macro.dbt.default__collect_freshness": {"name": "default__collect_freshness", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\freshness.sql", "original_file_path": "macros\\adapters\\freshness.sql", "unique_id": "macro.dbt.default__collect_freshness", "macro_sql": "{% macro default__collect_freshness(source, loaded_at_field, filter) %}\n  {% call statement('collect_freshness', fetch_result=True, auto_begin=False) -%}\n    select\n      max({{ loaded_at_field }}) as max_loaded_at,\n      {{ current_timestamp() }} as snapshotted_at\n    from {{ source }}\n    {% if filter %}\n    where {{ filter }}\n    {% endif %}\n  {% endcall %}\n  {{ return(load_result('collect_freshness').table) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt.current_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720537836.188705, "supported_languages": null}, "macro.dbt.get_create_index_sql": {"name": "get_create_index_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\indexes.sql", "original_file_path": "macros\\adapters\\indexes.sql", "unique_id": "macro.dbt.get_create_index_sql", "macro_sql": "{% macro get_create_index_sql(relation, index_dict) -%}\n  {{ return(adapter.dispatch('get_create_index_sql', 'dbt')(relation, index_dict)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_create_index_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720537836.188705, "supported_languages": null}, "macro.dbt.default__get_create_index_sql": {"name": "default__get_create_index_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\indexes.sql", "original_file_path": "macros\\adapters\\indexes.sql", "unique_id": "macro.dbt.default__get_create_index_sql", "macro_sql": "{% macro default__get_create_index_sql(relation, index_dict) -%}\n  {% do return(None) %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720537836.188705, "supported_languages": null}, "macro.dbt.create_indexes": {"name": "create_indexes", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\indexes.sql", "original_file_path": "macros\\adapters\\indexes.sql", "unique_id": "macro.dbt.create_indexes", "macro_sql": "{% macro create_indexes(relation) -%}\n  {{ adapter.dispatch('create_indexes', 'dbt')(relation) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__create_indexes"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720537836.188705, "supported_languages": null}, "macro.dbt.default__create_indexes": {"name": "default__create_indexes", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\indexes.sql", "original_file_path": "macros\\adapters\\indexes.sql", "unique_id": "macro.dbt.default__create_indexes", "macro_sql": "{% macro default__create_indexes(relation) -%}\n  {%- set _indexes = config.get('indexes', default=[]) -%}\n\n  {% for _index_dict in _indexes %}\n    {% set create_index_sql = get_create_index_sql(relation, _index_dict) %}\n    {% if create_index_sql %}\n      {% do run_query(create_index_sql) %}\n    {% endif %}\n  {% endfor %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_create_index_sql", "macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720537836.188705, "supported_languages": null}, "macro.dbt.get_catalog": {"name": "get_catalog", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\metadata.sql", "original_file_path": "macros\\adapters\\metadata.sql", "unique_id": "macro.dbt.get_catalog", "macro_sql": "{% macro get_catalog(information_schema, schemas) -%}\n  {{ return(adapter.dispatch('get_catalog', 'dbt')(information_schema, schemas)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_sqlserver.sqlserver__get_catalog"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720537836.2043562, "supported_languages": null}, "macro.dbt.default__get_catalog": {"name": "default__get_catalog", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\metadata.sql", "original_file_path": "macros\\adapters\\metadata.sql", "unique_id": "macro.dbt.default__get_catalog", "macro_sql": "{% macro default__get_catalog(information_schema, schemas) -%}\n\n  {% set typename = adapter.type() %}\n  {% set msg -%}\n    get_catalog not implemented for {{ typename }}\n  {%- endset %}\n\n  {{ exceptions.raise_compiler_error(msg) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720537836.2054243, "supported_languages": null}, "macro.dbt.information_schema_name": {"name": "information_schema_name", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\metadata.sql", "original_file_path": "macros\\adapters\\metadata.sql", "unique_id": "macro.dbt.information_schema_name", "macro_sql": "{% macro information_schema_name(database) %}\n  {{ return(adapter.dispatch('information_schema_name', 'dbt')(database)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_sqlserver.sqlserver__information_schema_name"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720537836.2068987, "supported_languages": null}, "macro.dbt.default__information_schema_name": {"name": "default__information_schema_name", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\metadata.sql", "original_file_path": "macros\\adapters\\metadata.sql", "unique_id": "macro.dbt.default__information_schema_name", "macro_sql": "{% macro default__information_schema_name(database) -%}\n  {%- if database -%}\n    {{ database }}.INFORMATION_SCHEMA\n  {%- else -%}\n    INFORMATION_SCHEMA\n  {%- endif -%}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720537836.2068987, "supported_languages": null}, "macro.dbt.list_schemas": {"name": "list_schemas", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\metadata.sql", "original_file_path": "macros\\adapters\\metadata.sql", "unique_id": "macro.dbt.list_schemas", "macro_sql": "{% macro list_schemas(database) -%}\n  {{ return(adapter.dispatch('list_schemas', 'dbt')(database)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_sqlserver.sqlserver__list_schemas"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720537836.2068987, "supported_languages": null}, "macro.dbt.default__list_schemas": {"name": "default__list_schemas", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\metadata.sql", "original_file_path": "macros\\adapters\\metadata.sql", "unique_id": "macro.dbt.default__list_schemas", "macro_sql": "{% macro default__list_schemas(database) -%}\n  {% set sql %}\n    select distinct schema_name\n    from {{ information_schema_name(database) }}.SCHEMATA\n    where catalog_name ilike '{{ database }}'\n  {% endset %}\n  {{ return(run_query(sql)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.information_schema_name", "macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720537836.2068987, "supported_languages": null}, "macro.dbt.check_schema_exists": {"name": "check_schema_exists", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\metadata.sql", "original_file_path": "macros\\adapters\\metadata.sql", "unique_id": "macro.dbt.check_schema_exists", "macro_sql": "{% macro check_schema_exists(information_schema, schema) -%}\n  {{ return(adapter.dispatch('check_schema_exists', 'dbt')(information_schema, schema)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_sqlserver.sqlserver__check_schema_exists"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720537836.2068987, "supported_languages": null}, "macro.dbt.default__check_schema_exists": {"name": "default__check_schema_exists", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\metadata.sql", "original_file_path": "macros\\adapters\\metadata.sql", "unique_id": "macro.dbt.default__check_schema_exists", "macro_sql": "{% macro default__check_schema_exists(information_schema, schema) -%}\n  {% set sql -%}\n        select count(*)\n        from {{ information_schema.replace(information_schema_view='SCHEMATA') }}\n        where catalog_name='{{ information_schema.database }}'\n          and schema_name='{{ schema }}'\n  {%- endset %}\n  {{ return(run_query(sql)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.replace", "macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720537836.2068987, "supported_languages": null}, "macro.dbt.list_relations_without_caching": {"name": "list_relations_without_caching", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\metadata.sql", "original_file_path": "macros\\adapters\\metadata.sql", "unique_id": "macro.dbt.list_relations_without_caching", "macro_sql": "{% macro list_relations_without_caching(schema_relation) %}\n  {{ return(adapter.dispatch('list_relations_without_caching', 'dbt')(schema_relation)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_sqlserver.sqlserver__list_relations_without_caching"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720537836.2068987, "supported_languages": null}, "macro.dbt.default__list_relations_without_caching": {"name": "default__list_relations_without_caching", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\metadata.sql", "original_file_path": "macros\\adapters\\metadata.sql", "unique_id": "macro.dbt.default__list_relations_without_caching", "macro_sql": "{% macro default__list_relations_without_caching(schema_relation) %}\n  {{ exceptions.raise_not_implemented(\n    'list_relations_without_caching macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720537836.2068987, "supported_languages": null}, "macro.dbt.alter_column_comment": {"name": "alter_column_comment", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\persist_docs.sql", "original_file_path": "macros\\adapters\\persist_docs.sql", "unique_id": "macro.dbt.alter_column_comment", "macro_sql": "{% macro alter_column_comment(relation, column_dict) -%}\n  {{ return(adapter.dispatch('alter_column_comment', 'dbt')(relation, column_dict)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__alter_column_comment"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720537836.2068987, "supported_languages": null}, "macro.dbt.default__alter_column_comment": {"name": "default__alter_column_comment", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\persist_docs.sql", "original_file_path": "macros\\adapters\\persist_docs.sql", "unique_id": "macro.dbt.default__alter_column_comment", "macro_sql": "{% macro default__alter_column_comment(relation, column_dict) -%}\n  {{ exceptions.raise_not_implemented(\n    'alter_column_comment macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720537836.2068987, "supported_languages": null}, "macro.dbt.alter_relation_comment": {"name": "alter_relation_comment", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\persist_docs.sql", "original_file_path": "macros\\adapters\\persist_docs.sql", "unique_id": "macro.dbt.alter_relation_comment", "macro_sql": "{% macro alter_relation_comment(relation, relation_comment) -%}\n  {{ return(adapter.dispatch('alter_relation_comment', 'dbt')(relation, relation_comment)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__alter_relation_comment"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720537836.2068987, "supported_languages": null}, "macro.dbt.default__alter_relation_comment": {"name": "default__alter_relation_comment", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\persist_docs.sql", "original_file_path": "macros\\adapters\\persist_docs.sql", "unique_id": "macro.dbt.default__alter_relation_comment", "macro_sql": "{% macro default__alter_relation_comment(relation, relation_comment) -%}\n  {{ exceptions.raise_not_implemented(\n    'alter_relation_comment macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720537836.2068987, "supported_languages": null}, "macro.dbt.persist_docs": {"name": "persist_docs", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\persist_docs.sql", "original_file_path": "macros\\adapters\\persist_docs.sql", "unique_id": "macro.dbt.persist_docs", "macro_sql": "{% macro persist_docs(relation, model, for_relation=true, for_columns=true) -%}\n  {{ return(adapter.dispatch('persist_docs', 'dbt')(relation, model, for_relation, for_columns)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__persist_docs"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720537836.2219667, "supported_languages": null}, "macro.dbt.default__persist_docs": {"name": "default__persist_docs", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\persist_docs.sql", "original_file_path": "macros\\adapters\\persist_docs.sql", "unique_id": "macro.dbt.default__persist_docs", "macro_sql": "{% macro default__persist_docs(relation, model, for_relation, for_columns) -%}\n  {% if for_relation and config.persist_relation_docs() and model.description %}\n    {% do run_query(alter_relation_comment(relation, model.description)) %}\n  {% endif %}\n\n  {% if for_columns and config.persist_column_docs() and model.columns %}\n    {% do run_query(alter_column_comment(relation, model.columns)) %}\n  {% endif %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_query", "macro.dbt.alter_relation_comment", "macro.dbt.alter_column_comment"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720537836.2219667, "supported_languages": null}, "macro.dbt.make_intermediate_relation": {"name": "make_intermediate_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\relation.sql", "original_file_path": "macros\\adapters\\relation.sql", "unique_id": "macro.dbt.make_intermediate_relation", "macro_sql": "{% macro make_intermediate_relation(base_relation, suffix='__dbt_tmp') %}\n  {{ return(adapter.dispatch('make_intermediate_relation', 'dbt')(base_relation, suffix)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__make_intermediate_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720537836.231978, "supported_languages": null}, "macro.dbt.default__make_intermediate_relation": {"name": "default__make_intermediate_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\relation.sql", "original_file_path": "macros\\adapters\\relation.sql", "unique_id": "macro.dbt.default__make_intermediate_relation", "macro_sql": "{% macro default__make_intermediate_relation(base_relation, suffix) %}\n    {{ return(default__make_temp_relation(base_relation, suffix)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__make_temp_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720537836.231978, "supported_languages": null}, "macro.dbt.make_temp_relation": {"name": "make_temp_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\relation.sql", "original_file_path": "macros\\adapters\\relation.sql", "unique_id": "macro.dbt.make_temp_relation", "macro_sql": "{% macro make_temp_relation(base_relation, suffix='__dbt_tmp') %}\n  {{ return(adapter.dispatch('make_temp_relation', 'dbt')(base_relation, suffix)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_sqlserver.sqlserver__make_temp_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720537836.231978, "supported_languages": null}, "macro.dbt.default__make_temp_relation": {"name": "default__make_temp_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\relation.sql", "original_file_path": "macros\\adapters\\relation.sql", "unique_id": "macro.dbt.default__make_temp_relation", "macro_sql": "{% macro default__make_temp_relation(base_relation, suffix) %}\n    {%- set temp_identifier = base_relation.identifier ~ suffix -%}\n    {%- set temp_relation = base_relation.incorporate(\n                                path={\"identifier\": temp_identifier}) -%}\n\n    {{ return(temp_relation) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720537836.231978, "supported_languages": null}, "macro.dbt.make_backup_relation": {"name": "make_backup_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\relation.sql", "original_file_path": "macros\\adapters\\relation.sql", "unique_id": "macro.dbt.make_backup_relation", "macro_sql": "{% macro make_backup_relation(base_relation, backup_relation_type, suffix='__dbt_backup') %}\n    {{ return(adapter.dispatch('make_backup_relation', 'dbt')(base_relation, backup_relation_type, suffix)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__make_backup_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720537836.231978, "supported_languages": null}, "macro.dbt.default__make_backup_relation": {"name": "default__make_backup_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\relation.sql", "original_file_path": "macros\\adapters\\relation.sql", "unique_id": "macro.dbt.default__make_backup_relation", "macro_sql": "{% macro default__make_backup_relation(base_relation, backup_relation_type, suffix) %}\n    {%- set backup_identifier = base_relation.identifier ~ suffix -%}\n    {%- set backup_relation = base_relation.incorporate(\n                                  path={\"identifier\": backup_identifier},\n                                  type=backup_relation_type\n    ) -%}\n    {{ return(backup_relation) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720537836.231978, "supported_languages": null}, "macro.dbt.drop_relation": {"name": "drop_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\relation.sql", "original_file_path": "macros\\adapters\\relation.sql", "unique_id": "macro.dbt.drop_relation", "macro_sql": "{% macro drop_relation(relation) -%}\n  {{ return(adapter.dispatch('drop_relation', 'dbt')(relation)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_sqlserver.sqlserver__drop_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720537836.231978, "supported_languages": null}, "macro.dbt.default__drop_relation": {"name": "default__drop_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\relation.sql", "original_file_path": "macros\\adapters\\relation.sql", "unique_id": "macro.dbt.default__drop_relation", "macro_sql": "{% macro default__drop_relation(relation) -%}\n  {% call statement('drop_relation', auto_begin=False) -%}\n    drop {{ relation.type }} if exists {{ relation }} cascade\n  {%- endcall %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720537836.2369857, "supported_languages": null}, "macro.dbt.truncate_relation": {"name": "truncate_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\relation.sql", "original_file_path": "macros\\adapters\\relation.sql", "unique_id": "macro.dbt.truncate_relation", "macro_sql": "{% macro truncate_relation(relation) -%}\n  {{ return(adapter.dispatch('truncate_relation', 'dbt')(relation)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__truncate_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720537836.2369857, "supported_languages": null}, "macro.dbt.default__truncate_relation": {"name": "default__truncate_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\relation.sql", "original_file_path": "macros\\adapters\\relation.sql", "unique_id": "macro.dbt.default__truncate_relation", "macro_sql": "{% macro default__truncate_relation(relation) -%}\n  {% call statement('truncate_relation') -%}\n    truncate table {{ relation }}\n  {%- endcall %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720537836.2369857, "supported_languages": null}, "macro.dbt.rename_relation": {"name": "rename_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\relation.sql", "original_file_path": "macros\\adapters\\relation.sql", "unique_id": "macro.dbt.rename_relation", "macro_sql": "{% macro rename_relation(from_relation, to_relation) -%}\n  {{ return(adapter.dispatch('rename_relation', 'dbt')(from_relation, to_relation)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_sqlserver.sqlserver__rename_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720537836.2369857, "supported_languages": null}, "macro.dbt.default__rename_relation": {"name": "default__rename_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\relation.sql", "original_file_path": "macros\\adapters\\relation.sql", "unique_id": "macro.dbt.default__rename_relation", "macro_sql": "{% macro default__rename_relation(from_relation, to_relation) -%}\n  {% set target_name = adapter.quote_as_configured(to_relation.identifier, 'identifier') %}\n  {% call statement('rename_relation') -%}\n    alter table {{ from_relation }} rename to {{ target_name }}\n  {%- endcall %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720537836.2369857, "supported_languages": null}, "macro.dbt.get_or_create_relation": {"name": "get_or_create_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\relation.sql", "original_file_path": "macros\\adapters\\relation.sql", "unique_id": "macro.dbt.get_or_create_relation", "macro_sql": "{% macro get_or_create_relation(database, schema, identifier, type) -%}\n  {{ return(adapter.dispatch('get_or_create_relation', 'dbt')(database, schema, identifier, type)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_or_create_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720537836.2369857, "supported_languages": null}, "macro.dbt.default__get_or_create_relation": {"name": "default__get_or_create_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\relation.sql", "original_file_path": "macros\\adapters\\relation.sql", "unique_id": "macro.dbt.default__get_or_create_relation", "macro_sql": "{% macro default__get_or_create_relation(database, schema, identifier, type) %}\n  {%- set target_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) %}\n\n  {% if target_relation %}\n    {% do return([true, target_relation]) %}\n  {% endif %}\n\n  {%- set new_relation = api.Relation.create(\n      database=database,\n      schema=schema,\n      identifier=identifier,\n      type=type\n  ) -%}\n  {% do return([false, new_relation]) %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720537836.2369857, "supported_languages": null}, "macro.dbt.load_cached_relation": {"name": "load_cached_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\relation.sql", "original_file_path": "macros\\adapters\\relation.sql", "unique_id": "macro.dbt.load_cached_relation", "macro_sql": "{% macro load_cached_relation(relation) %}\n  {% do return(adapter.get_relation(\n    database=relation.database,\n    schema=relation.schema,\n    identifier=relation.identifier\n  )) -%}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720537836.2369857, "supported_languages": null}, "macro.dbt.load_relation": {"name": "load_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\relation.sql", "original_file_path": "macros\\adapters\\relation.sql", "unique_id": "macro.dbt.load_relation", "macro_sql": "{% macro load_relation(relation) %}\n    {{ return(load_cached_relation(relation)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.load_cached_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720537836.2369857, "supported_languages": null}, "macro.dbt.drop_relation_if_exists": {"name": "drop_relation_if_exists", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\relation.sql", "original_file_path": "macros\\adapters\\relation.sql", "unique_id": "macro.dbt.drop_relation_if_exists", "macro_sql": "{% macro drop_relation_if_exists(relation) %}\n  {% if relation is not none %}\n    {{ adapter.drop_relation(relation) }}\n  {% endif %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720537836.2369857, "supported_languages": null}, "macro.dbt.create_schema": {"name": "create_schema", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\schema.sql", "original_file_path": "macros\\adapters\\schema.sql", "unique_id": "macro.dbt.create_schema", "macro_sql": "{% macro create_schema(relation) -%}\n  {{ adapter.dispatch('create_schema', 'dbt')(relation) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_sqlserver.sqlserver__create_schema"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720537836.2369857, "supported_languages": null}, "macro.dbt.default__create_schema": {"name": "default__create_schema", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\schema.sql", "original_file_path": "macros\\adapters\\schema.sql", "unique_id": "macro.dbt.default__create_schema", "macro_sql": "{% macro default__create_schema(relation) -%}\n  {%- call statement('create_schema') -%}\n    create schema if not exists {{ relation.without_identifier() }}\n  {% endcall %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720537836.2369857, "supported_languages": null}, "macro.dbt.drop_schema": {"name": "drop_schema", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\schema.sql", "original_file_path": "macros\\adapters\\schema.sql", "unique_id": "macro.dbt.drop_schema", "macro_sql": "{% macro drop_schema(relation) -%}\n  {{ adapter.dispatch('drop_schema', 'dbt')(relation) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_sqlserver.sqlserver__drop_schema"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720537836.2369857, "supported_languages": null}, "macro.dbt.default__drop_schema": {"name": "default__drop_schema", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\schema.sql", "original_file_path": "macros\\adapters\\schema.sql", "unique_id": "macro.dbt.default__drop_schema", "macro_sql": "{% macro default__drop_schema(relation) -%}\n  {%- call statement('drop_schema') -%}\n    drop schema if exists {{ relation.without_identifier() }} cascade\n  {% endcall %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720537836.2369857, "supported_languages": null}, "macro.dbt.current_timestamp": {"name": "current_timestamp", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\timestamps.sql", "original_file_path": "macros\\adapters\\timestamps.sql", "unique_id": "macro.dbt.current_timestamp", "macro_sql": "{%- macro current_timestamp() -%}\n    {{ adapter.dispatch('current_timestamp', 'dbt')() }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt_sqlserver.sqlserver__current_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720537836.2369857, "supported_languages": null}, "macro.dbt.default__current_timestamp": {"name": "default__current_timestamp", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\timestamps.sql", "original_file_path": "macros\\adapters\\timestamps.sql", "unique_id": "macro.dbt.default__current_timestamp", "macro_sql": "{% macro default__current_timestamp() -%}\n  {{ exceptions.raise_not_implemented(\n    'current_timestamp macro not implemented for adapter ' + adapter.type()) }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720537836.2369857, "supported_languages": null}, "macro.dbt.snapshot_get_time": {"name": "snapshot_get_time", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\timestamps.sql", "original_file_path": "macros\\adapters\\timestamps.sql", "unique_id": "macro.dbt.snapshot_get_time", "macro_sql": "\n\n{%- macro snapshot_get_time() -%}\n    {{ adapter.dispatch('snapshot_get_time', 'dbt')() }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__snapshot_get_time"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720537836.2369857, "supported_languages": null}, "macro.dbt.default__snapshot_get_time": {"name": "default__snapshot_get_time", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\timestamps.sql", "original_file_path": "macros\\adapters\\timestamps.sql", "unique_id": "macro.dbt.default__snapshot_get_time", "macro_sql": "{% macro default__snapshot_get_time() %}\n    {{ current_timestamp() }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.current_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720537836.2369857, "supported_languages": null}, "macro.dbt.current_timestamp_backcompat": {"name": "current_timestamp_backcompat", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\timestamps.sql", "original_file_path": "macros\\adapters\\timestamps.sql", "unique_id": "macro.dbt.current_timestamp_backcompat", "macro_sql": "{% macro current_timestamp_backcompat() %}\n    {{ return(adapter.dispatch('current_timestamp_backcompat', 'dbt')()) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__current_timestamp_backcompat"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720537836.2369857, "supported_languages": null}, "macro.dbt.default__current_timestamp_backcompat": {"name": "default__current_timestamp_backcompat", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\timestamps.sql", "original_file_path": "macros\\adapters\\timestamps.sql", "unique_id": "macro.dbt.default__current_timestamp_backcompat", "macro_sql": "{% macro default__current_timestamp_backcompat() %}\n    current_timestamp::timestamp\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720537836.2369857, "supported_languages": null}, "macro.dbt.current_timestamp_in_utc_backcompat": {"name": "current_timestamp_in_utc_backcompat", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\timestamps.sql", "original_file_path": "macros\\adapters\\timestamps.sql", "unique_id": "macro.dbt.current_timestamp_in_utc_backcompat", "macro_sql": "{% macro current_timestamp_in_utc_backcompat() %}\n    {{ return(adapter.dispatch('current_timestamp_in_utc_backcompat', 'dbt')()) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__current_timestamp_in_utc_backcompat"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720537836.2369857, "supported_languages": null}, "macro.dbt.default__current_timestamp_in_utc_backcompat": {"name": "default__current_timestamp_in_utc_backcompat", "resource_type": "macro", "package_name": "dbt", "path": "macros\\adapters\\timestamps.sql", "original_file_path": "macros\\adapters\\timestamps.sql", "unique_id": "macro.dbt.default__current_timestamp_in_utc_backcompat", "macro_sql": "{% macro default__current_timestamp_in_utc_backcompat() %}\n    {{ return(adapter.dispatch('current_timestamp_backcompat', 'dbt')()) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.current_timestamp_backcompat", "macro.dbt.default__current_timestamp_backcompat"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720537836.2369857, "supported_languages": null}, "macro.dbt.convert_datetime": {"name": "convert_datetime", "resource_type": "macro", "package_name": "dbt", "path": "macros\\etc\\datetime.sql", "original_file_path": "macros\\etc\\datetime.sql", "unique_id": "macro.dbt.convert_datetime", "macro_sql": "{% macro convert_datetime(date_str, date_fmt) %}\n\n  {% set error_msg -%}\n      The provided partition date '{{ date_str }}' does not match the expected format '{{ date_fmt }}'\n  {%- endset %}\n\n  {% set res = try_or_compiler_error(error_msg, modules.datetime.datetime.strptime, date_str.strip(), date_fmt) %}\n  {{ return(res) }}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720537836.2520008, "supported_languages": null}, "macro.dbt.dates_in_range": {"name": "dates_in_range", "resource_type": "macro", "package_name": "dbt", "path": "macros\\etc\\datetime.sql", "original_file_path": "macros\\etc\\datetime.sql", "unique_id": "macro.dbt.dates_in_range", "macro_sql": "{% macro dates_in_range(start_date_str, end_date_str=none, in_fmt=\"%Y%m%d\", out_fmt=\"%Y%m%d\") %}\n    {% set end_date_str = start_date_str if end_date_str is none else end_date_str %}\n\n    {% set start_date = convert_datetime(start_date_str, in_fmt) %}\n    {% set end_date = convert_datetime(end_date_str, in_fmt) %}\n\n    {% set day_count = (end_date - start_date).days %}\n    {% if day_count < 0 %}\n        {% set msg -%}\n            Partiton start date is after the end date ({{ start_date }}, {{ end_date }})\n        {%- endset %}\n\n        {{ exceptions.raise_compiler_error(msg, model) }}\n    {% endif %}\n\n    {% set date_list = [] %}\n    {% for i in range(0, day_count + 1) %}\n        {% set the_date = (modules.datetime.timedelta(days=i) + start_date) %}\n        {% if not out_fmt %}\n            {% set _ = date_list.append(the_date) %}\n        {% else %}\n            {% set _ = date_list.append(the_date.strftime(out_fmt)) %}\n        {% endif %}\n    {% endfor %}\n\n    {{ return(date_list) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.convert_datetime"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720537836.2520008, "supported_languages": null}, "macro.dbt.partition_range": {"name": "partition_range", "resource_type": "macro", "package_name": "dbt", "path": "macros\\etc\\datetime.sql", "original_file_path": "macros\\etc\\datetime.sql", "unique_id": "macro.dbt.partition_range", "macro_sql": "{% macro partition_range(raw_partition_date, date_fmt='%Y%m%d') %}\n    {% set partition_range = (raw_partition_date | string).split(\",\") %}\n\n    {% if (partition_range | length) == 1 %}\n      {% set start_date = partition_range[0] %}\n      {% set end_date = none %}\n    {% elif (partition_range | length) == 2 %}\n      {% set start_date = partition_range[0] %}\n      {% set end_date = partition_range[1] %}\n    {% else %}\n      {{ exceptions.raise_compiler_error(\"Invalid partition time. Expected format: {Start Date}[,{End Date}]. Got: \" ~ raw_partition_date) }}\n    {% endif %}\n\n    {{ return(dates_in_range(start_date, end_date, in_fmt=date_fmt)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.dates_in_range"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720537836.2520008, "supported_languages": null}, "macro.dbt.py_current_timestring": {"name": "py_current_timestring", "resource_type": "macro", "package_name": "dbt", "path": "macros\\etc\\datetime.sql", "original_file_path": "macros\\etc\\datetime.sql", "unique_id": "macro.dbt.py_current_timestring", "macro_sql": "{% macro py_current_timestring() %}\n    {% set dt = modules.datetime.datetime.now() %}\n    {% do return(dt.strftime(\"%Y%m%d%H%M%S%f\")) %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720537836.2520008, "supported_languages": null}, "macro.dbt.statement": {"name": "statement", "resource_type": "macro", "package_name": "dbt", "path": "macros\\etc\\statement.sql", "original_file_path": "macros\\etc\\statement.sql", "unique_id": "macro.dbt.statement", "macro_sql": "\n{%- macro statement(name=None, fetch_result=False, auto_begin=True, language='sql') -%}\n  {%- if execute: -%}\n    {%- set compiled_code = caller() -%}\n\n    {%- if name == 'main' -%}\n      {{ log('Writing runtime {} for node \"{}\"'.format(language, model['unique_id'])) }}\n      {{ write(compiled_code) }}\n    {%- endif -%}\n    {%- if language == 'sql'-%}\n      {%- set res, table = adapter.execute(compiled_code, auto_begin=auto_begin, fetch=fetch_result) -%}\n    {%- elif language == 'python' -%}\n      {%- set res = submit_python_job(model, compiled_code) -%}\n      {#-- TODO: What should table be for python models? --#}\n      {%- set table = None -%}\n    {%- else -%}\n      {% do exceptions.raise_compiler_error(\"statement macro didn't get supported language\") %}\n    {%- endif -%}\n\n    {%- if name is not none -%}\n      {{ store_result(name, response=res, agate_table=table) }}\n    {%- endif -%}\n\n  {%- endif -%}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720537836.2520008, "supported_languages": null}, "macro.dbt.noop_statement": {"name": "noop_statement", "resource_type": "macro", "package_name": "dbt", "path": "macros\\etc\\statement.sql", "original_file_path": "macros\\etc\\statement.sql", "unique_id": "macro.dbt.noop_statement", "macro_sql": "{% macro noop_statement(name=None, message=None, code=None, rows_affected=None, res=None) -%}\n  {%- set sql = caller() -%}\n\n  {%- if name == 'main' -%}\n    {{ log('Writing runtime SQL for node \"{}\"'.format(model['unique_id'])) }}\n    {{ write(sql) }}\n  {%- endif -%}\n\n  {%- if name is not none -%}\n    {{ store_raw_result(name, message=message, code=code, rows_affected=rows_affected, agate_table=res) }}\n  {%- endif -%}\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720537836.267005, "supported_languages": null}, "macro.dbt.run_query": {"name": "run_query", "resource_type": "macro", "package_name": "dbt", "path": "macros\\etc\\statement.sql", "original_file_path": "macros\\etc\\statement.sql", "unique_id": "macro.dbt.run_query", "macro_sql": "{% macro run_query(sql) %}\n  {% call statement(\"run_query_statement\", fetch_result=true, auto_begin=false) %}\n    {{ sql }}\n  {% endcall %}\n\n  {% do return(load_result(\"run_query_statement\").table) %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720537836.267005, "supported_languages": null}, "macro.dbt.default__test_accepted_values": {"name": "default__test_accepted_values", "resource_type": "macro", "package_name": "dbt", "path": "macros\\generic_test_sql\\accepted_values.sql", "original_file_path": "macros\\generic_test_sql\\accepted_values.sql", "unique_id": "macro.dbt.default__test_accepted_values", "macro_sql": "{% macro default__test_accepted_values(model, column_name, values, quote=True) %}\n\nwith all_values as (\n\n    select\n        {{ column_name }} as value_field,\n        count(*) as n_records\n\n    from {{ model }}\n    group by {{ column_name }}\n\n)\n\nselect *\nfrom all_values\nwhere value_field not in (\n    {% for value in values -%}\n        {% if quote -%}\n        '{{ value }}'\n        {%- else -%}\n        {{ value }}\n        {%- endif -%}\n        {%- if not loop.last -%},{%- endif %}\n    {%- endfor %}\n)\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720537836.267005, "supported_languages": null}, "macro.dbt.default__test_not_null": {"name": "default__test_not_null", "resource_type": "macro", "package_name": "dbt", "path": "macros\\generic_test_sql\\not_null.sql", "original_file_path": "macros\\generic_test_sql\\not_null.sql", "unique_id": "macro.dbt.default__test_not_null", "macro_sql": "{% macro default__test_not_null(model, column_name) %}\n\n{% set column_list = '*' if should_store_failures() else column_name %}\n\nselect {{ column_list }}\nfrom {{ model }}\nwhere {{ column_name }} is null\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.should_store_failures"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720537836.267005, "supported_languages": null}, "macro.dbt.default__test_relationships": {"name": "default__test_relationships", "resource_type": "macro", "package_name": "dbt", "path": "macros\\generic_test_sql\\relationships.sql", "original_file_path": "macros\\generic_test_sql\\relationships.sql", "unique_id": "macro.dbt.default__test_relationships", "macro_sql": "{% macro default__test_relationships(model, column_name, to, field) %}\n\nwith child as (\n    select {{ column_name }} as from_field\n    from {{ model }}\n    where {{ column_name }} is not null\n),\n\nparent as (\n    select {{ field }} as to_field\n    from {{ to }}\n)\n\nselect\n    from_field\n\nfrom child\nleft join parent\n    on child.from_field = parent.to_field\n\nwhere parent.to_field is null\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720537836.267005, "supported_languages": null}, "macro.dbt.default__test_unique": {"name": "default__test_unique", "resource_type": "macro", "package_name": "dbt", "path": "macros\\generic_test_sql\\unique.sql", "original_file_path": "macros\\generic_test_sql\\unique.sql", "unique_id": "macro.dbt.default__test_unique", "macro_sql": "{% macro default__test_unique(model, column_name) %}\n\nselect\n    {{ column_name }} as unique_field,\n    count(*) as n_records\n\nfrom {{ model }}\nwhere {{ column_name }} is not null\ngroup by {{ column_name }}\nhaving count(*) > 1\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720537836.267005, "supported_languages": null}, "macro.dbt.generate_alias_name": {"name": "generate_alias_name", "resource_type": "macro", "package_name": "dbt", "path": "macros\\get_custom_name\\get_custom_alias.sql", "original_file_path": "macros\\get_custom_name\\get_custom_alias.sql", "unique_id": "macro.dbt.generate_alias_name", "macro_sql": "{% macro generate_alias_name(custom_alias_name=none, node=none) -%}\n    {% do return(adapter.dispatch('generate_alias_name', 'dbt')(custom_alias_name, node)) %}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__generate_alias_name"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720537836.267005, "supported_languages": null}, "macro.dbt.default__generate_alias_name": {"name": "default__generate_alias_name", "resource_type": "macro", "package_name": "dbt", "path": "macros\\get_custom_name\\get_custom_alias.sql", "original_file_path": "macros\\get_custom_name\\get_custom_alias.sql", "unique_id": "macro.dbt.default__generate_alias_name", "macro_sql": "{% macro default__generate_alias_name(custom_alias_name=none, node=none) -%}\n\n    {%- if custom_alias_name is none -%}\n\n        {{ node.name }}\n\n    {%- else -%}\n\n        {{ custom_alias_name | trim }}\n\n    {%- endif -%}\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720537836.267005, "supported_languages": null}, "macro.dbt.generate_database_name": {"name": "generate_database_name", "resource_type": "macro", "package_name": "dbt", "path": "macros\\get_custom_name\\get_custom_database.sql", "original_file_path": "macros\\get_custom_name\\get_custom_database.sql", "unique_id": "macro.dbt.generate_database_name", "macro_sql": "{% macro generate_database_name(custom_database_name=none, node=none) -%}\n    {% do return(adapter.dispatch('generate_database_name', 'dbt')(custom_database_name, node)) %}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__generate_database_name"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720537836.267005, "supported_languages": null}, "macro.dbt.default__generate_database_name": {"name": "default__generate_database_name", "resource_type": "macro", "package_name": "dbt", "path": "macros\\get_custom_name\\get_custom_database.sql", "original_file_path": "macros\\get_custom_name\\get_custom_database.sql", "unique_id": "macro.dbt.default__generate_database_name", "macro_sql": "{% macro default__generate_database_name(custom_database_name=none, node=none) -%}\n    {%- set default_database = target.database -%}\n    {%- if custom_database_name is none -%}\n\n        {{ default_database }}\n\n    {%- else -%}\n\n        {{ custom_database_name }}\n\n    {%- endif -%}\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720537836.277589, "supported_languages": null}, "macro.dbt.generate_schema_name": {"name": "generate_schema_name", "resource_type": "macro", "package_name": "dbt", "path": "macros\\get_custom_name\\get_custom_schema.sql", "original_file_path": "macros\\get_custom_name\\get_custom_schema.sql", "unique_id": "macro.dbt.generate_schema_name", "macro_sql": "{% macro generate_schema_name(custom_schema_name=none, node=none) -%}\n    {{ return(adapter.dispatch('generate_schema_name', 'dbt')(custom_schema_name, node)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__generate_schema_name"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720537836.278123, "supported_languages": null}, "macro.dbt.default__generate_schema_name": {"name": "default__generate_schema_name", "resource_type": "macro", "package_name": "dbt", "path": "macros\\get_custom_name\\get_custom_schema.sql", "original_file_path": "macros\\get_custom_name\\get_custom_schema.sql", "unique_id": "macro.dbt.default__generate_schema_name", "macro_sql": "{% macro default__generate_schema_name(custom_schema_name, node) -%}\n\n    {%- set default_schema = target.schema -%}\n    {%- if custom_schema_name is none -%}\n\n        {{ default_schema }}\n\n    {%- else -%}\n\n        {{ default_schema }}_{{ custom_schema_name | trim }}\n\n    {%- endif -%}\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720537836.278123, "supported_languages": null}, "macro.dbt.generate_schema_name_for_env": {"name": "generate_schema_name_for_env", "resource_type": "macro", "package_name": "dbt", "path": "macros\\get_custom_name\\get_custom_schema.sql", "original_file_path": "macros\\get_custom_name\\get_custom_schema.sql", "unique_id": "macro.dbt.generate_schema_name_for_env", "macro_sql": "{% macro generate_schema_name_for_env(custom_schema_name, node) -%}\n\n    {%- set default_schema = target.schema -%}\n    {%- if target.name == 'prod' and custom_schema_name is not none -%}\n\n        {{ custom_schema_name | trim }}\n\n    {%- else -%}\n\n        {{ default_schema }}\n\n    {%- endif -%}\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720537836.278123, "supported_languages": null}, "macro.dbt.set_sql_header": {"name": "set_sql_header", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\configs.sql", "original_file_path": "macros\\materializations\\configs.sql", "unique_id": "macro.dbt.set_sql_header", "macro_sql": "{% macro set_sql_header(config) -%}\n  {{ config.set('sql_header', caller()) }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720537836.278123, "supported_languages": null}, "macro.dbt.should_full_refresh": {"name": "should_full_refresh", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\configs.sql", "original_file_path": "macros\\materializations\\configs.sql", "unique_id": "macro.dbt.should_full_refresh", "macro_sql": "{% macro should_full_refresh() %}\n  {% set config_full_refresh = config.get('full_refresh') %}\n  {% if config_full_refresh is none %}\n    {% set config_full_refresh = flags.FULL_REFRESH %}\n  {% endif %}\n  {% do return(config_full_refresh) %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720537836.2821925, "supported_languages": null}, "macro.dbt.should_store_failures": {"name": "should_store_failures", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\configs.sql", "original_file_path": "macros\\materializations\\configs.sql", "unique_id": "macro.dbt.should_store_failures", "macro_sql": "{% macro should_store_failures() %}\n  {% set config_store_failures = config.get('store_failures') %}\n  {% if config_store_failures is none %}\n    {% set config_store_failures = flags.STORE_FAILURES %}\n  {% endif %}\n  {% do return(config_store_failures) %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720537836.2821925, "supported_languages": null}, "macro.dbt.run_hooks": {"name": "run_hooks", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\hooks.sql", "original_file_path": "macros\\materializations\\hooks.sql", "unique_id": "macro.dbt.run_hooks", "macro_sql": "{% macro run_hooks(hooks, inside_transaction=True) %}\n  {% for hook in hooks | selectattr('transaction', 'equalto', inside_transaction)  %}\n    {% if not inside_transaction and loop.first %}\n      {% call statement(auto_begin=inside_transaction) %}\n        commit;\n      {% endcall %}\n    {% endif %}\n    {% set rendered = render(hook.get('sql')) | trim %}\n    {% if (rendered | length) > 0 %}\n      {% call statement(auto_begin=inside_transaction) %}\n        {{ rendered }}\n      {% endcall %}\n    {% endif %}\n  {% endfor %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720537836.2821925, "supported_languages": null}, "macro.dbt.make_hook_config": {"name": "make_hook_config", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\hooks.sql", "original_file_path": "macros\\materializations\\hooks.sql", "unique_id": "macro.dbt.make_hook_config", "macro_sql": "{% macro make_hook_config(sql, inside_transaction) %}\n    {{ tojson({\"sql\": sql, \"transaction\": inside_transaction}) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720537836.2821925, "supported_languages": null}, "macro.dbt.before_begin": {"name": "before_begin", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\hooks.sql", "original_file_path": "macros\\materializations\\hooks.sql", "unique_id": "macro.dbt.before_begin", "macro_sql": "{% macro before_begin(sql) %}\n    {{ make_hook_config(sql, inside_transaction=False) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.make_hook_config"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720537836.2821925, "supported_languages": null}, "macro.dbt.in_transaction": {"name": "in_transaction", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\hooks.sql", "original_file_path": "macros\\materializations\\hooks.sql", "unique_id": "macro.dbt.in_transaction", "macro_sql": "{% macro in_transaction(sql) %}\n    {{ make_hook_config(sql, inside_transaction=True) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.make_hook_config"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720537836.2821925, "supported_languages": null}, "macro.dbt.after_commit": {"name": "after_commit", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\hooks.sql", "original_file_path": "macros\\materializations\\hooks.sql", "unique_id": "macro.dbt.after_commit", "macro_sql": "{% macro after_commit(sql) %}\n    {{ make_hook_config(sql, inside_transaction=False) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.make_hook_config"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720537836.2821925, "supported_languages": null}, "macro.dbt.get_quoted_csv": {"name": "get_quoted_csv", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\models\\incremental\\column_helpers.sql", "original_file_path": "macros\\materializations\\models\\incremental\\column_helpers.sql", "unique_id": "macro.dbt.get_quoted_csv", "macro_sql": "{% macro get_quoted_csv(column_names) %}\n\n    {% set quoted = [] %}\n    {% for col in column_names -%}\n        {%- do quoted.append(adapter.quote(col)) -%}\n    {%- endfor %}\n\n    {%- set dest_cols_csv = quoted | join(', ') -%}\n    {{ return(dest_cols_csv) }}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720537836.2821925, "supported_languages": null}, "macro.dbt.diff_columns": {"name": "diff_columns", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\models\\incremental\\column_helpers.sql", "original_file_path": "macros\\materializations\\models\\incremental\\column_helpers.sql", "unique_id": "macro.dbt.diff_columns", "macro_sql": "{% macro diff_columns(source_columns, target_columns) %}\n\n  {% set result = [] %}\n  {% set source_names = source_columns | map(attribute = 'column') | list %}\n  {% set target_names = target_columns | map(attribute = 'column') | list %}\n\n   {# --check whether the name attribute exists in the target - this does not perform a data type check #}\n   {% for sc in source_columns %}\n     {% if sc.name not in target_names %}\n        {{ result.append(sc) }}\n     {% endif %}\n   {% endfor %}\n\n  {{ return(result) }}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720537836.2821925, "supported_languages": null}, "macro.dbt.diff_column_data_types": {"name": "diff_column_data_types", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\models\\incremental\\column_helpers.sql", "original_file_path": "macros\\materializations\\models\\incremental\\column_helpers.sql", "unique_id": "macro.dbt.diff_column_data_types", "macro_sql": "{% macro diff_column_data_types(source_columns, target_columns) %}\n\n  {% set result = [] %}\n  {% for sc in source_columns %}\n    {% set tc = target_columns | selectattr(\"name\", \"equalto\", sc.name) | list | first %}\n    {% if tc %}\n      {% if sc.data_type != tc.data_type and not sc.can_expand_to(other_column=tc) %}\n        {{ result.append( { 'column_name': tc.name, 'new_type': sc.data_type } ) }}\n      {% endif %}\n    {% endif %}\n  {% endfor %}\n\n  {{ return(result) }}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720537836.2821925, "supported_languages": null}, "macro.dbt.get_merge_update_columns": {"name": "get_merge_update_columns", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\models\\incremental\\column_helpers.sql", "original_file_path": "macros\\materializations\\models\\incremental\\column_helpers.sql", "unique_id": "macro.dbt.get_merge_update_columns", "macro_sql": "{% macro get_merge_update_columns(merge_update_columns, merge_exclude_columns, dest_columns) %}\n  {{ return(adapter.dispatch('get_merge_update_columns', 'dbt')(merge_update_columns, merge_exclude_columns, dest_columns)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_merge_update_columns"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720537836.2972174, "supported_languages": null}, "macro.dbt.default__get_merge_update_columns": {"name": "default__get_merge_update_columns", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\models\\incremental\\column_helpers.sql", "original_file_path": "macros\\materializations\\models\\incremental\\column_helpers.sql", "unique_id": "macro.dbt.default__get_merge_update_columns", "macro_sql": "{% macro default__get_merge_update_columns(merge_update_columns, merge_exclude_columns, dest_columns) %}\n  {%- set default_cols = dest_columns | map(attribute=\"quoted\") | list -%}\n\n  {%- if merge_update_columns and merge_exclude_columns -%}\n    {{ exceptions.raise_compiler_error(\n        'Model cannot specify merge_update_columns and merge_exclude_columns. Please update model to use only one config'\n    )}}\n  {%- elif merge_update_columns -%}\n    {%- set update_columns = merge_update_columns -%}\n  {%- elif merge_exclude_columns -%}\n    {%- set update_columns = [] -%}\n    {%- for column in dest_columns -%}\n      {% if column.column | lower not in merge_exclude_columns | map(\"lower\") | list %}\n        {%- do update_columns.append(column.quoted) -%}\n      {% endif %}\n    {%- endfor -%}\n  {%- else -%}\n    {%- set update_columns = default_cols -%}\n  {%- endif -%}\n\n  {{ return(update_columns) }}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720537836.2972174, "supported_languages": null}, "macro.dbt.materialization_incremental_default": {"name": "materialization_incremental_default", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\models\\incremental\\incremental.sql", "original_file_path": "macros\\materializations\\models\\incremental\\incremental.sql", "unique_id": "macro.dbt.materialization_incremental_default", "macro_sql": "{% materialization incremental, default -%}\n\n  -- relations\n  {%- set existing_relation = load_cached_relation(this) -%}\n  {%- set target_relation = this.incorporate(type='table') -%}\n  {%- set temp_relation = make_temp_relation(target_relation)-%}\n  {%- set intermediate_relation = make_intermediate_relation(target_relation)-%}\n  {%- set backup_relation_type = 'table' if existing_relation is none else existing_relation.type -%}\n  {%- set backup_relation = make_backup_relation(target_relation, backup_relation_type) -%}\n\n  -- configs\n  {%- set unique_key = config.get('unique_key') -%}\n  {%- set full_refresh_mode = (should_full_refresh()  or existing_relation.is_view) -%}\n  {%- set on_schema_change = incremental_validate_on_schema_change(config.get('on_schema_change'), default='ignore') -%}\n\n  -- the temp_ and backup_ relations should not already exist in the database; get_relation\n  -- will return None in that case. Otherwise, we get a relation that we can drop\n  -- later, before we try to use this name for the current operation. This has to happen before\n  -- BEGIN, in a separate transaction\n  {%- set preexisting_intermediate_relation = load_cached_relation(intermediate_relation)-%}\n  {%- set preexisting_backup_relation = load_cached_relation(backup_relation) -%}\n   -- grab current tables grants config for comparision later on\n  {% set grant_config = config.get('grants') %}\n  {{ drop_relation_if_exists(preexisting_intermediate_relation) }}\n  {{ drop_relation_if_exists(preexisting_backup_relation) }}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  -- `BEGIN` happens here:\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  {% set to_drop = [] %}\n\n  {% if existing_relation is none %}\n      {% set build_sql = get_create_table_as_sql(False, target_relation, sql) %}\n  {% elif full_refresh_mode %}\n      {% set build_sql = get_create_table_as_sql(False, intermediate_relation, sql) %}\n      {% set need_swap = true %}\n  {% else %}\n    {% do run_query(get_create_table_as_sql(True, temp_relation, sql)) %}\n    {% do adapter.expand_target_column_types(\n             from_relation=temp_relation,\n             to_relation=target_relation) %}\n    {#-- Process schema changes. Returns dict of changes if successful. Use source columns for upserting/merging --#}\n    {% set dest_columns = process_schema_changes(on_schema_change, temp_relation, existing_relation) %}\n    {% if not dest_columns %}\n      {% set dest_columns = adapter.get_columns_in_relation(existing_relation) %}\n    {% endif %}\n\n    {#-- Get the incremental_strategy, the macro to use for the strategy, and build the sql --#}\n    {% set incremental_strategy = config.get('incremental_strategy') or 'default' %}\n    {% set incremental_predicates = config.get('predicates', none) or config.get('incremental_predicates', none) %}\n    {% set strategy_sql_macro_func = adapter.get_incremental_strategy_macro(context, incremental_strategy) %}\n    {% set strategy_arg_dict = ({'target_relation': target_relation, 'temp_relation': temp_relation, 'unique_key': unique_key, 'dest_columns': dest_columns, 'incremental_predicates': incremental_predicates }) %}\n    {% set build_sql = strategy_sql_macro_func(strategy_arg_dict) %}\n\n  {% endif %}\n\n  {% call statement(\"main\") %}\n      {{ build_sql }}\n  {% endcall %}\n\n  {% if need_swap %}\n      {% do adapter.rename_relation(target_relation, backup_relation) %}\n      {% do adapter.rename_relation(intermediate_relation, target_relation) %}\n      {% do to_drop.append(backup_relation) %}\n  {% endif %}\n\n  {% set should_revoke = should_revoke(existing_relation, full_refresh_mode) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {% if existing_relation is none or existing_relation.is_view or should_full_refresh() %}\n    {% do create_indexes(target_relation) %}\n  {% endif %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  -- `COMMIT` happens here\n  {% do adapter.commit() %}\n\n  {% for rel in to_drop %}\n      {% do adapter.drop_relation(rel) %}\n  {% endfor %}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{%- endmaterialization %}", "depends_on": {"macros": ["macro.dbt.load_cached_relation", "macro.dbt.make_temp_relation", "macro.dbt.make_intermediate_relation", "macro.dbt.make_backup_relation", "macro.dbt.should_full_refresh", "macro.dbt.incremental_validate_on_schema_change", "macro.dbt.drop_relation_if_exists", "macro.dbt.run_hooks", "macro.dbt.get_create_table_as_sql", "macro.dbt.run_query", "macro.dbt.process_schema_changes", "macro.dbt.statement", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs", "macro.dbt.create_indexes"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720537836.3122728, "supported_languages": ["sql"]}, "macro.dbt.is_incremental": {"name": "is_incremental", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\models\\incremental\\is_incremental.sql", "original_file_path": "macros\\materializations\\models\\incremental\\is_incremental.sql", "unique_id": "macro.dbt.is_incremental", "macro_sql": "{% macro is_incremental() %}\n    {#-- do not run introspective queries in parsing #}\n    {% if not execute %}\n        {{ return(False) }}\n    {% else %}\n        {% set relation = adapter.get_relation(this.database, this.schema, this.table) %}\n        {{ return(relation is not none\n                  and relation.type == 'table'\n                  and model.config.materialized == 'incremental'\n                  and not should_full_refresh()) }}\n    {% endif %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.should_full_refresh"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720537836.3122728, "supported_languages": null}, "macro.dbt.get_merge_sql": {"name": "get_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\models\\incremental\\merge.sql", "original_file_path": "macros\\materializations\\models\\incremental\\merge.sql", "unique_id": "macro.dbt.get_merge_sql", "macro_sql": "{% macro get_merge_sql(target, source, unique_key, dest_columns, incremental_predicates=none) -%}\n   -- back compat for old kwarg name\n  {% set incremental_predicates = kwargs.get('predicates', incremental_predicates) %}\n  {{ adapter.dispatch('get_merge_sql', 'dbt')(target, source, unique_key, dest_columns, incremental_predicates) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_sqlserver.sqlserver__get_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720537836.327398, "supported_languages": null}, "macro.dbt.default__get_merge_sql": {"name": "default__get_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\models\\incremental\\merge.sql", "original_file_path": "macros\\materializations\\models\\incremental\\merge.sql", "unique_id": "macro.dbt.default__get_merge_sql", "macro_sql": "{% macro default__get_merge_sql(target, source, unique_key, dest_columns, incremental_predicates=none) -%}\n    {%- set predicates = [] if incremental_predicates is none else [] + incremental_predicates -%}\n    {%- set dest_cols_csv = get_quoted_csv(dest_columns | map(attribute=\"name\")) -%}\n    {%- set merge_update_columns = config.get('merge_update_columns') -%}\n    {%- set merge_exclude_columns = config.get('merge_exclude_columns') -%}\n    {%- set update_columns = get_merge_update_columns(merge_update_columns, merge_exclude_columns, dest_columns) -%}\n    {%- set sql_header = config.get('sql_header', none) -%}\n\n    {% if unique_key %}\n        {% if unique_key is sequence and unique_key is not mapping and unique_key is not string %}\n            {% for key in unique_key %}\n                {% set this_key_match %}\n                    DBT_INTERNAL_SOURCE.{{ key }} = DBT_INTERNAL_DEST.{{ key }}\n                {% endset %}\n                {% do predicates.append(this_key_match) %}\n            {% endfor %}\n        {% else %}\n            {% set unique_key_match %}\n                DBT_INTERNAL_SOURCE.{{ unique_key }} = DBT_INTERNAL_DEST.{{ unique_key }}\n            {% endset %}\n            {% do predicates.append(unique_key_match) %}\n        {% endif %}\n    {% else %}\n        {% do predicates.append('FALSE') %}\n    {% endif %}\n\n    {{ sql_header if sql_header is not none }}\n\n    merge into {{ target }} as DBT_INTERNAL_DEST\n        using {{ source }} as DBT_INTERNAL_SOURCE\n        on {{\"(\" ~ predicates | join(\") and (\") ~ \")\"}}\n\n    {% if unique_key %}\n    when matched then update set\n        {% for column_name in update_columns -%}\n            {{ column_name }} = DBT_INTERNAL_SOURCE.{{ column_name }}\n            {%- if not loop.last %}, {%- endif %}\n        {%- endfor %}\n    {% endif %}\n\n    when not matched then insert\n        ({{ dest_cols_csv }})\n    values\n        ({{ dest_cols_csv }})\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_quoted_csv", "macro.dbt.get_merge_update_columns"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720537836.327398, "supported_languages": null}, "macro.dbt.get_delete_insert_merge_sql": {"name": "get_delete_insert_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\models\\incremental\\merge.sql", "original_file_path": "macros\\materializations\\models\\incremental\\merge.sql", "unique_id": "macro.dbt.get_delete_insert_merge_sql", "macro_sql": "{% macro get_delete_insert_merge_sql(target, source, unique_key, dest_columns, incremental_predicates) -%}\n  {{ adapter.dispatch('get_delete_insert_merge_sql', 'dbt')(target, source, unique_key, dest_columns, incremental_predicates) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_sqlserver.sqlserver__get_delete_insert_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720537836.327398, "supported_languages": null}, "macro.dbt.default__get_delete_insert_merge_sql": {"name": "default__get_delete_insert_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\models\\incremental\\merge.sql", "original_file_path": "macros\\materializations\\models\\incremental\\merge.sql", "unique_id": "macro.dbt.default__get_delete_insert_merge_sql", "macro_sql": "{% macro default__get_delete_insert_merge_sql(target, source, unique_key, dest_columns, incremental_predicates) -%}\n\n    {%- set dest_cols_csv = get_quoted_csv(dest_columns | map(attribute=\"name\")) -%}\n\n    {% if unique_key %}\n        {% if unique_key is sequence and unique_key is not string %}\n            delete from {{target }}\n            using {{ source }}\n            where (\n                {% for key in unique_key %}\n                    {{ source }}.{{ key }} = {{ target }}.{{ key }}\n                    {{ \"and \" if not loop.last}}\n                {% endfor %}\n                {% if incremental_predicates %}\n                    {% for predicate in incremental_predicates %}\n                        and {{ predicate }}\n                    {% endfor %}\n                {% endif %}\n            );\n        {% else %}\n            delete from {{ target }}\n            where (\n                {{ unique_key }}) in (\n                select ({{ unique_key }})\n                from {{ source }}\n            )\n            {%- if incremental_predicates %}\n                {% for predicate in incremental_predicates %}\n                    and {{ predicate }}\n                {% endfor %}\n            {%- endif -%};\n\n        {% endif %}\n    {% endif %}\n\n    insert into {{ target }} ({{ dest_cols_csv }})\n    (\n        select {{ dest_cols_csv }}\n        from {{ source }}\n    )\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.get_quoted_csv"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720537836.3374684, "supported_languages": null}, "macro.dbt.get_insert_overwrite_merge_sql": {"name": "get_insert_overwrite_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\models\\incremental\\merge.sql", "original_file_path": "macros\\materializations\\models\\incremental\\merge.sql", "unique_id": "macro.dbt.get_insert_overwrite_merge_sql", "macro_sql": "{% macro get_insert_overwrite_merge_sql(target, source, dest_columns, predicates, include_sql_header=false) -%}\n  {{ adapter.dispatch('get_insert_overwrite_merge_sql', 'dbt')(target, source, dest_columns, predicates, include_sql_header) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_sqlserver.sqlserver__get_insert_overwrite_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720537836.3374684, "supported_languages": null}, "macro.dbt.default__get_insert_overwrite_merge_sql": {"name": "default__get_insert_overwrite_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\models\\incremental\\merge.sql", "original_file_path": "macros\\materializations\\models\\incremental\\merge.sql", "unique_id": "macro.dbt.default__get_insert_overwrite_merge_sql", "macro_sql": "{% macro default__get_insert_overwrite_merge_sql(target, source, dest_columns, predicates, include_sql_header) -%}\n    {#-- The only time include_sql_header is True: --#}\n    {#-- BigQuery + insert_overwrite strategy + \"static\" partitions config --#}\n    {#-- We should consider including the sql header at the materialization level instead --#}\n\n    {%- set predicates = [] if predicates is none else [] + predicates -%}\n    {%- set dest_cols_csv = get_quoted_csv(dest_columns | map(attribute=\"name\")) -%}\n    {%- set sql_header = config.get('sql_header', none) -%}\n\n    {{ sql_header if sql_header is not none and include_sql_header }}\n\n    merge into {{ target }} as DBT_INTERNAL_DEST\n        using {{ source }} as DBT_INTERNAL_SOURCE\n        on FALSE\n\n    when not matched by source\n        {% if predicates %} and {{ predicates | join(' and ') }} {% endif %}\n        then delete\n\n    when not matched then insert\n        ({{ dest_cols_csv }})\n    values\n        ({{ dest_cols_csv }})\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_quoted_csv"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720537836.3374684, "supported_languages": null}, "macro.dbt.incremental_validate_on_schema_change": {"name": "incremental_validate_on_schema_change", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\models\\incremental\\on_schema_change.sql", "original_file_path": "macros\\materializations\\models\\incremental\\on_schema_change.sql", "unique_id": "macro.dbt.incremental_validate_on_schema_change", "macro_sql": "{% macro incremental_validate_on_schema_change(on_schema_change, default='ignore') %}\n\n   {% if on_schema_change not in ['sync_all_columns', 'append_new_columns', 'fail', 'ignore'] %}\n\n     {% set log_message = 'Invalid value for on_schema_change (%s) specified. Setting default value of %s.' % (on_schema_change, default) %}\n     {% do log(log_message) %}\n\n     {{ return(default) }}\n\n   {% else %}\n\n     {{ return(on_schema_change) }}\n\n   {% endif %}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720537836.3424923, "supported_languages": null}, "macro.dbt.check_for_schema_changes": {"name": "check_for_schema_changes", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\models\\incremental\\on_schema_change.sql", "original_file_path": "macros\\materializations\\models\\incremental\\on_schema_change.sql", "unique_id": "macro.dbt.check_for_schema_changes", "macro_sql": "{% macro check_for_schema_changes(source_relation, target_relation) %}\n\n  {% set schema_changed = False %}\n\n  {%- set source_columns = adapter.get_columns_in_relation(source_relation) -%}\n  {%- set target_columns = adapter.get_columns_in_relation(target_relation) -%}\n  {%- set source_not_in_target = diff_columns(source_columns, target_columns) -%}\n  {%- set target_not_in_source = diff_columns(target_columns, source_columns) -%}\n\n  {% set new_target_types = diff_column_data_types(source_columns, target_columns) %}\n\n  {% if source_not_in_target != [] %}\n    {% set schema_changed = True %}\n  {% elif target_not_in_source != [] or new_target_types != [] %}\n    {% set schema_changed = True %}\n  {% elif new_target_types != [] %}\n    {% set schema_changed = True %}\n  {% endif %}\n\n  {% set changes_dict = {\n    'schema_changed': schema_changed,\n    'source_not_in_target': source_not_in_target,\n    'target_not_in_source': target_not_in_source,\n    'source_columns': source_columns,\n    'target_columns': target_columns,\n    'new_target_types': new_target_types\n  } %}\n\n  {% set msg %}\n    In {{ target_relation }}:\n        Schema changed: {{ schema_changed }}\n        Source columns not in target: {{ source_not_in_target }}\n        Target columns not in source: {{ target_not_in_source }}\n        New column types: {{ new_target_types }}\n  {% endset %}\n\n  {% do log(msg) %}\n\n  {{ return(changes_dict) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.diff_columns", "macro.dbt.diff_column_data_types"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720537836.3424923, "supported_languages": null}, "macro.dbt.sync_column_schemas": {"name": "sync_column_schemas", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\models\\incremental\\on_schema_change.sql", "original_file_path": "macros\\materializations\\models\\incremental\\on_schema_change.sql", "unique_id": "macro.dbt.sync_column_schemas", "macro_sql": "{% macro sync_column_schemas(on_schema_change, target_relation, schema_changes_dict) %}\n\n  {%- set add_to_target_arr = schema_changes_dict['source_not_in_target'] -%}\n\n  {%- if on_schema_change == 'append_new_columns'-%}\n     {%- if add_to_target_arr | length > 0 -%}\n       {%- do alter_relation_add_remove_columns(target_relation, add_to_target_arr, none) -%}\n     {%- endif -%}\n\n  {% elif on_schema_change == 'sync_all_columns' %}\n     {%- set remove_from_target_arr = schema_changes_dict['target_not_in_source'] -%}\n     {%- set new_target_types = schema_changes_dict['new_target_types'] -%}\n\n     {% if add_to_target_arr | length > 0 or remove_from_target_arr | length > 0 %}\n       {%- do alter_relation_add_remove_columns(target_relation, add_to_target_arr, remove_from_target_arr) -%}\n     {% endif %}\n\n     {% if new_target_types != [] %}\n       {% for ntt in new_target_types %}\n         {% set column_name = ntt['column_name'] %}\n         {% set new_type = ntt['new_type'] %}\n         {% do alter_column_type(target_relation, column_name, new_type) %}\n       {% endfor %}\n     {% endif %}\n\n  {% endif %}\n\n  {% set schema_change_message %}\n    In {{ target_relation }}:\n        Schema change approach: {{ on_schema_change }}\n        Columns added: {{ add_to_target_arr }}\n        Columns removed: {{ remove_from_target_arr }}\n        Data types changed: {{ new_target_types }}\n  {% endset %}\n\n  {% do log(schema_change_message) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.alter_relation_add_remove_columns", "macro.dbt.alter_column_type"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720537836.3575156, "supported_languages": null}, "macro.dbt.process_schema_changes": {"name": "process_schema_changes", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\models\\incremental\\on_schema_change.sql", "original_file_path": "macros\\materializations\\models\\incremental\\on_schema_change.sql", "unique_id": "macro.dbt.process_schema_changes", "macro_sql": "{% macro process_schema_changes(on_schema_change, source_relation, target_relation) %}\n\n    {% if on_schema_change == 'ignore' %}\n\n     {{ return({}) }}\n\n    {% else %}\n\n      {% set schema_changes_dict = check_for_schema_changes(source_relation, target_relation) %}\n\n      {% if schema_changes_dict['schema_changed'] %}\n\n        {% if on_schema_change == 'fail' %}\n\n          {% set fail_msg %}\n              The source and target schemas on this incremental model are out of sync!\n              They can be reconciled in several ways:\n                - set the `on_schema_change` config to either append_new_columns or sync_all_columns, depending on your situation.\n                - Re-run the incremental model with `full_refresh: True` to update the target schema.\n                - update the schema manually and re-run the process.\n\n              Additional troubleshooting context:\n                 Source columns not in target: {{ schema_changes_dict['source_not_in_target'] }}\n                 Target columns not in source: {{ schema_changes_dict['target_not_in_source'] }}\n                 New column types: {{ schema_changes_dict['new_target_types'] }}\n          {% endset %}\n\n          {% do exceptions.raise_compiler_error(fail_msg) %}\n\n        {# -- unless we ignore, run the sync operation per the config #}\n        {% else %}\n\n          {% do sync_column_schemas(on_schema_change, target_relation, schema_changes_dict) %}\n\n        {% endif %}\n\n      {% endif %}\n\n      {{ return(schema_changes_dict['source_columns']) }}\n\n    {% endif %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.check_for_schema_changes", "macro.dbt.sync_column_schemas"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720537836.3575156, "supported_languages": null}, "macro.dbt.get_incremental_append_sql": {"name": "get_incremental_append_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\models\\incremental\\strategies.sql", "original_file_path": "macros\\materializations\\models\\incremental\\strategies.sql", "unique_id": "macro.dbt.get_incremental_append_sql", "macro_sql": "{% macro get_incremental_append_sql(arg_dict) %}\n\n  {{ return(adapter.dispatch('get_incremental_append_sql', 'dbt')(arg_dict)) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_incremental_append_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720537836.3575156, "supported_languages": null}, "macro.dbt.default__get_incremental_append_sql": {"name": "default__get_incremental_append_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\models\\incremental\\strategies.sql", "original_file_path": "macros\\materializations\\models\\incremental\\strategies.sql", "unique_id": "macro.dbt.default__get_incremental_append_sql", "macro_sql": "{% macro default__get_incremental_append_sql(arg_dict) %}\n\n  {% do return(get_insert_into_sql(arg_dict[\"target_relation\"], arg_dict[\"temp_relation\"], arg_dict[\"dest_columns\"])) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_insert_into_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720537836.3575156, "supported_languages": null}, "macro.dbt.get_incremental_delete_insert_sql": {"name": "get_incremental_delete_insert_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\models\\incremental\\strategies.sql", "original_file_path": "macros\\materializations\\models\\incremental\\strategies.sql", "unique_id": "macro.dbt.get_incremental_delete_insert_sql", "macro_sql": "{% macro get_incremental_delete_insert_sql(arg_dict) %}\n\n  {{ return(adapter.dispatch('get_incremental_delete_insert_sql', 'dbt')(arg_dict)) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_incremental_delete_insert_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720537836.3575156, "supported_languages": null}, "macro.dbt.default__get_incremental_delete_insert_sql": {"name": "default__get_incremental_delete_insert_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\models\\incremental\\strategies.sql", "original_file_path": "macros\\materializations\\models\\incremental\\strategies.sql", "unique_id": "macro.dbt.default__get_incremental_delete_insert_sql", "macro_sql": "{% macro default__get_incremental_delete_insert_sql(arg_dict) %}\n\n  {% do return(get_delete_insert_merge_sql(arg_dict[\"target_relation\"], arg_dict[\"temp_relation\"], arg_dict[\"unique_key\"], arg_dict[\"dest_columns\"], arg_dict[\"incremental_predicates\"])) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_delete_insert_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720537836.3575156, "supported_languages": null}, "macro.dbt.get_incremental_merge_sql": {"name": "get_incremental_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\models\\incremental\\strategies.sql", "original_file_path": "macros\\materializations\\models\\incremental\\strategies.sql", "unique_id": "macro.dbt.get_incremental_merge_sql", "macro_sql": "{% macro get_incremental_merge_sql(arg_dict) %}\n\n  {{ return(adapter.dispatch('get_incremental_merge_sql', 'dbt')(arg_dict)) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_incremental_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720537836.3575156, "supported_languages": null}, "macro.dbt.default__get_incremental_merge_sql": {"name": "default__get_incremental_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\models\\incremental\\strategies.sql", "original_file_path": "macros\\materializations\\models\\incremental\\strategies.sql", "unique_id": "macro.dbt.default__get_incremental_merge_sql", "macro_sql": "{% macro default__get_incremental_merge_sql(arg_dict) %}\n\n  {% do return(get_merge_sql(arg_dict[\"target_relation\"], arg_dict[\"temp_relation\"], arg_dict[\"unique_key\"], arg_dict[\"dest_columns\"], arg_dict[\"incremental_predicates\"])) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720537836.3575156, "supported_languages": null}, "macro.dbt.get_incremental_insert_overwrite_sql": {"name": "get_incremental_insert_overwrite_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\models\\incremental\\strategies.sql", "original_file_path": "macros\\materializations\\models\\incremental\\strategies.sql", "unique_id": "macro.dbt.get_incremental_insert_overwrite_sql", "macro_sql": "{% macro get_incremental_insert_overwrite_sql(arg_dict) %}\n\n  {{ return(adapter.dispatch('get_incremental_insert_overwrite_sql', 'dbt')(arg_dict)) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_incremental_insert_overwrite_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720537836.3575156, "supported_languages": null}, "macro.dbt.default__get_incremental_insert_overwrite_sql": {"name": "default__get_incremental_insert_overwrite_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\models\\incremental\\strategies.sql", "original_file_path": "macros\\materializations\\models\\incremental\\strategies.sql", "unique_id": "macro.dbt.default__get_incremental_insert_overwrite_sql", "macro_sql": "{% macro default__get_incremental_insert_overwrite_sql(arg_dict) %}\n\n  {% do return(get_insert_overwrite_merge_sql(arg_dict[\"target_relation\"], arg_dict[\"temp_relation\"], arg_dict[\"dest_columns\"], arg_dict[\"incremental_predicates\"])) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_insert_overwrite_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720537836.3575156, "supported_languages": null}, "macro.dbt.get_incremental_default_sql": {"name": "get_incremental_default_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\models\\incremental\\strategies.sql", "original_file_path": "macros\\materializations\\models\\incremental\\strategies.sql", "unique_id": "macro.dbt.get_incremental_default_sql", "macro_sql": "{% macro get_incremental_default_sql(arg_dict) %}\n\n  {{ return(adapter.dispatch('get_incremental_default_sql', 'dbt')(arg_dict)) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_sqlserver.sqlserver__get_incremental_default_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720537836.3575156, "supported_languages": null}, "macro.dbt.default__get_incremental_default_sql": {"name": "default__get_incremental_default_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\models\\incremental\\strategies.sql", "original_file_path": "macros\\materializations\\models\\incremental\\strategies.sql", "unique_id": "macro.dbt.default__get_incremental_default_sql", "macro_sql": "{% macro default__get_incremental_default_sql(arg_dict) %}\n\n  {% do return(get_incremental_append_sql(arg_dict)) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_incremental_append_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720537836.3575156, "supported_languages": null}, "macro.dbt.get_insert_into_sql": {"name": "get_insert_into_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\models\\incremental\\strategies.sql", "original_file_path": "macros\\materializations\\models\\incremental\\strategies.sql", "unique_id": "macro.dbt.get_insert_into_sql", "macro_sql": "{% macro get_insert_into_sql(target_relation, temp_relation, dest_columns) %}\n\n    {%- set dest_cols_csv = get_quoted_csv(dest_columns | map(attribute=\"name\")) -%}\n\n    insert into {{ target_relation }} ({{ dest_cols_csv }})\n    (\n        select {{ dest_cols_csv }}\n        from {{ temp_relation }}\n    )\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_quoted_csv"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720537836.3575156, "supported_languages": null}, "macro.dbt.get_create_table_as_sql": {"name": "get_create_table_as_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\models\\table\\create_table_as.sql", "original_file_path": "macros\\materializations\\models\\table\\create_table_as.sql", "unique_id": "macro.dbt.get_create_table_as_sql", "macro_sql": "{% macro get_create_table_as_sql(temporary, relation, sql) -%}\n  {{ adapter.dispatch('get_create_table_as_sql', 'dbt')(temporary, relation, sql) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_create_table_as_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720537836.3725696, "supported_languages": null}, "macro.dbt.default__get_create_table_as_sql": {"name": "default__get_create_table_as_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\models\\table\\create_table_as.sql", "original_file_path": "macros\\materializations\\models\\table\\create_table_as.sql", "unique_id": "macro.dbt.default__get_create_table_as_sql", "macro_sql": "{% macro default__get_create_table_as_sql(temporary, relation, sql) -%}\n  {{ return(create_table_as(temporary, relation, sql)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.create_table_as"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720537836.3725696, "supported_languages": null}, "macro.dbt.create_table_as": {"name": "create_table_as", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\models\\table\\create_table_as.sql", "original_file_path": "macros\\materializations\\models\\table\\create_table_as.sql", "unique_id": "macro.dbt.create_table_as", "macro_sql": "{% macro create_table_as(temporary, relation, compiled_code, language='sql') -%}\n  {# backward compatibility for create_table_as that does not support language #}\n  {% if language == \"sql\" %}\n    {{ adapter.dispatch('create_table_as', 'dbt')(temporary, relation, compiled_code)}}\n  {% else %}\n    {{ adapter.dispatch('create_table_as', 'dbt')(temporary, relation, compiled_code, language) }}\n  {% endif %}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_sqlserver.sqlserver__create_table_as"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720537836.3725696, "supported_languages": null}, "macro.dbt.default__create_table_as": {"name": "default__create_table_as", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\models\\table\\create_table_as.sql", "original_file_path": "macros\\materializations\\models\\table\\create_table_as.sql", "unique_id": "macro.dbt.default__create_table_as", "macro_sql": "{% macro default__create_table_as(temporary, relation, sql) -%}\n  {%- set sql_header = config.get('sql_header', none) -%}\n\n  {{ sql_header if sql_header is not none }}\n\n  create {% if temporary: -%}temporary{%- endif %} table\n    {{ relation.include(database=(not temporary), schema=(not temporary)) }}\n  as (\n    {{ sql }}\n  );\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720537836.3725696, "supported_languages": null}, "macro.dbt.materialization_table_default": {"name": "materialization_table_default", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\models\\table\\table.sql", "original_file_path": "macros\\materializations\\models\\table\\table.sql", "unique_id": "macro.dbt.materialization_table_default", "macro_sql": "{% materialization table, default %}\n\n  {%- set existing_relation = load_cached_relation(this) -%}\n  {%- set target_relation = this.incorporate(type='table') %}\n  {%- set intermediate_relation =  make_intermediate_relation(target_relation) -%}\n  -- the intermediate_relation should not already exist in the database; get_relation\n  -- will return None in that case. Otherwise, we get a relation that we can drop\n  -- later, before we try to use this name for the current operation\n  {%- set preexisting_intermediate_relation = load_cached_relation(intermediate_relation) -%}\n  /*\n      See ../view/view.sql for more information about this relation.\n  */\n  {%- set backup_relation_type = 'table' if existing_relation is none else existing_relation.type -%}\n  {%- set backup_relation = make_backup_relation(target_relation, backup_relation_type) -%}\n  -- as above, the backup_relation should not already exist\n  {%- set preexisting_backup_relation = load_cached_relation(backup_relation) -%}\n  -- grab current tables grants config for comparision later on\n  {% set grant_config = config.get('grants') %}\n\n  -- drop the temp relations if they exist already in the database\n  {{ drop_relation_if_exists(preexisting_intermediate_relation) }}\n  {{ drop_relation_if_exists(preexisting_backup_relation) }}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  -- `BEGIN` happens here:\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  -- build model\n  {% call statement('main') -%}\n    {{ get_create_table_as_sql(False, intermediate_relation, sql) }}\n  {%- endcall %}\n\n  -- cleanup\n  {% if existing_relation is not none %}\n      {{ adapter.rename_relation(existing_relation, backup_relation) }}\n  {% endif %}\n\n  {{ adapter.rename_relation(intermediate_relation, target_relation) }}\n\n  {% do create_indexes(target_relation) %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  {% set should_revoke = should_revoke(existing_relation, full_refresh_mode=True) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  -- `COMMIT` happens here\n  {{ adapter.commit() }}\n\n  -- finally, drop the existing/backup relation after the commit\n  {{ drop_relation_if_exists(backup_relation) }}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n{% endmaterialization %}", "depends_on": {"macros": ["macro.dbt.load_cached_relation", "macro.dbt.make_intermediate_relation", "macro.dbt.make_backup_relation", "macro.dbt.drop_relation_if_exists", "macro.dbt.run_hooks", "macro.dbt.statement", "macro.dbt.get_create_table_as_sql", "macro.dbt.create_indexes", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720537836.383741, "supported_languages": ["sql"]}, "macro.dbt.create_or_replace_view": {"name": "create_or_replace_view", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\models\\view\\create_or_replace_view.sql", "original_file_path": "macros\\materializations\\models\\view\\create_or_replace_view.sql", "unique_id": "macro.dbt.create_or_replace_view", "macro_sql": "{% macro create_or_replace_view() %}\n  {%- set identifier = model['alias'] -%}\n\n  {%- set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) -%}\n  {%- set exists_as_view = (old_relation is not none and old_relation.is_view) -%}\n\n  {%- set target_relation = api.Relation.create(\n      identifier=identifier, schema=schema, database=database,\n      type='view') -%}\n  {% set grant_config = config.get('grants') %}\n\n  {{ run_hooks(pre_hooks) }}\n\n  -- If there's a table with the same name and we weren't told to full refresh,\n  -- that's an error. If we were told to full refresh, drop it. This behavior differs\n  -- for Snowflake and BigQuery, so multiple dispatch is used.\n  {%- if old_relation is not none and old_relation.is_table -%}\n    {{ handle_existing_table(should_full_refresh(), old_relation) }}\n  {%- endif -%}\n\n  -- build model\n  {% call statement('main') -%}\n    {{ get_create_view_as_sql(target_relation, sql) }}\n  {%- endcall %}\n\n  {% set should_revoke = should_revoke(exists_as_view, full_refresh_mode=True) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=True) %}\n\n  {{ run_hooks(post_hooks) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_hooks", "macro.dbt.handle_existing_table", "macro.dbt.should_full_refresh", "macro.dbt.statement", "macro.dbt.get_create_view_as_sql", "macro.dbt.should_revoke", "macro.dbt.apply_grants"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720537836.3878372, "supported_languages": null}, "macro.dbt.get_create_view_as_sql": {"name": "get_create_view_as_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\models\\view\\create_view_as.sql", "original_file_path": "macros\\materializations\\models\\view\\create_view_as.sql", "unique_id": "macro.dbt.get_create_view_as_sql", "macro_sql": "{% macro get_create_view_as_sql(relation, sql) -%}\n  {{ adapter.dispatch('get_create_view_as_sql', 'dbt')(relation, sql) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_create_view_as_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720537836.3878372, "supported_languages": null}, "macro.dbt.default__get_create_view_as_sql": {"name": "default__get_create_view_as_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\models\\view\\create_view_as.sql", "original_file_path": "macros\\materializations\\models\\view\\create_view_as.sql", "unique_id": "macro.dbt.default__get_create_view_as_sql", "macro_sql": "{% macro default__get_create_view_as_sql(relation, sql) -%}\n  {{ return(create_view_as(relation, sql)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.create_view_as"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720537836.3878372, "supported_languages": null}, "macro.dbt.create_view_as": {"name": "create_view_as", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\models\\view\\create_view_as.sql", "original_file_path": "macros\\materializations\\models\\view\\create_view_as.sql", "unique_id": "macro.dbt.create_view_as", "macro_sql": "{% macro create_view_as(relation, sql) -%}\n  {{ adapter.dispatch('create_view_as', 'dbt')(relation, sql) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_sqlserver.sqlserver__create_view_as"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720537836.3878372, "supported_languages": null}, "macro.dbt.default__create_view_as": {"name": "default__create_view_as", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\models\\view\\create_view_as.sql", "original_file_path": "macros\\materializations\\models\\view\\create_view_as.sql", "unique_id": "macro.dbt.default__create_view_as", "macro_sql": "{% macro default__create_view_as(relation, sql) -%}\n  {%- set sql_header = config.get('sql_header', none) -%}\n\n  {{ sql_header if sql_header is not none }}\n  create view {{ relation }} as (\n    {{ sql }}\n  );\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720537836.3878372, "supported_languages": null}, "macro.dbt.handle_existing_table": {"name": "handle_existing_table", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\models\\view\\helpers.sql", "original_file_path": "macros\\materializations\\models\\view\\helpers.sql", "unique_id": "macro.dbt.handle_existing_table", "macro_sql": "{% macro handle_existing_table(full_refresh, old_relation) %}\n    {{ adapter.dispatch('handle_existing_table', 'dbt')(full_refresh, old_relation) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__handle_existing_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720537836.3878372, "supported_languages": null}, "macro.dbt.default__handle_existing_table": {"name": "default__handle_existing_table", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\models\\view\\helpers.sql", "original_file_path": "macros\\materializations\\models\\view\\helpers.sql", "unique_id": "macro.dbt.default__handle_existing_table", "macro_sql": "{% macro default__handle_existing_table(full_refresh, old_relation) %}\n    {{ log(\"Dropping relation \" ~ old_relation ~ \" because it is of type \" ~ old_relation.type) }}\n    {{ adapter.drop_relation(old_relation) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720537836.3878372, "supported_languages": null}, "macro.dbt.materialization_view_default": {"name": "materialization_view_default", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\models\\view\\view.sql", "original_file_path": "macros\\materializations\\models\\view\\view.sql", "unique_id": "macro.dbt.materialization_view_default", "macro_sql": "{%- materialization view, default -%}\n\n  {%- set existing_relation = load_cached_relation(this) -%}\n  {%- set target_relation = this.incorporate(type='view') -%}\n  {%- set intermediate_relation =  make_intermediate_relation(target_relation) -%}\n\n  -- the intermediate_relation should not already exist in the database; get_relation\n  -- will return None in that case. Otherwise, we get a relation that we can drop\n  -- later, before we try to use this name for the current operation\n  {%- set preexisting_intermediate_relation = load_cached_relation(intermediate_relation) -%}\n  /*\n     This relation (probably) doesn't exist yet. If it does exist, it's a leftover from\n     a previous run, and we're going to try to drop it immediately. At the end of this\n     materialization, we're going to rename the \"existing_relation\" to this identifier,\n     and then we're going to drop it. In order to make sure we run the correct one of:\n       - drop view ...\n       - drop table ...\n\n     We need to set the type of this relation to be the type of the existing_relation, if it exists,\n     or else \"view\" as a sane default if it does not. Note that if the existing_relation does not\n     exist, then there is nothing to move out of the way and subsequentally drop. In that case,\n     this relation will be effectively unused.\n  */\n  {%- set backup_relation_type = 'view' if existing_relation is none else existing_relation.type -%}\n  {%- set backup_relation = make_backup_relation(target_relation, backup_relation_type) -%}\n  -- as above, the backup_relation should not already exist\n  {%- set preexisting_backup_relation = load_cached_relation(backup_relation) -%}\n  -- grab current tables grants config for comparision later on\n  {% set grant_config = config.get('grants') %}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  -- drop the temp relations if they exist already in the database\n  {{ drop_relation_if_exists(preexisting_intermediate_relation) }}\n  {{ drop_relation_if_exists(preexisting_backup_relation) }}\n\n  -- `BEGIN` happens here:\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  -- build model\n  {% call statement('main') -%}\n    {{ get_create_view_as_sql(intermediate_relation, sql) }}\n  {%- endcall %}\n\n  -- cleanup\n  -- move the existing view out of the way\n  {% if existing_relation is not none %}\n    {{ adapter.rename_relation(existing_relation, backup_relation) }}\n  {% endif %}\n  {{ adapter.rename_relation(intermediate_relation, target_relation) }}\n\n  {% set should_revoke = should_revoke(existing_relation, full_refresh_mode=True) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  {{ adapter.commit() }}\n\n  {{ drop_relation_if_exists(backup_relation) }}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{%- endmaterialization -%}", "depends_on": {"macros": ["macro.dbt.load_cached_relation", "macro.dbt.make_intermediate_relation", "macro.dbt.make_backup_relation", "macro.dbt.run_hooks", "macro.dbt.drop_relation_if_exists", "macro.dbt.statement", "macro.dbt.get_create_view_as_sql", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720537836.3878372, "supported_languages": ["sql"]}, "macro.dbt.create_csv_table": {"name": "create_csv_table", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\seeds\\helpers.sql", "original_file_path": "macros\\materializations\\seeds\\helpers.sql", "unique_id": "macro.dbt.create_csv_table", "macro_sql": "{% macro create_csv_table(model, agate_table) -%}\n  {{ adapter.dispatch('create_csv_table', 'dbt')(model, agate_table) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__create_csv_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720537836.4029102, "supported_languages": null}, "macro.dbt.default__create_csv_table": {"name": "default__create_csv_table", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\seeds\\helpers.sql", "original_file_path": "macros\\materializations\\seeds\\helpers.sql", "unique_id": "macro.dbt.default__create_csv_table", "macro_sql": "{% macro default__create_csv_table(model, agate_table) %}\n  {%- set column_override = model['config'].get('column_types', {}) -%}\n  {%- set quote_seed_column = model['config'].get('quote_columns', None) -%}\n\n  {% set sql %}\n    create table {{ this.render() }} (\n        {%- for col_name in agate_table.column_names -%}\n            {%- set inferred_type = adapter.convert_type(agate_table, loop.index0) -%}\n            {%- set type = column_override.get(col_name, inferred_type) -%}\n            {%- set column_name = (col_name | string) -%}\n            {{ adapter.quote_seed_column(column_name, quote_seed_column) }} {{ type }} {%- if not loop.last -%}, {%- endif -%}\n        {%- endfor -%}\n    )\n  {% endset %}\n\n  {% call statement('_') -%}\n    {{ sql }}\n  {%- endcall %}\n\n  {{ return(sql) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720537836.4029102, "supported_languages": null}, "macro.dbt.reset_csv_table": {"name": "reset_csv_table", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\seeds\\helpers.sql", "original_file_path": "macros\\materializations\\seeds\\helpers.sql", "unique_id": "macro.dbt.reset_csv_table", "macro_sql": "{% macro reset_csv_table(model, full_refresh, old_relation, agate_table) -%}\n  {{ adapter.dispatch('reset_csv_table', 'dbt')(model, full_refresh, old_relation, agate_table) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__reset_csv_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720537836.4029102, "supported_languages": null}, "macro.dbt.default__reset_csv_table": {"name": "default__reset_csv_table", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\seeds\\helpers.sql", "original_file_path": "macros\\materializations\\seeds\\helpers.sql", "unique_id": "macro.dbt.default__reset_csv_table", "macro_sql": "{% macro default__reset_csv_table(model, full_refresh, old_relation, agate_table) %}\n    {% set sql = \"\" %}\n    {% if full_refresh %}\n        {{ adapter.drop_relation(old_relation) }}\n        {% set sql = create_csv_table(model, agate_table) %}\n    {% else %}\n        {{ adapter.truncate_relation(old_relation) }}\n        {% set sql = \"truncate table \" ~ old_relation %}\n    {% endif %}\n\n    {{ return(sql) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.create_csv_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720537836.4029102, "supported_languages": null}, "macro.dbt.get_csv_sql": {"name": "get_csv_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\seeds\\helpers.sql", "original_file_path": "macros\\materializations\\seeds\\helpers.sql", "unique_id": "macro.dbt.get_csv_sql", "macro_sql": "{% macro get_csv_sql(create_or_truncate_sql, insert_sql) %}\n    {{ adapter.dispatch('get_csv_sql', 'dbt')(create_or_truncate_sql, insert_sql) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_csv_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720537836.4029102, "supported_languages": null}, "macro.dbt.default__get_csv_sql": {"name": "default__get_csv_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\seeds\\helpers.sql", "original_file_path": "macros\\materializations\\seeds\\helpers.sql", "unique_id": "macro.dbt.default__get_csv_sql", "macro_sql": "{% macro default__get_csv_sql(create_or_truncate_sql, insert_sql) %}\n    {{ create_or_truncate_sql }};\n    -- dbt seed --\n    {{ insert_sql }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720537836.4029102, "supported_languages": null}, "macro.dbt.get_binding_char": {"name": "get_binding_char", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\seeds\\helpers.sql", "original_file_path": "macros\\materializations\\seeds\\helpers.sql", "unique_id": "macro.dbt.get_binding_char", "macro_sql": "{% macro get_binding_char() -%}\n  {{ adapter.dispatch('get_binding_char', 'dbt')() }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_sqlserver.sqlserver__get_binding_char"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720537836.4179177, "supported_languages": null}, "macro.dbt.default__get_binding_char": {"name": "default__get_binding_char", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\seeds\\helpers.sql", "original_file_path": "macros\\materializations\\seeds\\helpers.sql", "unique_id": "macro.dbt.default__get_binding_char", "macro_sql": "{% macro default__get_binding_char() %}\n  {{ return('%s') }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720537836.4179177, "supported_languages": null}, "macro.dbt.get_batch_size": {"name": "get_batch_size", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\seeds\\helpers.sql", "original_file_path": "macros\\materializations\\seeds\\helpers.sql", "unique_id": "macro.dbt.get_batch_size", "macro_sql": "{% macro get_batch_size() -%}\n  {{ return(adapter.dispatch('get_batch_size', 'dbt')()) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_sqlserver.sqlserver__get_batch_size"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720537836.4179177, "supported_languages": null}, "macro.dbt.default__get_batch_size": {"name": "default__get_batch_size", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\seeds\\helpers.sql", "original_file_path": "macros\\materializations\\seeds\\helpers.sql", "unique_id": "macro.dbt.default__get_batch_size", "macro_sql": "{% macro default__get_batch_size() %}\n  {{ return(10000) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720537836.4179177, "supported_languages": null}, "macro.dbt.get_seed_column_quoted_csv": {"name": "get_seed_column_quoted_csv", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\seeds\\helpers.sql", "original_file_path": "macros\\materializations\\seeds\\helpers.sql", "unique_id": "macro.dbt.get_seed_column_quoted_csv", "macro_sql": "{% macro get_seed_column_quoted_csv(model, column_names) %}\n  {%- set quote_seed_column = model['config'].get('quote_columns', None) -%}\n    {% set quoted = [] %}\n    {% for col in column_names -%}\n        {%- do quoted.append(adapter.quote_seed_column(col, quote_seed_column)) -%}\n    {%- endfor %}\n\n    {%- set dest_cols_csv = quoted | join(', ') -%}\n    {{ return(dest_cols_csv) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720537836.4179177, "supported_languages": null}, "macro.dbt.load_csv_rows": {"name": "load_csv_rows", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\seeds\\helpers.sql", "original_file_path": "macros\\materializations\\seeds\\helpers.sql", "unique_id": "macro.dbt.load_csv_rows", "macro_sql": "{% macro load_csv_rows(model, agate_table) -%}\n  {{ adapter.dispatch('load_csv_rows', 'dbt')(model, agate_table) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_sqlserver.sqlserver__load_csv_rows"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720537836.4179177, "supported_languages": null}, "macro.dbt.default__load_csv_rows": {"name": "default__load_csv_rows", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\seeds\\helpers.sql", "original_file_path": "macros\\materializations\\seeds\\helpers.sql", "unique_id": "macro.dbt.default__load_csv_rows", "macro_sql": "{% macro default__load_csv_rows(model, agate_table) %}\n\n  {% set batch_size = get_batch_size() %}\n\n  {% set cols_sql = get_seed_column_quoted_csv(model, agate_table.column_names) %}\n  {% set bindings = [] %}\n\n  {% set statements = [] %}\n\n  {% for chunk in agate_table.rows | batch(batch_size) %}\n      {% set bindings = [] %}\n\n      {% for row in chunk %}\n          {% do bindings.extend(row) %}\n      {% endfor %}\n\n      {% set sql %}\n          insert into {{ this.render() }} ({{ cols_sql }}) values\n          {% for row in chunk -%}\n              ({%- for column in agate_table.column_names -%}\n                  {{ get_binding_char() }}\n                  {%- if not loop.last%},{%- endif %}\n              {%- endfor -%})\n              {%- if not loop.last%},{%- endif %}\n          {%- endfor %}\n      {% endset %}\n\n      {% do adapter.add_query(sql, bindings=bindings, abridge_sql_log=True) %}\n\n      {% if loop.index0 == 0 %}\n          {% do statements.append(sql) %}\n      {% endif %}\n  {% endfor %}\n\n  {# Return SQL so we can render it out into the compiled files #}\n  {{ return(statements[0]) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_batch_size", "macro.dbt.get_seed_column_quoted_csv", "macro.dbt.get_binding_char"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720537836.4179177, "supported_languages": null}, "macro.dbt.materialization_seed_default": {"name": "materialization_seed_default", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\seeds\\seed.sql", "original_file_path": "macros\\materializations\\seeds\\seed.sql", "unique_id": "macro.dbt.materialization_seed_default", "macro_sql": "{% materialization seed, default %}\n\n  {%- set identifier = model['alias'] -%}\n  {%- set full_refresh_mode = (should_full_refresh()) -%}\n\n  {%- set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) -%}\n\n  {%- set exists_as_table = (old_relation is not none and old_relation.is_table) -%}\n  {%- set exists_as_view = (old_relation is not none and old_relation.is_view) -%}\n\n  {%- set grant_config = config.get('grants') -%}\n  {%- set agate_table = load_agate_table() -%}\n  -- grab current tables grants config for comparision later on\n\n  {%- do store_result('agate_table', response='OK', agate_table=agate_table) -%}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  -- `BEGIN` happens here:\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  -- build model\n  {% set create_table_sql = \"\" %}\n  {% if exists_as_view %}\n    {{ exceptions.raise_compiler_error(\"Cannot seed to '{}', it is a view\".format(old_relation)) }}\n  {% elif exists_as_table %}\n    {% set create_table_sql = reset_csv_table(model, full_refresh_mode, old_relation, agate_table) %}\n  {% else %}\n    {% set create_table_sql = create_csv_table(model, agate_table) %}\n  {% endif %}\n\n  {% set code = 'CREATE' if full_refresh_mode else 'INSERT' %}\n  {% set rows_affected = (agate_table.rows | length) %}\n  {% set sql = load_csv_rows(model, agate_table) %}\n\n  {% call noop_statement('main', code ~ ' ' ~ rows_affected, code, rows_affected) %}\n    {{ get_csv_sql(create_table_sql, sql) }};\n  {% endcall %}\n\n  {% set target_relation = this.incorporate(type='table') %}\n\n  {% set should_revoke = should_revoke(old_relation, full_refresh_mode) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {% if full_refresh_mode or not exists_as_table %}\n    {% do create_indexes(target_relation) %}\n  {% endif %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  -- `COMMIT` happens here\n  {{ adapter.commit() }}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{% endmaterialization %}", "depends_on": {"macros": ["macro.dbt.should_full_refresh", "macro.dbt.run_hooks", "macro.dbt.reset_csv_table", "macro.dbt.create_csv_table", "macro.dbt.load_csv_rows", "macro.dbt.noop_statement", "macro.dbt.get_csv_sql", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs", "macro.dbt.create_indexes"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720537836.4330354, "supported_languages": ["sql"]}, "macro.dbt.create_columns": {"name": "create_columns", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\snapshots\\helpers.sql", "original_file_path": "macros\\materializations\\snapshots\\helpers.sql", "unique_id": "macro.dbt.create_columns", "macro_sql": "{% macro create_columns(relation, columns) %}\n  {{ adapter.dispatch('create_columns', 'dbt')(relation, columns) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_sqlserver.sqlserver__create_columns"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720537836.4431086, "supported_languages": null}, "macro.dbt.default__create_columns": {"name": "default__create_columns", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\snapshots\\helpers.sql", "original_file_path": "macros\\materializations\\snapshots\\helpers.sql", "unique_id": "macro.dbt.default__create_columns", "macro_sql": "{% macro default__create_columns(relation, columns) %}\n  {% for column in columns %}\n    {% call statement() %}\n      alter table {{ relation }} add column \"{{ column.name }}\" {{ column.data_type }};\n    {% endcall %}\n  {% endfor %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720537836.4431086, "supported_languages": null}, "macro.dbt.post_snapshot": {"name": "post_snapshot", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\snapshots\\helpers.sql", "original_file_path": "macros\\materializations\\snapshots\\helpers.sql", "unique_id": "macro.dbt.post_snapshot", "macro_sql": "{% macro post_snapshot(staging_relation) %}\n  {{ adapter.dispatch('post_snapshot', 'dbt')(staging_relation) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_sqlserver.sqlserver__post_snapshot"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720537836.4431086, "supported_languages": null}, "macro.dbt.default__post_snapshot": {"name": "default__post_snapshot", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\snapshots\\helpers.sql", "original_file_path": "macros\\materializations\\snapshots\\helpers.sql", "unique_id": "macro.dbt.default__post_snapshot", "macro_sql": "{% macro default__post_snapshot(staging_relation) %}\n    {# no-op #}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720537836.4431086, "supported_languages": null}, "macro.dbt.get_true_sql": {"name": "get_true_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\snapshots\\helpers.sql", "original_file_path": "macros\\materializations\\snapshots\\helpers.sql", "unique_id": "macro.dbt.get_true_sql", "macro_sql": "{% macro get_true_sql() %}\n  {{ adapter.dispatch('get_true_sql', 'dbt')() }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_sqlserver.sqlserver__get_true_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720537836.4431086, "supported_languages": null}, "macro.dbt.default__get_true_sql": {"name": "default__get_true_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\snapshots\\helpers.sql", "original_file_path": "macros\\materializations\\snapshots\\helpers.sql", "unique_id": "macro.dbt.default__get_true_sql", "macro_sql": "{% macro default__get_true_sql() %}\n    {{ return('TRUE') }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720537836.4431086, "supported_languages": null}, "macro.dbt.snapshot_staging_table": {"name": "snapshot_staging_table", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\snapshots\\helpers.sql", "original_file_path": "macros\\materializations\\snapshots\\helpers.sql", "unique_id": "macro.dbt.snapshot_staging_table", "macro_sql": "{% macro snapshot_staging_table(strategy, source_sql, target_relation) -%}\n  {{ adapter.dispatch('snapshot_staging_table', 'dbt')(strategy, source_sql, target_relation) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__snapshot_staging_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720537836.4431086, "supported_languages": null}, "macro.dbt.default__snapshot_staging_table": {"name": "default__snapshot_staging_table", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\snapshots\\helpers.sql", "original_file_path": "macros\\materializations\\snapshots\\helpers.sql", "unique_id": "macro.dbt.default__snapshot_staging_table", "macro_sql": "{% macro default__snapshot_staging_table(strategy, source_sql, target_relation) -%}\n\n    with snapshot_query as (\n\n        {{ source_sql }}\n\n    ),\n\n    snapshotted_data as (\n\n        select *,\n            {{ strategy.unique_key }} as dbt_unique_key\n\n        from {{ target_relation }}\n        where dbt_valid_to is null\n\n    ),\n\n    insertions_source_data as (\n\n        select\n            *,\n            {{ strategy.unique_key }} as dbt_unique_key,\n            {{ strategy.updated_at }} as dbt_updated_at,\n            {{ strategy.updated_at }} as dbt_valid_from,\n            nullif({{ strategy.updated_at }}, {{ strategy.updated_at }}) as dbt_valid_to,\n            {{ strategy.scd_id }} as dbt_scd_id\n\n        from snapshot_query\n    ),\n\n    updates_source_data as (\n\n        select\n            *,\n            {{ strategy.unique_key }} as dbt_unique_key,\n            {{ strategy.updated_at }} as dbt_updated_at,\n            {{ strategy.updated_at }} as dbt_valid_from,\n            {{ strategy.updated_at }} as dbt_valid_to\n\n        from snapshot_query\n    ),\n\n    {%- if strategy.invalidate_hard_deletes %}\n\n    deletes_source_data as (\n\n        select\n            *,\n            {{ strategy.unique_key }} as dbt_unique_key\n        from snapshot_query\n    ),\n    {% endif %}\n\n    insertions as (\n\n        select\n            'insert' as dbt_change_type,\n            source_data.*\n\n        from insertions_source_data as source_data\n        left outer join snapshotted_data on snapshotted_data.dbt_unique_key = source_data.dbt_unique_key\n        where snapshotted_data.dbt_unique_key is null\n           or (\n                snapshotted_data.dbt_unique_key is not null\n            and (\n                {{ strategy.row_changed }}\n            )\n        )\n\n    ),\n\n    updates as (\n\n        select\n            'update' as dbt_change_type,\n            source_data.*,\n            snapshotted_data.dbt_scd_id\n\n        from updates_source_data as source_data\n        join snapshotted_data on snapshotted_data.dbt_unique_key = source_data.dbt_unique_key\n        where (\n            {{ strategy.row_changed }}\n        )\n    )\n\n    {%- if strategy.invalidate_hard_deletes -%}\n    ,\n\n    deletes as (\n\n        select\n            'delete' as dbt_change_type,\n            source_data.*,\n            {{ snapshot_get_time() }} as dbt_valid_from,\n            {{ snapshot_get_time() }} as dbt_updated_at,\n            {{ snapshot_get_time() }} as dbt_valid_to,\n            snapshotted_data.dbt_scd_id\n\n        from snapshotted_data\n        left join deletes_source_data as source_data on snapshotted_data.dbt_unique_key = source_data.dbt_unique_key\n        where source_data.dbt_unique_key is null\n    )\n    {%- endif %}\n\n    select * from insertions\n    union all\n    select * from updates\n    {%- if strategy.invalidate_hard_deletes %}\n    union all\n    select * from deletes\n    {%- endif %}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.snapshot_get_time"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720537836.4481804, "supported_languages": null}, "macro.dbt.build_snapshot_table": {"name": "build_snapshot_table", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\snapshots\\helpers.sql", "original_file_path": "macros\\materializations\\snapshots\\helpers.sql", "unique_id": "macro.dbt.build_snapshot_table", "macro_sql": "{% macro build_snapshot_table(strategy, sql) -%}\n  {{ adapter.dispatch('build_snapshot_table', 'dbt')(strategy, sql) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__build_snapshot_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720537836.4481804, "supported_languages": null}, "macro.dbt.default__build_snapshot_table": {"name": "default__build_snapshot_table", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\snapshots\\helpers.sql", "original_file_path": "macros\\materializations\\snapshots\\helpers.sql", "unique_id": "macro.dbt.default__build_snapshot_table", "macro_sql": "{% macro default__build_snapshot_table(strategy, sql) %}\n\n    select *,\n        {{ strategy.scd_id }} as dbt_scd_id,\n        {{ strategy.updated_at }} as dbt_updated_at,\n        {{ strategy.updated_at }} as dbt_valid_from,\n        nullif({{ strategy.updated_at }}, {{ strategy.updated_at }}) as dbt_valid_to\n    from (\n        {{ sql }}\n    ) sbq\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720537836.4481804, "supported_languages": null}, "macro.dbt.build_snapshot_staging_table": {"name": "build_snapshot_staging_table", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\snapshots\\helpers.sql", "original_file_path": "macros\\materializations\\snapshots\\helpers.sql", "unique_id": "macro.dbt.build_snapshot_staging_table", "macro_sql": "{% macro build_snapshot_staging_table(strategy, sql, target_relation) %}\n    {% set temp_relation = make_temp_relation(target_relation) %}\n\n    {% set select = snapshot_staging_table(strategy, sql, target_relation) %}\n\n    {% call statement('build_snapshot_staging_relation') %}\n        {{ create_table_as(True, temp_relation, select) }}\n    {% endcall %}\n\n    {% do return(temp_relation) %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.make_temp_relation", "macro.dbt.snapshot_staging_table", "macro.dbt.statement", "macro.dbt.create_table_as"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720537836.4481804, "supported_languages": null}, "macro.dbt.materialization_snapshot_default": {"name": "materialization_snapshot_default", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\snapshots\\snapshot.sql", "original_file_path": "macros\\materializations\\snapshots\\snapshot.sql", "unique_id": "macro.dbt.materialization_snapshot_default", "macro_sql": "{% materialization snapshot, default %}\n  {%- set config = model['config'] -%}\n\n  {%- set target_table = model.get('alias', model.get('name')) -%}\n\n  {%- set strategy_name = config.get('strategy') -%}\n  {%- set unique_key = config.get('unique_key') %}\n  -- grab current tables grants config for comparision later on\n  {%- set grant_config = config.get('grants') -%}\n\n  {% set target_relation_exists, target_relation = get_or_create_relation(\n          database=model.database,\n          schema=model.schema,\n          identifier=target_table,\n          type='table') -%}\n\n  {%- if not target_relation.is_table -%}\n    {% do exceptions.relation_wrong_type(target_relation, 'table') %}\n  {%- endif -%}\n\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  {% set strategy_macro = strategy_dispatch(strategy_name) %}\n  {% set strategy = strategy_macro(model, \"snapshotted_data\", \"source_data\", config, target_relation_exists) %}\n\n  {% if not target_relation_exists %}\n\n      {% set build_sql = build_snapshot_table(strategy, model['compiled_code']) %}\n      {% set final_sql = create_table_as(False, target_relation, build_sql) %}\n\n  {% else %}\n\n      {{ adapter.valid_snapshot_target(target_relation) }}\n\n      {% set staging_table = build_snapshot_staging_table(strategy, sql, target_relation) %}\n\n      -- this may no-op if the database does not require column expansion\n      {% do adapter.expand_target_column_types(from_relation=staging_table,\n                                               to_relation=target_relation) %}\n\n      {% set missing_columns = adapter.get_missing_columns(staging_table, target_relation)\n                                   | rejectattr('name', 'equalto', 'dbt_change_type')\n                                   | rejectattr('name', 'equalto', 'DBT_CHANGE_TYPE')\n                                   | rejectattr('name', 'equalto', 'dbt_unique_key')\n                                   | rejectattr('name', 'equalto', 'DBT_UNIQUE_KEY')\n                                   | list %}\n\n      {% do create_columns(target_relation, missing_columns) %}\n\n      {% set source_columns = adapter.get_columns_in_relation(staging_table)\n                                   | rejectattr('name', 'equalto', 'dbt_change_type')\n                                   | rejectattr('name', 'equalto', 'DBT_CHANGE_TYPE')\n                                   | rejectattr('name', 'equalto', 'dbt_unique_key')\n                                   | rejectattr('name', 'equalto', 'DBT_UNIQUE_KEY')\n                                   | list %}\n\n      {% set quoted_source_columns = [] %}\n      {% for column in source_columns %}\n        {% do quoted_source_columns.append(adapter.quote(column.name)) %}\n      {% endfor %}\n\n      {% set final_sql = snapshot_merge_sql(\n            target = target_relation,\n            source = staging_table,\n            insert_cols = quoted_source_columns\n         )\n      %}\n\n  {% endif %}\n\n  {% call statement('main') %}\n      {{ final_sql }}\n  {% endcall %}\n\n  {% set should_revoke = should_revoke(target_relation_exists, full_refresh_mode=False) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {% if not target_relation_exists %}\n    {% do create_indexes(target_relation) %}\n  {% endif %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  {{ adapter.commit() }}\n\n  {% if staging_table is defined %}\n      {% do post_snapshot(staging_table) %}\n  {% endif %}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{% endmaterialization %}", "depends_on": {"macros": ["macro.dbt.get_or_create_relation", "macro.dbt.run_hooks", "macro.dbt.strategy_dispatch", "macro.dbt.build_snapshot_table", "macro.dbt.create_table_as", "macro.dbt.build_snapshot_staging_table", "macro.dbt.create_columns", "macro.dbt.snapshot_merge_sql", "macro.dbt.statement", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs", "macro.dbt.create_indexes", "macro.dbt.post_snapshot"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720537836.4632583, "supported_languages": ["sql"]}, "macro.dbt.snapshot_merge_sql": {"name": "snapshot_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\snapshots\\snapshot_merge.sql", "original_file_path": "macros\\materializations\\snapshots\\snapshot_merge.sql", "unique_id": "macro.dbt.snapshot_merge_sql", "macro_sql": "{% macro snapshot_merge_sql(target, source, insert_cols) -%}\n  {{ adapter.dispatch('snapshot_merge_sql', 'dbt')(target, source, insert_cols) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_sqlserver.sqlserver__snapshot_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720537836.4632583, "supported_languages": null}, "macro.dbt.default__snapshot_merge_sql": {"name": "default__snapshot_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\snapshots\\snapshot_merge.sql", "original_file_path": "macros\\materializations\\snapshots\\snapshot_merge.sql", "unique_id": "macro.dbt.default__snapshot_merge_sql", "macro_sql": "{% macro default__snapshot_merge_sql(target, source, insert_cols) -%}\n    {%- set insert_cols_csv = insert_cols | join(', ') -%}\n\n    merge into {{ target }} as DBT_INTERNAL_DEST\n    using {{ source }} as DBT_INTERNAL_SOURCE\n    on DBT_INTERNAL_SOURCE.dbt_scd_id = DBT_INTERNAL_DEST.dbt_scd_id\n\n    when matched\n     and DBT_INTERNAL_DEST.dbt_valid_to is null\n     and DBT_INTERNAL_SOURCE.dbt_change_type in ('update', 'delete')\n        then update\n        set dbt_valid_to = DBT_INTERNAL_SOURCE.dbt_valid_to\n\n    when not matched\n     and DBT_INTERNAL_SOURCE.dbt_change_type = 'insert'\n        then insert ({{ insert_cols_csv }})\n        values ({{ insert_cols_csv }})\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720537836.4632583, "supported_languages": null}, "macro.dbt.strategy_dispatch": {"name": "strategy_dispatch", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\snapshots\\strategies.sql", "original_file_path": "macros\\materializations\\snapshots\\strategies.sql", "unique_id": "macro.dbt.strategy_dispatch", "macro_sql": "{% macro strategy_dispatch(name) -%}\n{% set original_name = name %}\n  {% if '.' in name %}\n    {% set package_name, name = name.split(\".\", 1) %}\n  {% else %}\n    {% set package_name = none %}\n  {% endif %}\n\n  {% if package_name is none %}\n    {% set package_context = context %}\n  {% elif package_name in context %}\n    {% set package_context = context[package_name] %}\n  {% else %}\n    {% set error_msg %}\n        Could not find package '{{package_name}}', called with '{{original_name}}'\n    {% endset %}\n    {{ exceptions.raise_compiler_error(error_msg | trim) }}\n  {% endif %}\n\n  {%- set search_name = 'snapshot_' ~ name ~ '_strategy' -%}\n\n  {% if search_name not in package_context %}\n    {% set error_msg %}\n        The specified strategy macro '{{name}}' was not found in package '{{ package_name }}'\n    {% endset %}\n    {{ exceptions.raise_compiler_error(error_msg | trim) }}\n  {% endif %}\n  {{ return(package_context[search_name]) }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720537836.4632583, "supported_languages": null}, "macro.dbt.snapshot_hash_arguments": {"name": "snapshot_hash_arguments", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\snapshots\\strategies.sql", "original_file_path": "macros\\materializations\\snapshots\\strategies.sql", "unique_id": "macro.dbt.snapshot_hash_arguments", "macro_sql": "{% macro snapshot_hash_arguments(args) -%}\n  {{ adapter.dispatch('snapshot_hash_arguments', 'dbt')(args) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_sqlserver.sqlserver__snapshot_hash_arguments"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720537836.4778368, "supported_languages": null}, "macro.dbt.default__snapshot_hash_arguments": {"name": "default__snapshot_hash_arguments", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\snapshots\\strategies.sql", "original_file_path": "macros\\materializations\\snapshots\\strategies.sql", "unique_id": "macro.dbt.default__snapshot_hash_arguments", "macro_sql": "{% macro default__snapshot_hash_arguments(args) -%}\n    md5({%- for arg in args -%}\n        coalesce(cast({{ arg }} as varchar ), '')\n        {% if not loop.last %} || '|' || {% endif %}\n    {%- endfor -%})\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720537836.478812, "supported_languages": null}, "macro.dbt.snapshot_timestamp_strategy": {"name": "snapshot_timestamp_strategy", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\snapshots\\strategies.sql", "original_file_path": "macros\\materializations\\snapshots\\strategies.sql", "unique_id": "macro.dbt.snapshot_timestamp_strategy", "macro_sql": "{% macro snapshot_timestamp_strategy(node, snapshotted_rel, current_rel, config, target_exists) %}\n    {% set primary_key = config['unique_key'] %}\n    {% set updated_at = config['updated_at'] %}\n    {% set invalidate_hard_deletes = config.get('invalidate_hard_deletes', false) %}\n\n    {#/*\n        The snapshot relation might not have an {{ updated_at }} value if the\n        snapshot strategy is changed from `check` to `timestamp`. We\n        should use a dbt-created column for the comparison in the snapshot\n        table instead of assuming that the user-supplied {{ updated_at }}\n        will be present in the historical data.\n\n        See https://github.com/dbt-labs/dbt-core/issues/2350\n    */ #}\n    {% set row_changed_expr -%}\n        ({{ snapshotted_rel }}.dbt_valid_from < {{ current_rel }}.{{ updated_at }})\n    {%- endset %}\n\n    {% set scd_id_expr = snapshot_hash_arguments([primary_key, updated_at]) %}\n\n    {% do return({\n        \"unique_key\": primary_key,\n        \"updated_at\": updated_at,\n        \"row_changed\": row_changed_expr,\n        \"scd_id\": scd_id_expr,\n        \"invalidate_hard_deletes\": invalidate_hard_deletes\n    }) %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.snapshot_hash_arguments"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720537836.478812, "supported_languages": null}, "macro.dbt.snapshot_string_as_time": {"name": "snapshot_string_as_time", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\snapshots\\strategies.sql", "original_file_path": "macros\\materializations\\snapshots\\strategies.sql", "unique_id": "macro.dbt.snapshot_string_as_time", "macro_sql": "{% macro snapshot_string_as_time(timestamp) -%}\n    {{ adapter.dispatch('snapshot_string_as_time', 'dbt')(timestamp) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_sqlserver.sqlserver__snapshot_string_as_time"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720537836.478812, "supported_languages": null}, "macro.dbt.default__snapshot_string_as_time": {"name": "default__snapshot_string_as_time", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\snapshots\\strategies.sql", "original_file_path": "macros\\materializations\\snapshots\\strategies.sql", "unique_id": "macro.dbt.default__snapshot_string_as_time", "macro_sql": "{% macro default__snapshot_string_as_time(timestamp) %}\n    {% do exceptions.raise_not_implemented(\n        'snapshot_string_as_time macro not implemented for adapter '+adapter.type()\n    ) %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720537836.478812, "supported_languages": null}, "macro.dbt.snapshot_check_all_get_existing_columns": {"name": "snapshot_check_all_get_existing_columns", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\snapshots\\strategies.sql", "original_file_path": "macros\\materializations\\snapshots\\strategies.sql", "unique_id": "macro.dbt.snapshot_check_all_get_existing_columns", "macro_sql": "{% macro snapshot_check_all_get_existing_columns(node, target_exists, check_cols_config) -%}\n    {%- if not target_exists -%}\n        {#-- no table yet -> return whatever the query does --#}\n        {{ return((false, query_columns)) }}\n    {%- endif -%}\n\n    {#-- handle any schema changes --#}\n    {%- set target_relation = adapter.get_relation(database=node.database, schema=node.schema, identifier=node.alias) -%}\n\n    {% if check_cols_config == 'all' %}\n        {%- set query_columns = get_columns_in_query(node['compiled_code']) -%}\n\n    {% elif check_cols_config is iterable and (check_cols_config | length) > 0 %}\n        {#-- query for proper casing/quoting, to support comparison below --#}\n        {%- set select_check_cols_from_target -%}\n          select {{ check_cols_config | join(', ') }} from ({{ node['compiled_code'] }}) subq\n        {%- endset -%}\n        {% set query_columns = get_columns_in_query(select_check_cols_from_target) %}\n\n    {% else %}\n        {% do exceptions.raise_compiler_error(\"Invalid value for 'check_cols': \" ~ check_cols_config) %}\n    {% endif %}\n\n    {%- set existing_cols = adapter.get_columns_in_relation(target_relation) | map(attribute = 'name') | list -%}\n    {%- set ns = namespace() -%} {#-- handle for-loop scoping with a namespace --#}\n    {%- set ns.column_added = false -%}\n\n    {%- set intersection = [] -%}\n    {%- for col in query_columns -%}\n        {%- if col in existing_cols -%}\n            {%- do intersection.append(adapter.quote(col)) -%}\n        {%- else -%}\n            {% set ns.column_added = true %}\n        {%- endif -%}\n    {%- endfor -%}\n    {{ return((ns.column_added, intersection)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.get_columns_in_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720537836.478812, "supported_languages": null}, "macro.dbt.snapshot_check_strategy": {"name": "snapshot_check_strategy", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\snapshots\\strategies.sql", "original_file_path": "macros\\materializations\\snapshots\\strategies.sql", "unique_id": "macro.dbt.snapshot_check_strategy", "macro_sql": "{% macro snapshot_check_strategy(node, snapshotted_rel, current_rel, config, target_exists) %}\n    {% set check_cols_config = config['check_cols'] %}\n    {% set primary_key = config['unique_key'] %}\n    {% set invalidate_hard_deletes = config.get('invalidate_hard_deletes', false) %}\n    {% set updated_at = config.get('updated_at', snapshot_get_time()) %}\n\n    {% set column_added = false %}\n\n    {% set column_added, check_cols = snapshot_check_all_get_existing_columns(node, target_exists, check_cols_config) %}\n\n    {%- set row_changed_expr -%}\n    (\n    {%- if column_added -%}\n        {{ get_true_sql() }}\n    {%- else -%}\n    {%- for col in check_cols -%}\n        {{ snapshotted_rel }}.{{ col }} != {{ current_rel }}.{{ col }}\n        or\n        (\n            (({{ snapshotted_rel }}.{{ col }} is null) and not ({{ current_rel }}.{{ col }} is null))\n            or\n            ((not {{ snapshotted_rel }}.{{ col }} is null) and ({{ current_rel }}.{{ col }} is null))\n        )\n        {%- if not loop.last %} or {% endif -%}\n    {%- endfor -%}\n    {%- endif -%}\n    )\n    {%- endset %}\n\n    {% set scd_id_expr = snapshot_hash_arguments([primary_key, updated_at]) %}\n\n    {% do return({\n        \"unique_key\": primary_key,\n        \"updated_at\": updated_at,\n        \"row_changed\": row_changed_expr,\n        \"scd_id\": scd_id_expr,\n        \"invalidate_hard_deletes\": invalidate_hard_deletes\n    }) %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.snapshot_get_time", "macro.dbt.snapshot_check_all_get_existing_columns", "macro.dbt.get_true_sql", "macro.dbt.snapshot_hash_arguments"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720537836.4888906, "supported_languages": null}, "macro.dbt.get_test_sql": {"name": "get_test_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\tests\\helpers.sql", "original_file_path": "macros\\materializations\\tests\\helpers.sql", "unique_id": "macro.dbt.get_test_sql", "macro_sql": "{% macro get_test_sql(main_sql, fail_calc, warn_if, error_if, limit) -%}\n  {{ adapter.dispatch('get_test_sql', 'dbt')(main_sql, fail_calc, warn_if, error_if, limit) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_sqlserver.sqlserver__get_test_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720537836.4888906, "supported_languages": null}, "macro.dbt.default__get_test_sql": {"name": "default__get_test_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\tests\\helpers.sql", "original_file_path": "macros\\materializations\\tests\\helpers.sql", "unique_id": "macro.dbt.default__get_test_sql", "macro_sql": "{% macro default__get_test_sql(main_sql, fail_calc, warn_if, error_if, limit) -%}\n    select\n      {{ fail_calc }} as failures,\n      {{ fail_calc }} {{ warn_if }} as should_warn,\n      {{ fail_calc }} {{ error_if }} as should_error\n    from (\n      {{ main_sql }}\n      {{ \"limit \" ~ limit if limit != none }}\n    ) dbt_internal_test\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720537836.4888906, "supported_languages": null}, "macro.dbt.materialization_test_default": {"name": "materialization_test_default", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\tests\\test.sql", "original_file_path": "macros\\materializations\\tests\\test.sql", "unique_id": "macro.dbt.materialization_test_default", "macro_sql": "{%- materialization test, default -%}\n\n  {% set relations = [] %}\n\n  {% if should_store_failures() %}\n\n    {% set identifier = model['alias'] %}\n    {% set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) %}\n    {% set target_relation = api.Relation.create(\n        identifier=identifier, schema=schema, database=database, type='table') -%} %}\n\n    {% if old_relation %}\n        {% do adapter.drop_relation(old_relation) %}\n    {% endif %}\n\n    {% call statement(auto_begin=True) %}\n        {{ create_table_as(False, target_relation, sql) }}\n    {% endcall %}\n\n    {% do relations.append(target_relation) %}\n\n    {% set main_sql %}\n        select *\n        from {{ target_relation }}\n    {% endset %}\n\n    {{ adapter.commit() }}\n\n  {% else %}\n\n      {% set main_sql = sql %}\n\n  {% endif %}\n\n  {% set limit = config.get('limit') %}\n  {% set fail_calc = config.get('fail_calc') %}\n  {% set warn_if = config.get('warn_if') %}\n  {% set error_if = config.get('error_if') %}\n\n  {% call statement('main', fetch_result=True) -%}\n\n    {{ get_test_sql(main_sql, fail_calc, warn_if, error_if, limit)}}\n\n  {%- endcall %}\n\n  {{ return({'relations': relations}) }}\n\n{%- endmaterialization -%}", "depends_on": {"macros": ["macro.dbt.should_store_failures", "macro.dbt.statement", "macro.dbt.create_table_as", "macro.dbt.get_test_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720537836.4929588, "supported_languages": ["sql"]}, "macro.dbt.get_where_subquery": {"name": "get_where_subquery", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\tests\\where_subquery.sql", "original_file_path": "macros\\materializations\\tests\\where_subquery.sql", "unique_id": "macro.dbt.get_where_subquery", "macro_sql": "{% macro get_where_subquery(relation) -%}\n    {% do return(adapter.dispatch('get_where_subquery', 'dbt')(relation)) %}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_where_subquery"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720537836.4929588, "supported_languages": null}, "macro.dbt.default__get_where_subquery": {"name": "default__get_where_subquery", "resource_type": "macro", "package_name": "dbt", "path": "macros\\materializations\\tests\\where_subquery.sql", "original_file_path": "macros\\materializations\\tests\\where_subquery.sql", "unique_id": "macro.dbt.default__get_where_subquery", "macro_sql": "{% macro default__get_where_subquery(relation) -%}\n    {% set where = config.get('where', '') %}\n    {% if where %}\n        {%- set filtered -%}\n            (select * from {{ relation }} where {{ where }}) dbt_subquery\n        {%- endset -%}\n        {% do return(filtered) %}\n    {%- else -%}\n        {% do return(relation) %}\n    {%- endif -%}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720537836.4929588, "supported_languages": null}, "macro.dbt.resolve_model_name": {"name": "resolve_model_name", "resource_type": "macro", "package_name": "dbt", "path": "macros\\python_model\\python.sql", "original_file_path": "macros\\python_model\\python.sql", "unique_id": "macro.dbt.resolve_model_name", "macro_sql": "{% macro resolve_model_name(input_model_name) %}\n    {{ return(adapter.dispatch('resolve_model_name', 'dbt')(input_model_name)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__resolve_model_name"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720537836.4929588, "supported_languages": null}, "macro.dbt.default__resolve_model_name": {"name": "default__resolve_model_name", "resource_type": "macro", "package_name": "dbt", "path": "macros\\python_model\\python.sql", "original_file_path": "macros\\python_model\\python.sql", "unique_id": "macro.dbt.default__resolve_model_name", "macro_sql": "\n\n{%- macro default__resolve_model_name(input_model_name) -%}\n    {{  input_model_name | string | replace('\"', '\\\"') }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720537836.4929588, "supported_languages": null}, "macro.dbt.build_ref_function": {"name": "build_ref_function", "resource_type": "macro", "package_name": "dbt", "path": "macros\\python_model\\python.sql", "original_file_path": "macros\\python_model\\python.sql", "unique_id": "macro.dbt.build_ref_function", "macro_sql": "{% macro build_ref_function(model) %}\n\n    {%- set ref_dict = {} -%}\n    {%- for _ref in model.refs -%}\n        {%- set resolved = ref(*_ref) -%}\n        {%- do ref_dict.update({_ref | join('.'): resolve_model_name(resolved)}) -%}\n    {%- endfor -%}\n\ndef ref(*args,dbt_load_df_function):\n    refs = {{ ref_dict | tojson }}\n    key = '.'.join(args)\n    return dbt_load_df_function(refs[key])\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.resolve_model_name"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720537836.4929588, "supported_languages": null}, "macro.dbt.build_source_function": {"name": "build_source_function", "resource_type": "macro", "package_name": "dbt", "path": "macros\\python_model\\python.sql", "original_file_path": "macros\\python_model\\python.sql", "unique_id": "macro.dbt.build_source_function", "macro_sql": "{% macro build_source_function(model) %}\n\n    {%- set source_dict = {} -%}\n    {%- for _source in model.sources -%}\n        {%- set resolved = source(*_source) -%}\n        {%- do source_dict.update({_source | join('.'): resolve_model_name(resolved)}) -%}\n    {%- endfor -%}\n\ndef source(*args, dbt_load_df_function):\n    sources = {{ source_dict | tojson }}\n    key = '.'.join(args)\n    return dbt_load_df_function(sources[key])\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.resolve_model_name"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720537836.4929588, "supported_languages": null}, "macro.dbt.build_config_dict": {"name": "build_config_dict", "resource_type": "macro", "package_name": "dbt", "path": "macros\\python_model\\python.sql", "original_file_path": "macros\\python_model\\python.sql", "unique_id": "macro.dbt.build_config_dict", "macro_sql": "{% macro build_config_dict(model) %}\n    {%- set config_dict = {} -%}\n    {% set config_dbt_used = zip(model.config.config_keys_used, model.config.config_keys_defaults) | list %}\n    {%- for key, default in config_dbt_used -%}\n        {# weird type testing with enum, would be much easier to write this logic in Python! #}\n        {%- if key == \"language\" -%}\n          {%- set value = \"python\" -%}\n        {%- endif -%}\n        {%- set value = model.config.get(key, default) -%}\n        {%- do config_dict.update({key: value}) -%}\n    {%- endfor -%}\nconfig_dict = {{ config_dict }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720537836.5080397, "supported_languages": null}, "macro.dbt.py_script_postfix": {"name": "py_script_postfix", "resource_type": "macro", "package_name": "dbt", "path": "macros\\python_model\\python.sql", "original_file_path": "macros\\python_model\\python.sql", "unique_id": "macro.dbt.py_script_postfix", "macro_sql": "{% macro py_script_postfix(model) %}\n# This part is user provided model code\n# you will need to copy the next section to run the code\n# COMMAND ----------\n# this part is dbt logic for get ref work, do not modify\n\n{{ build_ref_function(model ) }}\n{{ build_source_function(model ) }}\n{{ build_config_dict(model) }}\n\nclass config:\n    def __init__(self, *args, **kwargs):\n        pass\n\n    @staticmethod\n    def get(key, default=None):\n        return config_dict.get(key, default)\n\nclass this:\n    \"\"\"dbt.this() or dbt.this.identifier\"\"\"\n    database = \"{{ this.database }}\"\n    schema = \"{{ this.schema }}\"\n    identifier = \"{{ this.identifier }}\"\n    {% set this_relation_name = resolve_model_name(this) %}\n    def __repr__(self):\n        return '{{ this_relation_name  }}'\n\n\nclass dbtObj:\n    def __init__(self, load_df_function) -> None:\n        self.source = lambda *args: source(*args, dbt_load_df_function=load_df_function)\n        self.ref = lambda *args: ref(*args, dbt_load_df_function=load_df_function)\n        self.config = config\n        self.this = this()\n        self.is_incremental = {{ is_incremental() }}\n\n# COMMAND ----------\n{{py_script_comment()}}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.build_ref_function", "macro.dbt.build_source_function", "macro.dbt.build_config_dict", "macro.dbt.resolve_model_name", "macro.dbt.is_incremental", "macro.dbt.py_script_comment"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720537836.5080397, "supported_languages": null}, "macro.dbt.py_script_comment": {"name": "py_script_comment", "resource_type": "macro", "package_name": "dbt", "path": "macros\\python_model\\python.sql", "original_file_path": "macros\\python_model\\python.sql", "unique_id": "macro.dbt.py_script_comment", "macro_sql": "{%macro py_script_comment()%}\n{%endmacro%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720537836.5080397, "supported_languages": null}, "macro.dbt.any_value": {"name": "any_value", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\any_value.sql", "original_file_path": "macros\\utils\\any_value.sql", "unique_id": "macro.dbt.any_value", "macro_sql": "{% macro any_value(expression) -%}\n    {{ return(adapter.dispatch('any_value', 'dbt') (expression)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_sqlserver.sqlserver__any_value"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720537836.5080397, "supported_languages": null}, "macro.dbt.default__any_value": {"name": "default__any_value", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\any_value.sql", "original_file_path": "macros\\utils\\any_value.sql", "unique_id": "macro.dbt.default__any_value", "macro_sql": "{% macro default__any_value(expression) -%}\n\n    any_value({{ expression }})\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720537836.5080397, "supported_languages": null}, "macro.dbt.array_append": {"name": "array_append", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\array_append.sql", "original_file_path": "macros\\utils\\array_append.sql", "unique_id": "macro.dbt.array_append", "macro_sql": "{% macro array_append(array, new_element) -%}\n  {{ return(adapter.dispatch('array_append', 'dbt')(array, new_element)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__array_append"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720537836.5080397, "supported_languages": null}, "macro.dbt.default__array_append": {"name": "default__array_append", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\array_append.sql", "original_file_path": "macros\\utils\\array_append.sql", "unique_id": "macro.dbt.default__array_append", "macro_sql": "{% macro default__array_append(array, new_element) -%}\n    array_append({{ array }}, {{ new_element }})\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720537836.5080397, "supported_languages": null}, "macro.dbt.array_concat": {"name": "array_concat", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\array_concat.sql", "original_file_path": "macros\\utils\\array_concat.sql", "unique_id": "macro.dbt.array_concat", "macro_sql": "{% macro array_concat(array_1, array_2) -%}\n  {{ return(adapter.dispatch('array_concat', 'dbt')(array_1, array_2)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__array_concat"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720537836.5080397, "supported_languages": null}, "macro.dbt.default__array_concat": {"name": "default__array_concat", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\array_concat.sql", "original_file_path": "macros\\utils\\array_concat.sql", "unique_id": "macro.dbt.default__array_concat", "macro_sql": "{% macro default__array_concat(array_1, array_2) -%}\n    array_cat({{ array_1 }}, {{ array_2 }})\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720537836.5080397, "supported_languages": null}, "macro.dbt.array_construct": {"name": "array_construct", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\array_construct.sql", "original_file_path": "macros\\utils\\array_construct.sql", "unique_id": "macro.dbt.array_construct", "macro_sql": "{% macro array_construct(inputs=[], data_type=api.Column.translate_type('integer')) -%}\n  {{ return(adapter.dispatch('array_construct', 'dbt')(inputs, data_type)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_sqlserver.sqlserver__array_construct"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720537836.5080397, "supported_languages": null}, "macro.dbt.default__array_construct": {"name": "default__array_construct", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\array_construct.sql", "original_file_path": "macros\\utils\\array_construct.sql", "unique_id": "macro.dbt.default__array_construct", "macro_sql": "{% macro default__array_construct(inputs, data_type) -%}\n    {% if inputs|length > 0 %}\n    array[ {{ inputs|join(' , ') }} ]\n    {% else %}\n    array[]::{{data_type}}[]\n    {% endif %}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720537836.5080397, "supported_languages": null}, "macro.dbt.bool_or": {"name": "bool_or", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\bool_or.sql", "original_file_path": "macros\\utils\\bool_or.sql", "unique_id": "macro.dbt.bool_or", "macro_sql": "{% macro bool_or(expression) -%}\n    {{ return(adapter.dispatch('bool_or', 'dbt') (expression)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__bool_or"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720537836.5080397, "supported_languages": null}, "macro.dbt.default__bool_or": {"name": "default__bool_or", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\bool_or.sql", "original_file_path": "macros\\utils\\bool_or.sql", "unique_id": "macro.dbt.default__bool_or", "macro_sql": "{% macro default__bool_or(expression) -%}\n\n    bool_or({{ expression }})\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720537836.5080397, "supported_languages": null}, "macro.dbt.cast_bool_to_text": {"name": "cast_bool_to_text", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\cast_bool_to_text.sql", "original_file_path": "macros\\utils\\cast_bool_to_text.sql", "unique_id": "macro.dbt.cast_bool_to_text", "macro_sql": "{% macro cast_bool_to_text(field) %}\n  {{ adapter.dispatch('cast_bool_to_text', 'dbt') (field) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_sqlserver.sqlserver__cast_bool_to_text"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720537836.5080397, "supported_languages": null}, "macro.dbt.default__cast_bool_to_text": {"name": "default__cast_bool_to_text", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\cast_bool_to_text.sql", "original_file_path": "macros\\utils\\cast_bool_to_text.sql", "unique_id": "macro.dbt.default__cast_bool_to_text", "macro_sql": "{% macro default__cast_bool_to_text(field) %}\n    cast({{ field }} as {{ api.Column.translate_type('string') }})\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720537836.5080397, "supported_languages": null}, "macro.dbt.concat": {"name": "concat", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\concat.sql", "original_file_path": "macros\\utils\\concat.sql", "unique_id": "macro.dbt.concat", "macro_sql": "{% macro concat(fields) -%}\n  {{ return(adapter.dispatch('concat', 'dbt')(fields)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_sqlserver.sqlserver__concat"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720537836.5080397, "supported_languages": null}, "macro.dbt.default__concat": {"name": "default__concat", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\concat.sql", "original_file_path": "macros\\utils\\concat.sql", "unique_id": "macro.dbt.default__concat", "macro_sql": "{% macro default__concat(fields) -%}\n    {{ fields|join(' || ') }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720537836.5080397, "supported_languages": null}, "macro.dbt.type_string": {"name": "type_string", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\data_types.sql", "original_file_path": "macros\\utils\\data_types.sql", "unique_id": "macro.dbt.type_string", "macro_sql": "\n\n{%- macro type_string() -%}\n  {{ return(adapter.dispatch('type_string', 'dbt')()) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__type_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720537836.5080397, "supported_languages": null}, "macro.dbt.default__type_string": {"name": "default__type_string", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\data_types.sql", "original_file_path": "macros\\utils\\data_types.sql", "unique_id": "macro.dbt.default__type_string", "macro_sql": "{% macro default__type_string() %}\n    {{ return(api.Column.translate_type(\"string\")) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720537836.5080397, "supported_languages": null}, "macro.dbt.type_timestamp": {"name": "type_timestamp", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\data_types.sql", "original_file_path": "macros\\utils\\data_types.sql", "unique_id": "macro.dbt.type_timestamp", "macro_sql": "\n\n{%- macro type_timestamp() -%}\n  {{ return(adapter.dispatch('type_timestamp', 'dbt')()) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__type_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720537836.5230422, "supported_languages": null}, "macro.dbt.default__type_timestamp": {"name": "default__type_timestamp", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\data_types.sql", "original_file_path": "macros\\utils\\data_types.sql", "unique_id": "macro.dbt.default__type_timestamp", "macro_sql": "{% macro default__type_timestamp() %}\n    {{ return(api.Column.translate_type(\"timestamp\")) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720537836.5230422, "supported_languages": null}, "macro.dbt.type_float": {"name": "type_float", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\data_types.sql", "original_file_path": "macros\\utils\\data_types.sql", "unique_id": "macro.dbt.type_float", "macro_sql": "\n\n{%- macro type_float() -%}\n  {{ return(adapter.dispatch('type_float', 'dbt')()) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__type_float"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720537836.5230422, "supported_languages": null}, "macro.dbt.default__type_float": {"name": "default__type_float", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\data_types.sql", "original_file_path": "macros\\utils\\data_types.sql", "unique_id": "macro.dbt.default__type_float", "macro_sql": "{% macro default__type_float() %}\n    {{ return(api.Column.translate_type(\"float\")) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720537836.5230422, "supported_languages": null}, "macro.dbt.type_numeric": {"name": "type_numeric", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\data_types.sql", "original_file_path": "macros\\utils\\data_types.sql", "unique_id": "macro.dbt.type_numeric", "macro_sql": "\n\n{%- macro type_numeric() -%}\n  {{ return(adapter.dispatch('type_numeric', 'dbt')()) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__type_numeric"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720537836.5230422, "supported_languages": null}, "macro.dbt.default__type_numeric": {"name": "default__type_numeric", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\data_types.sql", "original_file_path": "macros\\utils\\data_types.sql", "unique_id": "macro.dbt.default__type_numeric", "macro_sql": "{% macro default__type_numeric() %}\n    {{ return(api.Column.numeric_type(\"numeric\", 28, 6)) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720537836.5230422, "supported_languages": null}, "macro.dbt.type_bigint": {"name": "type_bigint", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\data_types.sql", "original_file_path": "macros\\utils\\data_types.sql", "unique_id": "macro.dbt.type_bigint", "macro_sql": "\n\n{%- macro type_bigint() -%}\n  {{ return(adapter.dispatch('type_bigint', 'dbt')()) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__type_bigint"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720537836.5230422, "supported_languages": null}, "macro.dbt.default__type_bigint": {"name": "default__type_bigint", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\data_types.sql", "original_file_path": "macros\\utils\\data_types.sql", "unique_id": "macro.dbt.default__type_bigint", "macro_sql": "{% macro default__type_bigint() %}\n    {{ return(api.Column.translate_type(\"bigint\")) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720537836.5230422, "supported_languages": null}, "macro.dbt.type_int": {"name": "type_int", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\data_types.sql", "original_file_path": "macros\\utils\\data_types.sql", "unique_id": "macro.dbt.type_int", "macro_sql": "\n\n{%- macro type_int() -%}\n  {{ return(adapter.dispatch('type_int', 'dbt')()) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__type_int"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720537836.5230422, "supported_languages": null}, "macro.dbt.default__type_int": {"name": "default__type_int", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\data_types.sql", "original_file_path": "macros\\utils\\data_types.sql", "unique_id": "macro.dbt.default__type_int", "macro_sql": "{%- macro default__type_int() -%}\n  {{ return(api.Column.translate_type(\"integer\")) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720537836.5230422, "supported_languages": null}, "macro.dbt.type_boolean": {"name": "type_boolean", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\data_types.sql", "original_file_path": "macros\\utils\\data_types.sql", "unique_id": "macro.dbt.type_boolean", "macro_sql": "\n\n{%- macro type_boolean() -%}\n  {{ return(adapter.dispatch('type_boolean', 'dbt')()) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__type_boolean"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720537836.5230422, "supported_languages": null}, "macro.dbt.default__type_boolean": {"name": "default__type_boolean", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\data_types.sql", "original_file_path": "macros\\utils\\data_types.sql", "unique_id": "macro.dbt.default__type_boolean", "macro_sql": "{%- macro default__type_boolean() -%}\n  {{ return(api.Column.translate_type(\"boolean\")) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720537836.5230422, "supported_languages": null}, "macro.dbt.dateadd": {"name": "dateadd", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\dateadd.sql", "original_file_path": "macros\\utils\\dateadd.sql", "unique_id": "macro.dbt.dateadd", "macro_sql": "{% macro dateadd(datepart, interval, from_date_or_timestamp) %}\n  {{ return(adapter.dispatch('dateadd', 'dbt')(datepart, interval, from_date_or_timestamp)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_sqlserver.sqlserver__dateadd"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720537836.5230422, "supported_languages": null}, "macro.dbt.default__dateadd": {"name": "default__dateadd", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\dateadd.sql", "original_file_path": "macros\\utils\\dateadd.sql", "unique_id": "macro.dbt.default__dateadd", "macro_sql": "{% macro default__dateadd(datepart, interval, from_date_or_timestamp) %}\n\n    dateadd(\n        {{ datepart }},\n        {{ interval }},\n        {{ from_date_or_timestamp }}\n        )\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720537836.5230422, "supported_languages": null}, "macro.dbt.datediff": {"name": "datediff", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\datediff.sql", "original_file_path": "macros\\utils\\datediff.sql", "unique_id": "macro.dbt.datediff", "macro_sql": "{% macro datediff(first_date, second_date, datepart) %}\n  {{ return(adapter.dispatch('datediff', 'dbt')(first_date, second_date, datepart)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__datediff"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720537836.5230422, "supported_languages": null}, "macro.dbt.default__datediff": {"name": "default__datediff", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\datediff.sql", "original_file_path": "macros\\utils\\datediff.sql", "unique_id": "macro.dbt.default__datediff", "macro_sql": "{% macro default__datediff(first_date, second_date, datepart) -%}\n\n    datediff(\n        {{ datepart }},\n        {{ first_date }},\n        {{ second_date }}\n        )\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720537836.5230422, "supported_languages": null}, "macro.dbt.date_trunc": {"name": "date_trunc", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\date_trunc.sql", "original_file_path": "macros\\utils\\date_trunc.sql", "unique_id": "macro.dbt.date_trunc", "macro_sql": "{% macro date_trunc(datepart, date) -%}\n  {{ return(adapter.dispatch('date_trunc', 'dbt') (datepart, date)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_sqlserver.sqlserver__date_trunc"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720537836.5230422, "supported_languages": null}, "macro.dbt.default__date_trunc": {"name": "default__date_trunc", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\date_trunc.sql", "original_file_path": "macros\\utils\\date_trunc.sql", "unique_id": "macro.dbt.default__date_trunc", "macro_sql": "{% macro default__date_trunc(datepart, date) -%}\n    date_trunc('{{datepart}}', {{date}})\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720537836.5230422, "supported_languages": null}, "macro.dbt.escape_single_quotes": {"name": "escape_single_quotes", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\escape_single_quotes.sql", "original_file_path": "macros\\utils\\escape_single_quotes.sql", "unique_id": "macro.dbt.escape_single_quotes", "macro_sql": "{% macro escape_single_quotes(expression) %}\n      {{ return(adapter.dispatch('escape_single_quotes', 'dbt') (expression)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__escape_single_quotes"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720537836.5230422, "supported_languages": null}, "macro.dbt.default__escape_single_quotes": {"name": "default__escape_single_quotes", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\escape_single_quotes.sql", "original_file_path": "macros\\utils\\escape_single_quotes.sql", "unique_id": "macro.dbt.default__escape_single_quotes", "macro_sql": "{% macro default__escape_single_quotes(expression) -%}\n{{ expression | replace(\"'\",\"''\") }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720537836.5230422, "supported_languages": null}, "macro.dbt.except": {"name": "except", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\except.sql", "original_file_path": "macros\\utils\\except.sql", "unique_id": "macro.dbt.except", "macro_sql": "{% macro except() %}\n  {{ return(adapter.dispatch('except', 'dbt')()) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__except"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720537836.5230422, "supported_languages": null}, "macro.dbt.default__except": {"name": "default__except", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\except.sql", "original_file_path": "macros\\utils\\except.sql", "unique_id": "macro.dbt.default__except", "macro_sql": "{% macro default__except() %}\n\n    except\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720537836.5230422, "supported_languages": null}, "macro.dbt.hash": {"name": "hash", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\hash.sql", "original_file_path": "macros\\utils\\hash.sql", "unique_id": "macro.dbt.hash", "macro_sql": "{% macro hash(field) -%}\n  {{ return(adapter.dispatch('hash', 'dbt') (field)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_sqlserver.sqlserver__hash"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720537836.5230422, "supported_languages": null}, "macro.dbt.default__hash": {"name": "default__hash", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\hash.sql", "original_file_path": "macros\\utils\\hash.sql", "unique_id": "macro.dbt.default__hash", "macro_sql": "{% macro default__hash(field) -%}\n    md5(cast({{ field }} as {{ api.Column.translate_type('string') }}))\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720537836.5230422, "supported_languages": null}, "macro.dbt.intersect": {"name": "intersect", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\intersect.sql", "original_file_path": "macros\\utils\\intersect.sql", "unique_id": "macro.dbt.intersect", "macro_sql": "{% macro intersect() %}\n  {{ return(adapter.dispatch('intersect', 'dbt')()) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__intersect"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720537836.5230422, "supported_languages": null}, "macro.dbt.default__intersect": {"name": "default__intersect", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\intersect.sql", "original_file_path": "macros\\utils\\intersect.sql", "unique_id": "macro.dbt.default__intersect", "macro_sql": "{% macro default__intersect() %}\n\n    intersect\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720537836.5230422, "supported_languages": null}, "macro.dbt.last_day": {"name": "last_day", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\last_day.sql", "original_file_path": "macros\\utils\\last_day.sql", "unique_id": "macro.dbt.last_day", "macro_sql": "{% macro last_day(date, datepart) %}\n  {{ return(adapter.dispatch('last_day', 'dbt') (date, datepart)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_sqlserver.sqlserver__last_day"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720537836.5230422, "supported_languages": null}, "macro.dbt.default_last_day": {"name": "default_last_day", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\last_day.sql", "original_file_path": "macros\\utils\\last_day.sql", "unique_id": "macro.dbt.default_last_day", "macro_sql": "\n\n{%- macro default_last_day(date, datepart) -%}\n    cast(\n        {{dbt.dateadd('day', '-1',\n        dbt.dateadd(datepart, '1', dbt.date_trunc(datepart, date))\n        )}}\n        as date)\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.dateadd", "macro.dbt.date_trunc"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720537836.538221, "supported_languages": null}, "macro.dbt.default__last_day": {"name": "default__last_day", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\last_day.sql", "original_file_path": "macros\\utils\\last_day.sql", "unique_id": "macro.dbt.default__last_day", "macro_sql": "{% macro default__last_day(date, datepart) -%}\n    {{dbt.default_last_day(date, datepart)}}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default_last_day"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720537836.538221, "supported_languages": null}, "macro.dbt.length": {"name": "length", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\length.sql", "original_file_path": "macros\\utils\\length.sql", "unique_id": "macro.dbt.length", "macro_sql": "{% macro length(expression) -%}\n    {{ return(adapter.dispatch('length', 'dbt') (expression)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_sqlserver.sqlserver__length"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720537836.538221, "supported_languages": null}, "macro.dbt.default__length": {"name": "default__length", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\length.sql", "original_file_path": "macros\\utils\\length.sql", "unique_id": "macro.dbt.default__length", "macro_sql": "{% macro default__length(expression) %}\n\n    length(\n        {{ expression }}\n    )\n\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720537836.538221, "supported_languages": null}, "macro.dbt.listagg": {"name": "listagg", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\listagg.sql", "original_file_path": "macros\\utils\\listagg.sql", "unique_id": "macro.dbt.listagg", "macro_sql": "{% macro listagg(measure, delimiter_text=\"','\", order_by_clause=none, limit_num=none) -%}\n    {{ return(adapter.dispatch('listagg', 'dbt') (measure, delimiter_text, order_by_clause, limit_num)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_sqlserver.sqlserver__listagg"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720537836.538221, "supported_languages": null}, "macro.dbt.default__listagg": {"name": "default__listagg", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\listagg.sql", "original_file_path": "macros\\utils\\listagg.sql", "unique_id": "macro.dbt.default__listagg", "macro_sql": "{% macro default__listagg(measure, delimiter_text, order_by_clause, limit_num) -%}\n\n    {% if limit_num -%}\n    array_to_string(\n        array_slice(\n            array_agg(\n                {{ measure }}\n            ){% if order_by_clause -%}\n            within group ({{ order_by_clause }})\n            {%- endif %}\n            ,0\n            ,{{ limit_num }}\n        ),\n        {{ delimiter_text }}\n        )\n    {%- else %}\n    listagg(\n        {{ measure }},\n        {{ delimiter_text }}\n        )\n        {% if order_by_clause -%}\n        within group ({{ order_by_clause }})\n        {%- endif %}\n    {%- endif %}\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720537836.538221, "supported_languages": null}, "macro.dbt.string_literal": {"name": "string_literal", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\literal.sql", "original_file_path": "macros\\utils\\literal.sql", "unique_id": "macro.dbt.string_literal", "macro_sql": "{%- macro string_literal(value) -%}\n  {{ return(adapter.dispatch('string_literal', 'dbt') (value)) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__string_literal"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720537836.538221, "supported_languages": null}, "macro.dbt.default__string_literal": {"name": "default__string_literal", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\literal.sql", "original_file_path": "macros\\utils\\literal.sql", "unique_id": "macro.dbt.default__string_literal", "macro_sql": "{% macro default__string_literal(value) -%}\n    '{{ value }}'\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720537836.538221, "supported_languages": null}, "macro.dbt.position": {"name": "position", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\position.sql", "original_file_path": "macros\\utils\\position.sql", "unique_id": "macro.dbt.position", "macro_sql": "{% macro position(substring_text, string_text) -%}\n    {{ return(adapter.dispatch('position', 'dbt') (substring_text, string_text)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_sqlserver.sqlserver__position"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720537836.538221, "supported_languages": null}, "macro.dbt.default__position": {"name": "default__position", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\position.sql", "original_file_path": "macros\\utils\\position.sql", "unique_id": "macro.dbt.default__position", "macro_sql": "{% macro default__position(substring_text, string_text) %}\n\n    position(\n        {{ substring_text }} in {{ string_text }}\n    )\n\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720537836.538221, "supported_languages": null}, "macro.dbt.replace": {"name": "replace", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\replace.sql", "original_file_path": "macros\\utils\\replace.sql", "unique_id": "macro.dbt.replace", "macro_sql": "{% macro replace(field, old_chars, new_chars) -%}\n    {{ return(adapter.dispatch('replace', 'dbt') (field, old_chars, new_chars)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__replace"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720537836.538221, "supported_languages": null}, "macro.dbt.default__replace": {"name": "default__replace", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\replace.sql", "original_file_path": "macros\\utils\\replace.sql", "unique_id": "macro.dbt.default__replace", "macro_sql": "{% macro default__replace(field, old_chars, new_chars) %}\n\n    replace(\n        {{ field }},\n        {{ old_chars }},\n        {{ new_chars }}\n    )\n\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720537836.538221, "supported_languages": null}, "macro.dbt.right": {"name": "right", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\right.sql", "original_file_path": "macros\\utils\\right.sql", "unique_id": "macro.dbt.right", "macro_sql": "{% macro right(string_text, length_expression) -%}\n    {{ return(adapter.dispatch('right', 'dbt') (string_text, length_expression)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__right"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720537836.538221, "supported_languages": null}, "macro.dbt.default__right": {"name": "default__right", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\right.sql", "original_file_path": "macros\\utils\\right.sql", "unique_id": "macro.dbt.default__right", "macro_sql": "{% macro default__right(string_text, length_expression) %}\n\n    right(\n        {{ string_text }},\n        {{ length_expression }}\n    )\n\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720537836.538221, "supported_languages": null}, "macro.dbt.safe_cast": {"name": "safe_cast", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\safe_cast.sql", "original_file_path": "macros\\utils\\safe_cast.sql", "unique_id": "macro.dbt.safe_cast", "macro_sql": "{% macro safe_cast(field, type) %}\n  {{ return(adapter.dispatch('safe_cast', 'dbt') (field, type)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_sqlserver.sqlserver__safe_cast"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720537836.548295, "supported_languages": null}, "macro.dbt.default__safe_cast": {"name": "default__safe_cast", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\safe_cast.sql", "original_file_path": "macros\\utils\\safe_cast.sql", "unique_id": "macro.dbt.default__safe_cast", "macro_sql": "{% macro default__safe_cast(field, type) %}\n    {# most databases don't support this function yet\n    so we just need to use cast #}\n    cast({{field}} as {{type}})\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720537836.548295, "supported_languages": null}, "macro.dbt.split_part": {"name": "split_part", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\split_part.sql", "original_file_path": "macros\\utils\\split_part.sql", "unique_id": "macro.dbt.split_part", "macro_sql": "{% macro split_part(string_text, delimiter_text, part_number) %}\n  {{ return(adapter.dispatch('split_part', 'dbt') (string_text, delimiter_text, part_number)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_sqlserver.sqlserver__split_part"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720537836.548295, "supported_languages": null}, "macro.dbt.default__split_part": {"name": "default__split_part", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\split_part.sql", "original_file_path": "macros\\utils\\split_part.sql", "unique_id": "macro.dbt.default__split_part", "macro_sql": "{% macro default__split_part(string_text, delimiter_text, part_number) %}\n\n    split_part(\n        {{ string_text }},\n        {{ delimiter_text }},\n        {{ part_number }}\n        )\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720537836.548295, "supported_languages": null}, "macro.dbt._split_part_negative": {"name": "_split_part_negative", "resource_type": "macro", "package_name": "dbt", "path": "macros\\utils\\split_part.sql", "original_file_path": "macros\\utils\\split_part.sql", "unique_id": "macro.dbt._split_part_negative", "macro_sql": "{% macro _split_part_negative(string_text, delimiter_text, part_number) %}\n\n    split_part(\n        {{ string_text }},\n        {{ delimiter_text }},\n          length({{ string_text }})\n          - length(\n              replace({{ string_text }},  {{ delimiter_text }}, '')\n          ) + 2 {{ part_number }}\n        )\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720537836.548295, "supported_languages": null}, "macro.dbt.test_unique": {"name": "test_unique", "resource_type": "macro", "package_name": "dbt", "path": "tests\\generic\\builtin.sql", "original_file_path": "tests\\generic\\builtin.sql", "unique_id": "macro.dbt.test_unique", "macro_sql": "{% test unique(model, column_name) %}\n    {% set macro = adapter.dispatch('test_unique', 'dbt') %}\n    {{ macro(model, column_name) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt.default__test_unique"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720537836.5533752, "supported_languages": null}, "macro.dbt.test_not_null": {"name": "test_not_null", "resource_type": "macro", "package_name": "dbt", "path": "tests\\generic\\builtin.sql", "original_file_path": "tests\\generic\\builtin.sql", "unique_id": "macro.dbt.test_not_null", "macro_sql": "{% test not_null(model, column_name) %}\n    {% set macro = adapter.dispatch('test_not_null', 'dbt') %}\n    {{ macro(model, column_name) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt.default__test_not_null"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720537836.5533752, "supported_languages": null}, "macro.dbt.test_accepted_values": {"name": "test_accepted_values", "resource_type": "macro", "package_name": "dbt", "path": "tests\\generic\\builtin.sql", "original_file_path": "tests\\generic\\builtin.sql", "unique_id": "macro.dbt.test_accepted_values", "macro_sql": "{% test accepted_values(model, column_name, values, quote=True) %}\n    {% set macro = adapter.dispatch('test_accepted_values', 'dbt') %}\n    {{ macro(model, column_name, values, quote) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt.default__test_accepted_values"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720537836.5533752, "supported_languages": null}, "macro.dbt.test_relationships": {"name": "test_relationships", "resource_type": "macro", "package_name": "dbt", "path": "tests\\generic\\builtin.sql", "original_file_path": "tests\\generic\\builtin.sql", "unique_id": "macro.dbt.test_relationships", "macro_sql": "{% test relationships(model, column_name, to, field) %}\n    {% set macro = adapter.dispatch('test_relationships', 'dbt') %}\n    {{ macro(model, column_name, to, field) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt.default__test_relationships"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720537836.5533752, "supported_languages": null}, "macro.dbt_date.get_base_dates": {"name": "get_base_dates", "resource_type": "macro", "package_name": "dbt_date", "path": "macros\\get_base_dates.sql", "original_file_path": "macros\\get_base_dates.sql", "unique_id": "macro.dbt_date.get_base_dates", "macro_sql": "{% macro get_base_dates(start_date=None, end_date=None, n_dateparts=None, datepart=\"day\") %}\n    {{ adapter.dispatch('get_base_dates', 'dbt_date') (start_date, end_date, n_dateparts, datepart) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_date.default__get_base_dates"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720537836.5533752, "supported_languages": null}, "macro.dbt_date.default__get_base_dates": {"name": "default__get_base_dates", "resource_type": "macro", "package_name": "dbt_date", "path": "macros\\get_base_dates.sql", "original_file_path": "macros\\get_base_dates.sql", "unique_id": "macro.dbt_date.default__get_base_dates", "macro_sql": "{% macro default__get_base_dates(start_date, end_date, n_dateparts, datepart) %}\n\n{%- if start_date and end_date -%}\n{%- set start_date=\"cast('\" ~ start_date ~ \"' as \" ~ dbt.type_timestamp() ~ \")\" -%}\n{%- set end_date=\"cast('\" ~ end_date ~ \"' as \" ~ dbt.type_timestamp() ~ \")\"  -%}\n\n{%- elif n_dateparts and datepart -%}\n\n{%- set start_date = dbt.dateadd(datepart, -1 * n_dateparts, dbt_date.today()) -%}\n{%- set end_date = dbt_date.tomorrow() -%}\n{%- endif -%}\n\nwith date_spine as\n(\n\n    {{ dbt_date.date_spine(\n        datepart=datepart,\n        start_date=start_date,\n        end_date=end_date,\n       )\n    }}\n\n)\nselect\n    cast(d.date_{{ datepart }} as {{ dbt.type_timestamp() }}) as date_{{ datepart }}\nfrom\n    date_spine d\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.type_timestamp", "macro.dbt.dateadd", "macro.dbt_date.today", "macro.dbt_date.tomorrow", "macro.dbt_date.date_spine"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720537836.5533752, "supported_languages": null}, "macro.dbt_date.bigquery__get_base_dates": {"name": "bigquery__get_base_dates", "resource_type": "macro", "package_name": "dbt_date", "path": "macros\\get_base_dates.sql", "original_file_path": "macros\\get_base_dates.sql", "unique_id": "macro.dbt_date.bigquery__get_base_dates", "macro_sql": "{% macro bigquery__get_base_dates(start_date, end_date, n_dateparts, datepart) %}\n\n{%- if start_date and end_date -%}\n{%- set start_date=\"cast('\" ~ start_date ~ \"' as datetime )\" -%}\n{%- set end_date=\"cast('\" ~ end_date ~ \"' as datetime )\" -%}\n\n{%- elif n_dateparts and datepart -%}\n\n{%- set start_date = dbt.dateadd(datepart, -1 * n_dateparts, dbt_date.today()) -%}\n{%- set end_date = dbt_date.tomorrow() -%}\n{%- endif -%}\n\nwith date_spine as\n(\n\n    {{ dbt_date.date_spine(\n        datepart=datepart,\n        start_date=start_date,\n        end_date=end_date,\n       )\n    }}\n\n)\nselect\n    cast(d.date_{{ datepart }} as {{ dbt.type_timestamp() }}) as date_{{ datepart }}\nfrom\n    date_spine d\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.dateadd", "macro.dbt_date.today", "macro.dbt_date.tomorrow", "macro.dbt_date.date_spine", "macro.dbt.type_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720537836.5533752, "supported_languages": null}, "macro.dbt_date.trino__get_base_dates": {"name": "trino__get_base_dates", "resource_type": "macro", "package_name": "dbt_date", "path": "macros\\get_base_dates.sql", "original_file_path": "macros\\get_base_dates.sql", "unique_id": "macro.dbt_date.trino__get_base_dates", "macro_sql": "{% macro trino__get_base_dates(start_date, end_date, n_dateparts, datepart) %}\n\n{%- if start_date and end_date -%}\n{%- set start_date=\"cast('\" ~ start_date ~ \"' as \" ~ dbt.type_timestamp() ~ \")\" -%}\n{%- set end_date=\"cast('\" ~ end_date ~ \"' as \" ~ dbt.type_timestamp() ~ \")\"  -%}\n\n{%- elif n_dateparts and datepart -%}\n\n{%- set start_date = dbt.dateadd(datepart, -1 * n_dateparts, dbt_date.now()) -%}\n{%- set end_date = dbt_date.tomorrow() -%}\n{%- endif -%}\n\nwith date_spine as\n(\n\n    {{ dbt_date.date_spine(\n        datepart=datepart,\n        start_date=start_date,\n        end_date=end_date,\n       )\n    }}\n\n)\nselect\n    cast(d.date_{{ datepart }} as {{ dbt.type_timestamp() }}) as date_{{ datepart }}\nfrom\n    date_spine d\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.type_timestamp", "macro.dbt.dateadd", "macro.dbt_date.now", "macro.dbt_date.tomorrow", "macro.dbt_date.date_spine"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720537836.5533752, "supported_languages": null}, "macro.dbt_date.get_date_dimension": {"name": "get_date_dimension", "resource_type": "macro", "package_name": "dbt_date", "path": "macros\\get_date_dimension.sql", "original_file_path": "macros\\get_date_dimension.sql", "unique_id": "macro.dbt_date.get_date_dimension", "macro_sql": "{% macro get_date_dimension(start_date, end_date) %}\n    {{ adapter.dispatch('get_date_dimension', 'dbt_date') (start_date, end_date) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_date.default__get_date_dimension"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720537836.5842419, "supported_languages": null}, "macro.dbt_date.default__get_date_dimension": {"name": "default__get_date_dimension", "resource_type": "macro", "package_name": "dbt_date", "path": "macros\\get_date_dimension.sql", "original_file_path": "macros\\get_date_dimension.sql", "unique_id": "macro.dbt_date.default__get_date_dimension", "macro_sql": "{% macro default__get_date_dimension(start_date, end_date) %}\nwith base_dates as (\n    {{ dbt_date.get_base_dates(start_date, end_date) }}\n),\ndates_with_prior_year_dates as (\n\n    select\n        cast(d.date_day as date) as date_day,\n        cast({{ dbt.dateadd('year', -1 , 'd.date_day') }} as date) as prior_year_date_day,\n        cast({{ dbt.dateadd('day', -364 , 'd.date_day') }} as date) as prior_year_over_year_date_day\n    from\n    \tbase_dates d\n\n)\nselect\n    d.date_day,\n    {{ dbt_date.yesterday('d.date_day') }} as prior_date_day,\n    {{ dbt_date.tomorrow('d.date_day') }} as next_date_day,\n    d.prior_year_date_day as prior_year_date_day,\n    d.prior_year_over_year_date_day,\n    {{ dbt_date.day_of_week('d.date_day', isoweek=false) }} as day_of_week,\n    {{ dbt_date.day_of_week('d.date_day', isoweek=true) }} as day_of_week_iso,\n    {{ dbt_date.day_name('d.date_day', short=false) }} as day_of_week_name,\n    {{ dbt_date.day_name('d.date_day', short=true) }} as day_of_week_name_short,\n    {{ dbt_date.day_of_month('d.date_day') }} as day_of_month,\n    {{ dbt_date.day_of_year('d.date_day') }} as day_of_year,\n\n    {{ dbt_date.week_start('d.date_day') }} as week_start_date,\n    {{ dbt_date.week_end('d.date_day') }} as week_end_date,\n    {{ dbt_date.week_start('d.prior_year_over_year_date_day') }} as prior_year_week_start_date,\n    {{ dbt_date.week_end('d.prior_year_over_year_date_day') }} as prior_year_week_end_date,\n    {{ dbt_date.week_of_year('d.date_day') }} as week_of_year,\n\n    {{ dbt_date.iso_week_start('d.date_day') }} as iso_week_start_date,\n    {{ dbt_date.iso_week_end('d.date_day') }} as iso_week_end_date,\n    {{ dbt_date.iso_week_start('d.prior_year_over_year_date_day') }} as prior_year_iso_week_start_date,\n    {{ dbt_date.iso_week_end('d.prior_year_over_year_date_day') }} as prior_year_iso_week_end_date,\n    {{ dbt_date.iso_week_of_year('d.date_day') }} as iso_week_of_year,\n\n    {{ dbt_date.week_of_year('d.prior_year_over_year_date_day') }} as prior_year_week_of_year,\n    {{ dbt_date.iso_week_of_year('d.prior_year_over_year_date_day') }} as prior_year_iso_week_of_year,\n\n    cast({{ dbt_date.date_part('month', 'd.date_day') }} as {{ dbt.type_int() }}) as month_of_year,\n    {{ dbt_date.month_name('d.date_day', short=false) }}  as month_name,\n    {{ dbt_date.month_name('d.date_day', short=true) }}  as month_name_short,\n\n    cast({{ dbt.date_trunc('month', 'd.date_day') }} as date) as month_start_date,\n    cast({{ last_day('d.date_day', 'month') }} as date) as month_end_date,\n\n    cast({{ dbt.date_trunc('month', 'd.prior_year_date_day') }} as date) as prior_year_month_start_date,\n    cast({{ last_day('d.prior_year_date_day', 'month') }} as date) as prior_year_month_end_date,\n\n    cast({{ dbt_date.date_part('quarter', 'd.date_day') }} as {{ dbt.type_int() }}) as quarter_of_year,\n    cast({{ dbt.date_trunc('quarter', 'd.date_day') }} as date) as quarter_start_date,\n    cast({{ last_day('d.date_day', 'quarter') }} as date) as quarter_end_date,\n\n    cast({{ dbt_date.date_part('year', 'd.date_day') }} as {{ dbt.type_int() }}) as year_number,\n    cast({{ dbt.date_trunc('year', 'd.date_day') }} as date) as year_start_date,\n    cast({{ last_day('d.date_day', 'year') }} as date) as year_end_date\nfrom\n    dates_with_prior_year_dates d\norder by 1\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_date.get_base_dates", "macro.dbt.dateadd", "macro.dbt_date.yesterday", "macro.dbt_date.tomorrow", "macro.dbt_date.day_of_week", "macro.dbt_date.day_name", "macro.dbt_date.day_of_month", "macro.dbt_date.day_of_year", "macro.dbt_date.week_start", "macro.dbt_date.week_end", "macro.dbt_date.week_of_year", "macro.dbt_date.iso_week_start", "macro.dbt_date.iso_week_end", "macro.dbt_date.iso_week_of_year", "macro.dbt_date.date_part", "macro.dbt.type_int", "macro.dbt_date.month_name", "macro.dbt.date_trunc", "macro.dbt.last_day"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720537836.5842419, "supported_languages": null}, "macro.dbt_date.postgres__get_date_dimension": {"name": "postgres__get_date_dimension", "resource_type": "macro", "package_name": "dbt_date", "path": "macros\\get_date_dimension.sql", "original_file_path": "macros\\get_date_dimension.sql", "unique_id": "macro.dbt_date.postgres__get_date_dimension", "macro_sql": "{% macro postgres__get_date_dimension(start_date, end_date) %}\nwith base_dates as (\n    {{ dbt_date.get_base_dates(start_date, end_date) }}\n),\ndates_with_prior_year_dates as (\n\n    select\n        cast(d.date_day as date) as date_day,\n        cast({{ dbt.dateadd('year', -1 , 'd.date_day') }} as date) as prior_year_date_day,\n        cast({{ dbt.dateadd('day', -364 , 'd.date_day') }} as date) as prior_year_over_year_date_day\n    from\n    \tbase_dates d\n\n)\nselect\n    d.date_day,\n    {{ dbt_date.yesterday('d.date_day') }} as prior_date_day,\n    {{ dbt_date.tomorrow('d.date_day') }} as next_date_day,\n    d.prior_year_date_day as prior_year_date_day,\n    d.prior_year_over_year_date_day,\n    {{ dbt_date.day_of_week('d.date_day', isoweek=true) }} as day_of_week,\n\n    {{ dbt_date.day_name('d.date_day', short=false) }} as day_of_week_name,\n    {{ dbt_date.day_name('d.date_day', short=true) }} as day_of_week_name_short,\n    {{ dbt_date.day_of_month('d.date_day') }} as day_of_month,\n    {{ dbt_date.day_of_year('d.date_day') }} as day_of_year,\n\n    {{ dbt_date.week_start('d.date_day') }} as week_start_date,\n    {{ dbt_date.week_end('d.date_day') }} as week_end_date,\n    {{ dbt_date.week_start('d.prior_year_over_year_date_day') }} as prior_year_week_start_date,\n    {{ dbt_date.week_end('d.prior_year_over_year_date_day') }} as prior_year_week_end_date,\n    {{ dbt_date.week_of_year('d.date_day') }} as week_of_year,\n\n    {{ dbt_date.iso_week_start('d.date_day') }} as iso_week_start_date,\n    {{ dbt_date.iso_week_end('d.date_day') }} as iso_week_end_date,\n    {{ dbt_date.iso_week_start('d.prior_year_over_year_date_day') }} as prior_year_iso_week_start_date,\n    {{ dbt_date.iso_week_end('d.prior_year_over_year_date_day') }} as prior_year_iso_week_end_date,\n    {{ dbt_date.iso_week_of_year('d.date_day') }} as iso_week_of_year,\n\n    {{ dbt_date.week_of_year('d.prior_year_over_year_date_day') }} as prior_year_week_of_year,\n    {{ dbt_date.iso_week_of_year('d.prior_year_over_year_date_day') }} as prior_year_iso_week_of_year,\n\n    cast({{ dbt_date.date_part('month', 'd.date_day') }} as {{ dbt.type_int() }}) as month_of_year,\n    {{ dbt_date.month_name('d.date_day', short=false) }}  as month_name,\n    {{ dbt_date.month_name('d.date_day', short=true) }}  as month_name_short,\n\n    cast({{ dbt.date_trunc('month', 'd.date_day') }} as date) as month_start_date,\n    cast({{ last_day('d.date_day', 'month') }} as date) as month_end_date,\n\n    cast({{ dbt.date_trunc('month', 'd.prior_year_date_day') }} as date) as prior_year_month_start_date,\n    cast({{ last_day('d.prior_year_date_day', 'month') }} as date) as prior_year_month_end_date,\n\n    cast({{ dbt_date.date_part('quarter', 'd.date_day') }} as {{ dbt.type_int() }}) as quarter_of_year,\n    cast({{ dbt.date_trunc('quarter', 'd.date_day') }} as date) as quarter_start_date,\n    {# last_day does not support quarter because postgresql does not support quarter interval. #}\n    cast({{dbt.dateadd('day', '-1', dbt.dateadd('month', '3', dbt.date_trunc('quarter', 'd.date_day')))}} as date) as quarter_end_date,\n\n    cast({{ dbt_date.date_part('year', 'd.date_day') }} as {{ dbt.type_int() }}) as year_number,\n    cast({{ dbt.date_trunc('year', 'd.date_day') }} as date) as year_start_date,\n    cast({{ last_day('d.date_day', 'year') }} as date) as year_end_date\nfrom\n    dates_with_prior_year_dates d\norder by 1\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_date.get_base_dates", "macro.dbt.dateadd", "macro.dbt_date.yesterday", "macro.dbt_date.tomorrow", "macro.dbt_date.day_of_week", "macro.dbt_date.day_name", "macro.dbt_date.day_of_month", "macro.dbt_date.day_of_year", "macro.dbt_date.week_start", "macro.dbt_date.week_end", "macro.dbt_date.week_of_year", "macro.dbt_date.iso_week_start", "macro.dbt_date.iso_week_end", "macro.dbt_date.iso_week_of_year", "macro.dbt_date.date_part", "macro.dbt.type_int", "macro.dbt_date.month_name", "macro.dbt.date_trunc", "macro.dbt.last_day"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720537836.5988913, "supported_languages": null}, "macro.dbt_date.convert_timezone": {"name": "convert_timezone", "resource_type": "macro", "package_name": "dbt_date", "path": "macros\\calendar_date\\convert_timezone.sql", "original_file_path": "macros\\calendar_date\\convert_timezone.sql", "unique_id": "macro.dbt_date.convert_timezone", "macro_sql": "{%- macro convert_timezone(column, target_tz=None, source_tz=None) -%}\n{%- set source_tz = \"UTC\" if not source_tz else source_tz -%}\n{%- set target_tz = var(\"dbt_date:time_zone\") if not target_tz else target_tz -%}\n{{ adapter.dispatch('convert_timezone', 'dbt_date') (column, target_tz, source_tz) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.tsql_utils.sqlserver__convert_timezone"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720537836.5988913, "supported_languages": null}, "macro.dbt_date.default__convert_timezone": {"name": "default__convert_timezone", "resource_type": "macro", "package_name": "dbt_date", "path": "macros\\calendar_date\\convert_timezone.sql", "original_file_path": "macros\\calendar_date\\convert_timezone.sql", "unique_id": "macro.dbt_date.default__convert_timezone", "macro_sql": "{% macro default__convert_timezone(column, target_tz, source_tz) -%}\nconvert_timezone('{{ source_tz }}', '{{ target_tz }}',\n    cast({{ column }} as {{ dbt.type_timestamp() }})\n)\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.type_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720537836.5988913, "supported_languages": null}, "macro.dbt_date.bigquery__convert_timezone": {"name": "bigquery__convert_timezone", "resource_type": "macro", "package_name": "dbt_date", "path": "macros\\calendar_date\\convert_timezone.sql", "original_file_path": "macros\\calendar_date\\convert_timezone.sql", "unique_id": "macro.dbt_date.bigquery__convert_timezone", "macro_sql": "{%- macro bigquery__convert_timezone(column, target_tz, source_tz=None) -%}\ntimestamp(datetime({{ column }}, '{{ target_tz}}'))\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720537836.5988913, "supported_languages": null}, "macro.dbt_date.postgres__convert_timezone": {"name": "postgres__convert_timezone", "resource_type": "macro", "package_name": "dbt_date", "path": "macros\\calendar_date\\convert_timezone.sql", "original_file_path": "macros\\calendar_date\\convert_timezone.sql", "unique_id": "macro.dbt_date.postgres__convert_timezone", "macro_sql": "{% macro postgres__convert_timezone(column, target_tz, source_tz) -%}\ncast(\n    cast({{ column }} as {{ dbt.type_timestamp() }})\n        at time zone '{{ source_tz }}' at time zone '{{ target_tz }}' as {{ dbt.type_timestamp() }}\n)\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.type_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720537836.5988913, "supported_languages": null}, "macro.dbt_date.redshift__convert_timezone": {"name": "redshift__convert_timezone", "resource_type": "macro", "package_name": "dbt_date", "path": "macros\\calendar_date\\convert_timezone.sql", "original_file_path": "macros\\calendar_date\\convert_timezone.sql", "unique_id": "macro.dbt_date.redshift__convert_timezone", "macro_sql": "{%- macro redshift__convert_timezone(column, target_tz, source_tz) -%}\n{{ return(dbt_date.default__convert_timezone(column, target_tz, source_tz)) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt_date.default__convert_timezone"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720537836.5988913, "supported_languages": null}, "macro.dbt_date.duckdb__convert_timezone": {"name": "duckdb__convert_timezone", "resource_type": "macro", "package_name": "dbt_date", "path": "macros\\calendar_date\\convert_timezone.sql", "original_file_path": "macros\\calendar_date\\convert_timezone.sql", "unique_id": "macro.dbt_date.duckdb__convert_timezone", "macro_sql": "{% macro duckdb__convert_timezone(column, target_tz, source_tz) -%}\n{{ return(dbt_date.postgres__convert_timezone(column, target_tz, source_tz)) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt_date.postgres__convert_timezone"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720537836.5988913, "supported_languages": null}, "macro.dbt_date.spark__convert_timezone": {"name": "spark__convert_timezone", "resource_type": "macro", "package_name": "dbt_date", "path": "macros\\calendar_date\\convert_timezone.sql", "original_file_path": "macros\\calendar_date\\convert_timezone.sql", "unique_id": "macro.dbt_date.spark__convert_timezone", "macro_sql": "{%- macro spark__convert_timezone(column, target_tz, source_tz) -%}\nfrom_utc_timestamp(\n        to_utc_timestamp({{ column }}, '{{ source_tz }}'),\n        '{{ target_tz }}'\n        )\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720537836.5988913, "supported_languages": null}, "macro.dbt_date.trino__convert_timezone": {"name": "trino__convert_timezone", "resource_type": "macro", "package_name": "dbt_date", "path": "macros\\calendar_date\\convert_timezone.sql", "original_file_path": "macros\\calendar_date\\convert_timezone.sql", "unique_id": "macro.dbt_date.trino__convert_timezone", "macro_sql": "{%- macro trino__convert_timezone(column, target_tz, source_tz) -%}\n    cast((at_timezone(with_timezone(cast({{ column }} as {{ dbt.type_timestamp() }}), '{{ source_tz }}'), '{{ target_tz }}')) as {{ dbt.type_timestamp() }})\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt.type_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720537836.5988913, "supported_languages": null}, "macro.dbt_date.date_part": {"name": "date_part", "resource_type": "macro", "package_name": "dbt_date", "path": "macros\\calendar_date\\date_part.sql", "original_file_path": "macros\\calendar_date\\date_part.sql", "unique_id": "macro.dbt_date.date_part", "macro_sql": "{% macro date_part(datepart, date) -%}\n    {{ adapter.dispatch('date_part', 'dbt_date') (datepart, date) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.tsql_utils.sqlserver__date_part"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720537836.5988913, "supported_languages": null}, "macro.dbt_date.default__date_part": {"name": "default__date_part", "resource_type": "macro", "package_name": "dbt_date", "path": "macros\\calendar_date\\date_part.sql", "original_file_path": "macros\\calendar_date\\date_part.sql", "unique_id": "macro.dbt_date.default__date_part", "macro_sql": "{% macro default__date_part(datepart, date) -%}\n    date_part('{{ datepart }}', {{  date }})\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720537836.5988913, "supported_languages": null}, "macro.dbt_date.bigquery__date_part": {"name": "bigquery__date_part", "resource_type": "macro", "package_name": "dbt_date", "path": "macros\\calendar_date\\date_part.sql", "original_file_path": "macros\\calendar_date\\date_part.sql", "unique_id": "macro.dbt_date.bigquery__date_part", "macro_sql": "{% macro bigquery__date_part(datepart, date) -%}\n    extract({{ datepart }} from {{ date }})\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720537836.5988913, "supported_languages": null}, "macro.dbt_date.trino__date_part": {"name": "trino__date_part", "resource_type": "macro", "package_name": "dbt_date", "path": "macros\\calendar_date\\date_part.sql", "original_file_path": "macros\\calendar_date\\date_part.sql", "unique_id": "macro.dbt_date.trino__date_part", "macro_sql": "{% macro trino__date_part(datepart, date) -%}\n    extract({{ datepart }} from {{ date }})\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720537836.5988913, "supported_languages": null}, "macro.dbt_date.day_name": {"name": "day_name", "resource_type": "macro", "package_name": "dbt_date", "path": "macros\\calendar_date\\day_name.sql", "original_file_path": "macros\\calendar_date\\day_name.sql", "unique_id": "macro.dbt_date.day_name", "macro_sql": "{%- macro day_name(date, short=True) -%}\n    {{ adapter.dispatch('day_name', 'dbt_date') (date, short) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.tsql_utils.sqlserver__day_name"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720537836.5988913, "supported_languages": null}, "macro.dbt_date.default__day_name": {"name": "default__day_name", "resource_type": "macro", "package_name": "dbt_date", "path": "macros\\calendar_date\\day_name.sql", "original_file_path": "macros\\calendar_date\\day_name.sql", "unique_id": "macro.dbt_date.default__day_name", "macro_sql": "\n\n{%- macro default__day_name(date, short) -%}\n{%- set f = 'Dy' if short else 'Day' -%}\n    to_char({{ date }}, '{{ f }}')\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720537836.5988913, "supported_languages": null}, "macro.dbt_date.snowflake__day_name": {"name": "snowflake__day_name", "resource_type": "macro", "package_name": "dbt_date", "path": "macros\\calendar_date\\day_name.sql", "original_file_path": "macros\\calendar_date\\day_name.sql", "unique_id": "macro.dbt_date.snowflake__day_name", "macro_sql": "\n\n{%- macro snowflake__day_name(date, short) -%}\n    {%- if short -%}\n    dayname({{ date }})\n    {%- else -%}\n    -- long version not implemented on Snowflake so we're doing it manually :/\n    case dayname({{ date }})\n        when 'Mon' then 'Monday'\n        when 'Tue' then 'Tuesday'\n        when 'Wed' then 'Wednesday'\n        when 'Thu' then 'Thursday'\n        when 'Fri' then 'Friday'\n        when 'Sat' then 'Saturday'\n        when 'Sun' then 'Sunday'\n    end\n    {%- endif -%}\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720537836.5988913, "supported_languages": null}, "macro.dbt_date.bigquery__day_name": {"name": "bigquery__day_name", "resource_type": "macro", "package_name": "dbt_date", "path": "macros\\calendar_date\\day_name.sql", "original_file_path": "macros\\calendar_date\\day_name.sql", "unique_id": "macro.dbt_date.bigquery__day_name", "macro_sql": "\n\n{%- macro bigquery__day_name(date, short) -%}\n{%- set f = '%a' if short else '%A' -%}\n    format_date('{{ f }}', cast({{ date }} as date))\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720537836.5988913, "supported_languages": null}, "macro.dbt_date.postgres__day_name": {"name": "postgres__day_name", "resource_type": "macro", "package_name": "dbt_date", "path": "macros\\calendar_date\\day_name.sql", "original_file_path": "macros\\calendar_date\\day_name.sql", "unique_id": "macro.dbt_date.postgres__day_name", "macro_sql": "\n\n{%- macro postgres__day_name(date, short) -%}\n{# FM = Fill mode, which suppresses padding blanks #}\n{%- set f = 'FMDy' if short else 'FMDay' -%}\n    to_char({{ date }}, '{{ f }}')\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720537836.5988913, "supported_languages": null}, "macro.dbt_date.duckdb__day_name": {"name": "duckdb__day_name", "resource_type": "macro", "package_name": "dbt_date", "path": "macros\\calendar_date\\day_name.sql", "original_file_path": "macros\\calendar_date\\day_name.sql", "unique_id": "macro.dbt_date.duckdb__day_name", "macro_sql": "\n\n{%- macro duckdb__day_name(date, short) -%}\n    {%- if short -%}\n    substr(dayname({{ date }}), 1, 3)\n    {%- else -%}\n    dayname({{ date }})\n    {%- endif -%}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720537836.6139696, "supported_languages": null}, "macro.dbt_date.spark__day_name": {"name": "spark__day_name", "resource_type": "macro", "package_name": "dbt_date", "path": "macros\\calendar_date\\day_name.sql", "original_file_path": "macros\\calendar_date\\day_name.sql", "unique_id": "macro.dbt_date.spark__day_name", "macro_sql": "\n\n{%- macro spark__day_name(date, short) -%}\n{%- set f = 'E' if short else 'EEEE' -%}\n    date_format({{ date }}, '{{ f }}')\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720537836.6139696, "supported_languages": null}, "macro.dbt_date.trino__day_name": {"name": "trino__day_name", "resource_type": "macro", "package_name": "dbt_date", "path": "macros\\calendar_date\\day_name.sql", "original_file_path": "macros\\calendar_date\\day_name.sql", "unique_id": "macro.dbt_date.trino__day_name", "macro_sql": "\n\n{%- macro trino__day_name(date, short) -%}\n{%- set f = 'a' if short else 'W' -%}\n    date_format({{ date }}, '%{{ f }}')\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720537836.6139696, "supported_languages": null}, "macro.dbt_date.day_of_month": {"name": "day_of_month", "resource_type": "macro", "package_name": "dbt_date", "path": "macros\\calendar_date\\day_of_month.sql", "original_file_path": "macros\\calendar_date\\day_of_month.sql", "unique_id": "macro.dbt_date.day_of_month", "macro_sql": "{%- macro day_of_month(date) -%}\n{{ dbt_date.date_part('day', date) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_date.date_part"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720537836.6139696, "supported_languages": null}, "macro.dbt_date.redshift__day_of_month": {"name": "redshift__day_of_month", "resource_type": "macro", "package_name": "dbt_date", "path": "macros\\calendar_date\\day_of_month.sql", "original_file_path": "macros\\calendar_date\\day_of_month.sql", "unique_id": "macro.dbt_date.redshift__day_of_month", "macro_sql": "\n\n{%- macro redshift__day_of_month(date) -%}\ncast({{ dbt_date.date_part('day', date) }} as {{ dbt.type_bigint() }})\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_date.date_part", "macro.dbt.type_bigint"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720537836.6139696, "supported_languages": null}, "macro.dbt_date.day_of_week": {"name": "day_of_week", "resource_type": "macro", "package_name": "dbt_date", "path": "macros\\calendar_date\\day_of_week.sql", "original_file_path": "macros\\calendar_date\\day_of_week.sql", "unique_id": "macro.dbt_date.day_of_week", "macro_sql": "{%- macro day_of_week(date, isoweek=true) -%}\n{{ adapter.dispatch('day_of_week', 'dbt_date') (date, isoweek) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.tsql_utils.sqlserver__day_of_week"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720537836.6139696, "supported_languages": null}, "macro.dbt_date.default__day_of_week": {"name": "default__day_of_week", "resource_type": "macro", "package_name": "dbt_date", "path": "macros\\calendar_date\\day_of_week.sql", "original_file_path": "macros\\calendar_date\\day_of_week.sql", "unique_id": "macro.dbt_date.default__day_of_week", "macro_sql": "\n\n{%- macro default__day_of_week(date, isoweek) -%}\n\n    {%- set dow = dbt_date.date_part('dayofweek', date) -%}\n\n    {%- if isoweek -%}\n    case\n        -- Shift start of week from Sunday (0) to Monday (1)\n        when {{ dow }} = 0 then 7\n        else {{ dow }}\n    end\n    {%- else -%}\n    {{ dow }} + 1\n    {%- endif -%}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_date.date_part"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720537836.6139696, "supported_languages": null}, "macro.dbt_date.snowflake__day_of_week": {"name": "snowflake__day_of_week", "resource_type": "macro", "package_name": "dbt_date", "path": "macros\\calendar_date\\day_of_week.sql", "original_file_path": "macros\\calendar_date\\day_of_week.sql", "unique_id": "macro.dbt_date.snowflake__day_of_week", "macro_sql": "\n\n{%- macro snowflake__day_of_week(date, isoweek) -%}\n\n    {%- if isoweek -%}\n        {%- set dow_part = 'dayofweekiso' -%}\n        {{ dbt_date.date_part(dow_part, date) }}\n    {%- else -%}\n        {%- set dow_part = 'dayofweek' -%}\n        case\n            when {{ dbt_date.date_part(dow_part, date) }} = 7 then 1\n            else {{ dbt_date.date_part(dow_part, date) }} + 1\n        end\n    {%- endif -%}\n\n\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_date.date_part"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720537836.6139696, "supported_languages": null}, "macro.dbt_date.bigquery__day_of_week": {"name": "bigquery__day_of_week", "resource_type": "macro", "package_name": "dbt_date", "path": "macros\\calendar_date\\day_of_week.sql", "original_file_path": "macros\\calendar_date\\day_of_week.sql", "unique_id": "macro.dbt_date.bigquery__day_of_week", "macro_sql": "\n\n{%- macro bigquery__day_of_week(date, isoweek) -%}\n\n    {%- set dow = dbt_date.date_part('dayofweek', date) -%}\n\n    {%- if isoweek -%}\n    case\n        -- Shift start of week from Sunday (1) to Monday (2)\n        when {{ dow }} = 1 then 7\n        else {{ dow }} - 1\n    end\n    {%- else -%}\n    {{ dow }}\n    {%- endif -%}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_date.date_part"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720537836.6139696, "supported_languages": null}, "macro.dbt_date.postgres__day_of_week": {"name": "postgres__day_of_week", "resource_type": "macro", "package_name": "dbt_date", "path": "macros\\calendar_date\\day_of_week.sql", "original_file_path": "macros\\calendar_date\\day_of_week.sql", "unique_id": "macro.dbt_date.postgres__day_of_week", "macro_sql": "\n\n\n{%- macro postgres__day_of_week(date, isoweek) -%}\n\n    {%- if isoweek -%}\n        {%- set dow_part = 'isodow' -%}\n        -- Monday(1) to Sunday (7)\n        cast({{ dbt_date.date_part(dow_part, date) }} as {{ dbt.type_int() }})\n    {%- else -%}\n        {%- set dow_part = 'dow' -%}\n        -- Sunday(1) to Saturday (7)\n        cast({{ dbt_date.date_part(dow_part, date) }} + 1 as {{ dbt.type_int() }})\n    {%- endif -%}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_date.date_part", "macro.dbt.type_int"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720537836.6139696, "supported_languages": null}, "macro.dbt_date.redshift__day_of_week": {"name": "redshift__day_of_week", "resource_type": "macro", "package_name": "dbt_date", "path": "macros\\calendar_date\\day_of_week.sql", "original_file_path": "macros\\calendar_date\\day_of_week.sql", "unique_id": "macro.dbt_date.redshift__day_of_week", "macro_sql": "\n\n\n{%- macro redshift__day_of_week(date, isoweek) -%}\n\n    {%- set dow = dbt_date.date_part('dayofweek', date) -%}\n\n    {%- if isoweek -%}\n    case\n        -- Shift start of week from Sunday (0) to Monday (1)\n        when {{ dow }} = 0 then 7\n        else cast({{ dow }} as {{ dbt.type_bigint() }})\n    end\n    {%- else -%}\n    cast({{ dow }} + 1 as {{ dbt.type_bigint() }})\n    {%- endif -%}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_date.date_part", "macro.dbt.type_bigint"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720537836.6139696, "supported_languages": null}, "macro.dbt_date.duckdb__day_of_week": {"name": "duckdb__day_of_week", "resource_type": "macro", "package_name": "dbt_date", "path": "macros\\calendar_date\\day_of_week.sql", "original_file_path": "macros\\calendar_date\\day_of_week.sql", "unique_id": "macro.dbt_date.duckdb__day_of_week", "macro_sql": "\n\n{%- macro duckdb__day_of_week(date, isoweek) -%}\n{{ return(dbt_date.postgres__day_of_week(date, isoweek)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_date.postgres__day_of_week"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720537836.6139696, "supported_languages": null}, "macro.dbt_date.spark__day_of_week": {"name": "spark__day_of_week", "resource_type": "macro", "package_name": "dbt_date", "path": "macros\\calendar_date\\day_of_week.sql", "original_file_path": "macros\\calendar_date\\day_of_week.sql", "unique_id": "macro.dbt_date.spark__day_of_week", "macro_sql": "\n\n\n{%- macro spark__day_of_week(date, isoweek) -%}\n\n    {%- set dow = \"dayofweek_iso\" if isoweek else \"dayofweek\" -%}\n\n    {{ dbt_date.date_part(dow, date) }}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_date.date_part"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720537836.6289701, "supported_languages": null}, "macro.dbt_date.trino__day_of_week": {"name": "trino__day_of_week", "resource_type": "macro", "package_name": "dbt_date", "path": "macros\\calendar_date\\day_of_week.sql", "original_file_path": "macros\\calendar_date\\day_of_week.sql", "unique_id": "macro.dbt_date.trino__day_of_week", "macro_sql": "\n\n\n{%- macro trino__day_of_week(date, isoweek) -%}\n\n    {%- set dow = dbt_date.date_part('day_of_week', date) -%}\n\n    {%- if isoweek -%}\n        {{ dow }}\n    {%- else -%}\n        case\n            when {{ dow }} = 7 then 1\n            else {{ dow }} + 1\n        end\n    {%- endif -%}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_date.date_part"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720537836.6289701, "supported_languages": null}, "macro.dbt_date.day_of_year": {"name": "day_of_year", "resource_type": "macro", "package_name": "dbt_date", "path": "macros\\calendar_date\\day_of_year.sql", "original_file_path": "macros\\calendar_date\\day_of_year.sql", "unique_id": "macro.dbt_date.day_of_year", "macro_sql": "{%- macro day_of_year(date) -%}\n{{ adapter.dispatch('day_of_year', 'dbt_date') (date) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_date.default__day_of_year"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720537836.6289701, "supported_languages": null}, "macro.dbt_date.default__day_of_year": {"name": "default__day_of_year", "resource_type": "macro", "package_name": "dbt_date", "path": "macros\\calendar_date\\day_of_year.sql", "original_file_path": "macros\\calendar_date\\day_of_year.sql", "unique_id": "macro.dbt_date.default__day_of_year", "macro_sql": "\n\n{%- macro default__day_of_year(date) -%}\n    {{ dbt_date.date_part('dayofyear', date) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_date.date_part"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720537836.6289701, "supported_languages": null}, "macro.dbt_date.postgres__day_of_year": {"name": "postgres__day_of_year", "resource_type": "macro", "package_name": "dbt_date", "path": "macros\\calendar_date\\day_of_year.sql", "original_file_path": "macros\\calendar_date\\day_of_year.sql", "unique_id": "macro.dbt_date.postgres__day_of_year", "macro_sql": "\n\n{%- macro postgres__day_of_year(date) -%}\n    {{ dbt_date.date_part('doy', date) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_date.date_part"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720537836.6289701, "supported_languages": null}, "macro.dbt_date.redshift__day_of_year": {"name": "redshift__day_of_year", "resource_type": "macro", "package_name": "dbt_date", "path": "macros\\calendar_date\\day_of_year.sql", "original_file_path": "macros\\calendar_date\\day_of_year.sql", "unique_id": "macro.dbt_date.redshift__day_of_year", "macro_sql": "\n\n{%- macro redshift__day_of_year(date) -%}\n    cast({{ dbt_date.date_part('dayofyear', date) }} as {{ dbt.type_bigint() }})\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_date.date_part", "macro.dbt.type_bigint"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720537836.6289701, "supported_languages": null}, "macro.dbt_date.spark__day_of_year": {"name": "spark__day_of_year", "resource_type": "macro", "package_name": "dbt_date", "path": "macros\\calendar_date\\day_of_year.sql", "original_file_path": "macros\\calendar_date\\day_of_year.sql", "unique_id": "macro.dbt_date.spark__day_of_year", "macro_sql": "\n\n{%- macro spark__day_of_year(date) -%}\n    dayofyear({{ date }})\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720537836.6289701, "supported_languages": null}, "macro.dbt_date.trino__day_of_year": {"name": "trino__day_of_year", "resource_type": "macro", "package_name": "dbt_date", "path": "macros\\calendar_date\\day_of_year.sql", "original_file_path": "macros\\calendar_date\\day_of_year.sql", "unique_id": "macro.dbt_date.trino__day_of_year", "macro_sql": "\n\n{%- macro trino__day_of_year(date) -%}\n    {{ dbt_date.date_part('day_of_year', date) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_date.date_part"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720537836.6289701, "supported_languages": null}, "macro.dbt_date.from_unixtimestamp": {"name": "from_unixtimestamp", "resource_type": "macro", "package_name": "dbt_date", "path": "macros\\calendar_date\\from_unixtimestamp.sql", "original_file_path": "macros\\calendar_date\\from_unixtimestamp.sql", "unique_id": "macro.dbt_date.from_unixtimestamp", "macro_sql": "{%- macro from_unixtimestamp(epochs, format=\"seconds\") -%}\n    {{ adapter.dispatch('from_unixtimestamp', 'dbt_date') (epochs, format) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.tsql_utils.sqlserver__from_unixtimestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720537836.6289701, "supported_languages": null}, "macro.dbt_date.default__from_unixtimestamp": {"name": "default__from_unixtimestamp", "resource_type": "macro", "package_name": "dbt_date", "path": "macros\\calendar_date\\from_unixtimestamp.sql", "original_file_path": "macros\\calendar_date\\from_unixtimestamp.sql", "unique_id": "macro.dbt_date.default__from_unixtimestamp", "macro_sql": "\n\n{%- macro default__from_unixtimestamp(epochs, format=\"seconds\") -%}\n    {%- if format != \"seconds\" -%}\n    {{ exceptions.raise_compiler_error(\n        \"value \" ~ format ~ \" for `format` for from_unixtimestamp is not supported.\"\n        )\n    }}\n    {% endif -%}\n    to_timestamp({{ epochs }})\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720537836.6289701, "supported_languages": null}, "macro.dbt_date.postgres__from_unixtimestamp": {"name": "postgres__from_unixtimestamp", "resource_type": "macro", "package_name": "dbt_date", "path": "macros\\calendar_date\\from_unixtimestamp.sql", "original_file_path": "macros\\calendar_date\\from_unixtimestamp.sql", "unique_id": "macro.dbt_date.postgres__from_unixtimestamp", "macro_sql": "\n\n{%- macro postgres__from_unixtimestamp(epochs, format=\"seconds\") -%}\n    {%- if format != \"seconds\" -%}\n    {{ exceptions.raise_compiler_error(\n        \"value \" ~ format ~ \" for `format` for from_unixtimestamp is not supported.\"\n        )\n    }}\n    {% endif -%}\n    cast(to_timestamp({{ epochs }}) at time zone 'UTC' as timestamp)\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720537836.6289701, "supported_languages": null}, "macro.dbt_date.snowflake__from_unixtimestamp": {"name": "snowflake__from_unixtimestamp", "resource_type": "macro", "package_name": "dbt_date", "path": "macros\\calendar_date\\from_unixtimestamp.sql", "original_file_path": "macros\\calendar_date\\from_unixtimestamp.sql", "unique_id": "macro.dbt_date.snowflake__from_unixtimestamp", "macro_sql": "\n\n{%- macro snowflake__from_unixtimestamp(epochs, format) -%}\n    {%- if format == \"seconds\" -%}\n    {%- set scale = 0 -%}\n    {%- elif format == \"milliseconds\" -%}\n    {%- set scale = 3 -%}\n    {%- elif format == \"microseconds\" -%}\n    {%- set scale = 6 -%}\n    {%- else -%}\n    {{ exceptions.raise_compiler_error(\n        \"value \" ~ format ~ \" for `format` for from_unixtimestamp is not supported.\"\n        )\n    }}\n    {% endif -%}\n    to_timestamp_ntz({{ epochs }}, {{ scale }})\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720537836.6289701, "supported_languages": null}, "macro.dbt_date.bigquery__from_unixtimestamp": {"name": "bigquery__from_unixtimestamp", "resource_type": "macro", "package_name": "dbt_date", "path": "macros\\calendar_date\\from_unixtimestamp.sql", "original_file_path": "macros\\calendar_date\\from_unixtimestamp.sql", "unique_id": "macro.dbt_date.bigquery__from_unixtimestamp", "macro_sql": "\n\n{%- macro bigquery__from_unixtimestamp(epochs, format) -%}\n    {%- if format == \"seconds\" -%}\n        timestamp_seconds({{ epochs }})\n    {%- elif format == \"milliseconds\" -%}\n        timestamp_millis({{ epochs }})\n    {%- elif format == \"microseconds\" -%}\n        timestamp_micros({{ epochs }})\n    {%- else -%}\n    {{ exceptions.raise_compiler_error(\n        \"value \" ~ format ~ \" for `format` for from_unixtimestamp is not supported.\"\n        )\n    }}\n    {% endif -%}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720537836.6289701, "supported_languages": null}, "macro.dbt_date.trino__from_unixtimestamp": {"name": "trino__from_unixtimestamp", "resource_type": "macro", "package_name": "dbt_date", "path": "macros\\calendar_date\\from_unixtimestamp.sql", "original_file_path": "macros\\calendar_date\\from_unixtimestamp.sql", "unique_id": "macro.dbt_date.trino__from_unixtimestamp", "macro_sql": "\n\n{%- macro trino__from_unixtimestamp(epochs, format) -%}\n    {%- if format == \"seconds\" -%}\n        cast(from_unixtime({{ epochs }}) AT TIME ZONE 'UTC' as {{ dbt.type_timestamp() }})\n    {%- elif format == \"milliseconds\" -%}\n        cast(from_unixtime_nanos({{ epochs }} * pow(10, 6)) AT TIME ZONE 'UTC' as {{ dbt.type_timestamp() }})\n    {%- elif format == \"microseconds\" -%}\n        cast(from_unixtime_nanos({{ epochs }} * pow(10, 3)) AT TIME ZONE 'UTC' as {{ dbt.type_timestamp() }})\n    {%- elif format == \"nanoseconds\" -%}\n        cast(from_unixtime_nanos({{ epochs }}) AT TIME ZONE 'UTC' as {{ dbt.type_timestamp() }})\n    {%- else -%}\n    {{ exceptions.raise_compiler_error(\n        \"value \" ~ format ~ \" for `format` for from_unixtimestamp is not supported.\"\n        )\n    }}\n    {% endif -%}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.type_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720537836.644177, "supported_languages": null}, "macro.dbt_date.iso_week_end": {"name": "iso_week_end", "resource_type": "macro", "package_name": "dbt_date", "path": "macros\\calendar_date\\iso_week_end.sql", "original_file_path": "macros\\calendar_date\\iso_week_end.sql", "unique_id": "macro.dbt_date.iso_week_end", "macro_sql": "{%- macro iso_week_end(date=None, tz=None) -%}\n{%-set dt = date if date else dbt_date.today(tz) -%}\n{{ adapter.dispatch('iso_week_end', 'dbt_date') (dt) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt_date.today", "macro.dbt_date.default__iso_week_end"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720537836.644177, "supported_languages": null}, "macro.dbt_date._iso_week_end": {"name": "_iso_week_end", "resource_type": "macro", "package_name": "dbt_date", "path": "macros\\calendar_date\\iso_week_end.sql", "original_file_path": "macros\\calendar_date\\iso_week_end.sql", "unique_id": "macro.dbt_date._iso_week_end", "macro_sql": "{%- macro _iso_week_end(date, week_type) -%}\n{%- set dt = dbt_date.iso_week_start(date) -%}\n{{ dbt_date.n_days_away(6, dt) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_date.iso_week_start", "macro.dbt_date.n_days_away"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720537836.644177, "supported_languages": null}, "macro.dbt_date.default__iso_week_end": {"name": "default__iso_week_end", "resource_type": "macro", "package_name": "dbt_date", "path": "macros\\calendar_date\\iso_week_end.sql", "original_file_path": "macros\\calendar_date\\iso_week_end.sql", "unique_id": "macro.dbt_date.default__iso_week_end", "macro_sql": "\n\n{%- macro default__iso_week_end(date) -%}\n{{ dbt_date._iso_week_end(date, 'isoweek') }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_date._iso_week_end"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720537836.644177, "supported_languages": null}, "macro.dbt_date.snowflake__iso_week_end": {"name": "snowflake__iso_week_end", "resource_type": "macro", "package_name": "dbt_date", "path": "macros\\calendar_date\\iso_week_end.sql", "original_file_path": "macros\\calendar_date\\iso_week_end.sql", "unique_id": "macro.dbt_date.snowflake__iso_week_end", "macro_sql": "\n\n{%- macro snowflake__iso_week_end(date) -%}\n{{ dbt_date._iso_week_end(date, 'weekiso') }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_date._iso_week_end"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720537836.644177, "supported_languages": null}, "macro.dbt_date.iso_week_of_year": {"name": "iso_week_of_year", "resource_type": "macro", "package_name": "dbt_date", "path": "macros\\calendar_date\\iso_week_of_year.sql", "original_file_path": "macros\\calendar_date\\iso_week_of_year.sql", "unique_id": "macro.dbt_date.iso_week_of_year", "macro_sql": "{%- macro iso_week_of_year(date=None, tz=None) -%}\n{%-set dt = date if date else dbt_date.today(tz) -%}\n{{ adapter.dispatch('iso_week_of_year', 'dbt_date') (dt) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt_date.today", "macro.tsql_utils.sqlserver__iso_week_of_year"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720537836.644177, "supported_languages": null}, "macro.dbt_date._iso_week_of_year": {"name": "_iso_week_of_year", "resource_type": "macro", "package_name": "dbt_date", "path": "macros\\calendar_date\\iso_week_of_year.sql", "original_file_path": "macros\\calendar_date\\iso_week_of_year.sql", "unique_id": "macro.dbt_date._iso_week_of_year", "macro_sql": "{%- macro _iso_week_of_year(date, week_type) -%}\ncast({{ dbt_date.date_part(week_type, date) }} as {{ dbt.type_int() }})\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_date.date_part", "macro.dbt.type_int"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720537836.644177, "supported_languages": null}, "macro.dbt_date.default__iso_week_of_year": {"name": "default__iso_week_of_year", "resource_type": "macro", "package_name": "dbt_date", "path": "macros\\calendar_date\\iso_week_of_year.sql", "original_file_path": "macros\\calendar_date\\iso_week_of_year.sql", "unique_id": "macro.dbt_date.default__iso_week_of_year", "macro_sql": "\n\n{%- macro default__iso_week_of_year(date) -%}\n{{ dbt_date._iso_week_of_year(date, 'isoweek') }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_date._iso_week_of_year"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720537836.644177, "supported_languages": null}, "macro.dbt_date.snowflake__iso_week_of_year": {"name": "snowflake__iso_week_of_year", "resource_type": "macro", "package_name": "dbt_date", "path": "macros\\calendar_date\\iso_week_of_year.sql", "original_file_path": "macros\\calendar_date\\iso_week_of_year.sql", "unique_id": "macro.dbt_date.snowflake__iso_week_of_year", "macro_sql": "\n\n{%- macro snowflake__iso_week_of_year(date) -%}\n{{ dbt_date._iso_week_of_year(date, 'weekiso') }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_date._iso_week_of_year"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720537836.644177, "supported_languages": null}, "macro.dbt_date.postgres__iso_week_of_year": {"name": "postgres__iso_week_of_year", "resource_type": "macro", "package_name": "dbt_date", "path": "macros\\calendar_date\\iso_week_of_year.sql", "original_file_path": "macros\\calendar_date\\iso_week_of_year.sql", "unique_id": "macro.dbt_date.postgres__iso_week_of_year", "macro_sql": "\n\n{%- macro postgres__iso_week_of_year(date) -%}\n-- postgresql week is isoweek, the first week of a year containing January 4 of that year.\n{{ dbt_date._iso_week_of_year(date, 'week') }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_date._iso_week_of_year"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720537836.644177, "supported_languages": null}, "macro.dbt_date.duckdb__iso_week_of_year": {"name": "duckdb__iso_week_of_year", "resource_type": "macro", "package_name": "dbt_date", "path": "macros\\calendar_date\\iso_week_of_year.sql", "original_file_path": "macros\\calendar_date\\iso_week_of_year.sql", "unique_id": "macro.dbt_date.duckdb__iso_week_of_year", "macro_sql": "\n\n{%- macro duckdb__iso_week_of_year(date) -%}\n{{ return(dbt_date.postgres__iso_week_of_year(date)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_date.postgres__iso_week_of_year"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720537836.644177, "supported_languages": null}, "macro.dbt_date.spark__iso_week_of_year": {"name": "spark__iso_week_of_year", "resource_type": "macro", "package_name": "dbt_date", "path": "macros\\calendar_date\\iso_week_of_year.sql", "original_file_path": "macros\\calendar_date\\iso_week_of_year.sql", "unique_id": "macro.dbt_date.spark__iso_week_of_year", "macro_sql": "\n\n{%- macro spark__iso_week_of_year(date) -%}\n{{ dbt_date._iso_week_of_year(date, 'week') }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_date._iso_week_of_year"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720537836.644177, "supported_languages": null}, "macro.dbt_date.trino__iso_week_of_year": {"name": "trino__iso_week_of_year", "resource_type": "macro", "package_name": "dbt_date", "path": "macros\\calendar_date\\iso_week_of_year.sql", "original_file_path": "macros\\calendar_date\\iso_week_of_year.sql", "unique_id": "macro.dbt_date.trino__iso_week_of_year", "macro_sql": "\n\n{%- macro trino__iso_week_of_year(date) -%}\n{{ dbt_date._iso_week_of_year(date, 'week') }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_date._iso_week_of_year"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720537836.644177, "supported_languages": null}, "macro.dbt_date.iso_week_start": {"name": "iso_week_start", "resource_type": "macro", "package_name": "dbt_date", "path": "macros\\calendar_date\\iso_week_start.sql", "original_file_path": "macros\\calendar_date\\iso_week_start.sql", "unique_id": "macro.dbt_date.iso_week_start", "macro_sql": "{%- macro iso_week_start(date=None, tz=None) -%}\n{%-set dt = date if date else dbt_date.today(tz) -%}\n{{ adapter.dispatch('iso_week_start', 'dbt_date') (dt) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt_date.today", "macro.tsql_utils.sqlserver__iso_week_start"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720537836.654201, "supported_languages": null}, "macro.dbt_date._iso_week_start": {"name": "_iso_week_start", "resource_type": "macro", "package_name": "dbt_date", "path": "macros\\calendar_date\\iso_week_start.sql", "original_file_path": "macros\\calendar_date\\iso_week_start.sql", "unique_id": "macro.dbt_date._iso_week_start", "macro_sql": "{%- macro _iso_week_start(date, week_type) -%}\ncast({{ dbt.date_trunc(week_type, date) }} as date)\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.date_trunc"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720537836.654201, "supported_languages": null}, "macro.dbt_date.default__iso_week_start": {"name": "default__iso_week_start", "resource_type": "macro", "package_name": "dbt_date", "path": "macros\\calendar_date\\iso_week_start.sql", "original_file_path": "macros\\calendar_date\\iso_week_start.sql", "unique_id": "macro.dbt_date.default__iso_week_start", "macro_sql": "\n\n{%- macro default__iso_week_start(date) -%}\n{{ dbt_date._iso_week_start(date, 'isoweek') }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_date._iso_week_start"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720537836.654201, "supported_languages": null}, "macro.dbt_date.snowflake__iso_week_start": {"name": "snowflake__iso_week_start", "resource_type": "macro", "package_name": "dbt_date", "path": "macros\\calendar_date\\iso_week_start.sql", "original_file_path": "macros\\calendar_date\\iso_week_start.sql", "unique_id": "macro.dbt_date.snowflake__iso_week_start", "macro_sql": "\n\n{%- macro snowflake__iso_week_start(date) -%}\n{{ dbt_date._iso_week_start(date, 'week') }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_date._iso_week_start"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720537836.654201, "supported_languages": null}, "macro.dbt_date.postgres__iso_week_start": {"name": "postgres__iso_week_start", "resource_type": "macro", "package_name": "dbt_date", "path": "macros\\calendar_date\\iso_week_start.sql", "original_file_path": "macros\\calendar_date\\iso_week_start.sql", "unique_id": "macro.dbt_date.postgres__iso_week_start", "macro_sql": "\n\n{%- macro postgres__iso_week_start(date) -%}\n{{ dbt_date._iso_week_start(date, 'week') }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_date._iso_week_start"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720537836.654201, "supported_languages": null}, "macro.dbt_date.duckdb__iso_week_start": {"name": "duckdb__iso_week_start", "resource_type": "macro", "package_name": "dbt_date", "path": "macros\\calendar_date\\iso_week_start.sql", "original_file_path": "macros\\calendar_date\\iso_week_start.sql", "unique_id": "macro.dbt_date.duckdb__iso_week_start", "macro_sql": "\n\n{%- macro duckdb__iso_week_start(date) -%}\n{{ return(dbt_date.postgres__iso_week_start(date)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_date.postgres__iso_week_start"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720537836.654201, "supported_languages": null}, "macro.dbt_date.spark__iso_week_start": {"name": "spark__iso_week_start", "resource_type": "macro", "package_name": "dbt_date", "path": "macros\\calendar_date\\iso_week_start.sql", "original_file_path": "macros\\calendar_date\\iso_week_start.sql", "unique_id": "macro.dbt_date.spark__iso_week_start", "macro_sql": "\n\n{%- macro spark__iso_week_start(date) -%}\n{{ dbt_date._iso_week_start(date, 'week') }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_date._iso_week_start"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720537836.654201, "supported_languages": null}, "macro.dbt_date.trino__iso_week_start": {"name": "trino__iso_week_start", "resource_type": "macro", "package_name": "dbt_date", "path": "macros\\calendar_date\\iso_week_start.sql", "original_file_path": "macros\\calendar_date\\iso_week_start.sql", "unique_id": "macro.dbt_date.trino__iso_week_start", "macro_sql": "\n\n{%- macro trino__iso_week_start(date) -%}\n{{ dbt_date._iso_week_start(date, 'week') }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_date._iso_week_start"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720537836.654201, "supported_languages": null}, "macro.dbt_date.last_month": {"name": "last_month", "resource_type": "macro", "package_name": "dbt_date", "path": "macros\\calendar_date\\last_month.sql", "original_file_path": "macros\\calendar_date\\last_month.sql", "unique_id": "macro.dbt_date.last_month", "macro_sql": "{%- macro last_month(tz=None) -%}\n{{ dbt_date.n_months_ago(1, tz) }}\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt_date.n_months_ago"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720537836.6592789, "supported_languages": null}, "macro.dbt_date.last_month_name": {"name": "last_month_name", "resource_type": "macro", "package_name": "dbt_date", "path": "macros\\calendar_date\\last_month_name.sql", "original_file_path": "macros\\calendar_date\\last_month_name.sql", "unique_id": "macro.dbt_date.last_month_name", "macro_sql": "{%- macro last_month_name(short=True, tz=None) -%}\n{{ dbt_date.month_name(dbt_date.last_month(tz), short=short) }}\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt_date.month_name", "macro.dbt_date.last_month"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720537836.6592789, "supported_languages": null}, "macro.dbt_date.last_month_number": {"name": "last_month_number", "resource_type": "macro", "package_name": "dbt_date", "path": "macros\\calendar_date\\last_month_number.sql", "original_file_path": "macros\\calendar_date\\last_month_number.sql", "unique_id": "macro.dbt_date.last_month_number", "macro_sql": "{%- macro last_month_number(tz=None) -%}\n{{ dbt_date.date_part('month', dbt_date.last_month(tz)) }}\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt_date.date_part", "macro.dbt_date.last_month"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720537836.6592789, "supported_languages": null}, "macro.dbt_date.last_week": {"name": "last_week", "resource_type": "macro", "package_name": "dbt_date", "path": "macros\\calendar_date\\last_week.sql", "original_file_path": "macros\\calendar_date\\last_week.sql", "unique_id": "macro.dbt_date.last_week", "macro_sql": "{%- macro last_week(tz=None) -%}\n{{ dbt_date.n_weeks_ago(1, tz) }}\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt_date.n_weeks_ago"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720537836.6592789, "supported_languages": null}, "macro.dbt_date.month_name": {"name": "month_name", "resource_type": "macro", "package_name": "dbt_date", "path": "macros\\calendar_date\\month_name.sql", "original_file_path": "macros\\calendar_date\\month_name.sql", "unique_id": "macro.dbt_date.month_name", "macro_sql": "{%- macro month_name(date, short=True) -%}\n    {{ adapter.dispatch('month_name', 'dbt_date') (date, short) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.tsql_utils.sqlserver__month_name"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720537836.6592789, "supported_languages": null}, "macro.dbt_date.default__month_name": {"name": "default__month_name", "resource_type": "macro", "package_name": "dbt_date", "path": "macros\\calendar_date\\month_name.sql", "original_file_path": "macros\\calendar_date\\month_name.sql", "unique_id": "macro.dbt_date.default__month_name", "macro_sql": "\n\n{%- macro default__month_name(date, short) -%}\n{%- set f = 'MON' if short else 'MONTH' -%}\n    to_char({{ date }}, '{{ f }}')\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720537836.6592789, "supported_languages": null}, "macro.dbt_date.bigquery__month_name": {"name": "bigquery__month_name", "resource_type": "macro", "package_name": "dbt_date", "path": "macros\\calendar_date\\month_name.sql", "original_file_path": "macros\\calendar_date\\month_name.sql", "unique_id": "macro.dbt_date.bigquery__month_name", "macro_sql": "\n\n{%- macro bigquery__month_name(date, short) -%}\n{%- set f = '%b' if short else '%B' -%}\n    format_date('{{ f }}', cast({{ date }} as date))\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720537836.6592789, "supported_languages": null}, "macro.dbt_date.snowflake__month_name": {"name": "snowflake__month_name", "resource_type": "macro", "package_name": "dbt_date", "path": "macros\\calendar_date\\month_name.sql", "original_file_path": "macros\\calendar_date\\month_name.sql", "unique_id": "macro.dbt_date.snowflake__month_name", "macro_sql": "\n\n{%- macro snowflake__month_name(date, short) -%}\n{%- set f = 'MON' if short else 'MMMM' -%}\n    to_char({{ date }}, '{{ f }}')\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720537836.6592789, "supported_languages": null}, "macro.dbt_date.postgres__month_name": {"name": "postgres__month_name", "resource_type": "macro", "package_name": "dbt_date", "path": "macros\\calendar_date\\month_name.sql", "original_file_path": "macros\\calendar_date\\month_name.sql", "unique_id": "macro.dbt_date.postgres__month_name", "macro_sql": "\n\n{%- macro postgres__month_name(date, short) -%}\n{# FM = Fill mode, which suppresses padding blanks #}\n{%- set f = 'FMMon' if short else 'FMMonth' -%}\n    to_char({{ date }}, '{{ f }}')\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720537836.6592789, "supported_languages": null}, "macro.dbt_date.duckdb__month_name": {"name": "duckdb__month_name", "resource_type": "macro", "package_name": "dbt_date", "path": "macros\\calendar_date\\month_name.sql", "original_file_path": "macros\\calendar_date\\month_name.sql", "unique_id": "macro.dbt_date.duckdb__month_name", "macro_sql": "\n\n\n{%- macro duckdb__month_name(date, short) -%}\n    {%- if short -%}\n    substr(monthname({{ date }}), 1, 3)\n    {%- else -%}\n    monthname({{ date }})\n    {%- endif -%}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720537836.6592789, "supported_languages": null}, "macro.dbt_date.spark__month_name": {"name": "spark__month_name", "resource_type": "macro", "package_name": "dbt_date", "path": "macros\\calendar_date\\month_name.sql", "original_file_path": "macros\\calendar_date\\month_name.sql", "unique_id": "macro.dbt_date.spark__month_name", "macro_sql": "\n\n{%- macro spark__month_name(date, short) -%}\n{%- set f = 'LLL' if short else 'LLLL' -%}\n    date_format({{ date }}, '{{ f }}')\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720537836.6592789, "supported_languages": null}, "macro.dbt_date.trino__month_name": {"name": "trino__month_name", "resource_type": "macro", "package_name": "dbt_date", "path": "macros\\calendar_date\\month_name.sql", "original_file_path": "macros\\calendar_date\\month_name.sql", "unique_id": "macro.dbt_date.trino__month_name", "macro_sql": "\n\n{%- macro trino__month_name(date, short) -%}\n{%- set f = 'b' if short else 'M' -%}\n    date_format({{ date }}, '%{{ f }}')\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720537836.6592789, "supported_languages": null}, "macro.dbt_date.next_month": {"name": "next_month", "resource_type": "macro", "package_name": "dbt_date", "path": "macros\\calendar_date\\next_month.sql", "original_file_path": "macros\\calendar_date\\next_month.sql", "unique_id": "macro.dbt_date.next_month", "macro_sql": "{%- macro next_month(tz=None) -%}\n{{ dbt_date.n_months_away(1, tz) }}\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt_date.n_months_away"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720537836.6592789, "supported_languages": null}, "macro.dbt_date.next_month_name": {"name": "next_month_name", "resource_type": "macro", "package_name": "dbt_date", "path": "macros\\calendar_date\\next_month_name.sql", "original_file_path": "macros\\calendar_date\\next_month_name.sql", "unique_id": "macro.dbt_date.next_month_name", "macro_sql": "{%- macro next_month_name(short=True, tz=None) -%}\n{{ dbt_date.month_name(dbt_date.next_month(tz), short=short) }}\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt_date.month_name", "macro.dbt_date.next_month"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720537836.6592789, "supported_languages": null}, "macro.dbt_date.next_month_number": {"name": "next_month_number", "resource_type": "macro", "package_name": "dbt_date", "path": "macros\\calendar_date\\next_month_number.sql", "original_file_path": "macros\\calendar_date\\next_month_number.sql", "unique_id": "macro.dbt_date.next_month_number", "macro_sql": "{%- macro next_month_number(tz=None) -%}\n{{ dbt_date.date_part('month', dbt_date.next_month(tz)) }}\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt_date.date_part", "macro.dbt_date.next_month"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720537836.6592789, "supported_languages": null}, "macro.dbt_date.next_week": {"name": "next_week", "resource_type": "macro", "package_name": "dbt_date", "path": "macros\\calendar_date\\next_week.sql", "original_file_path": "macros\\calendar_date\\next_week.sql", "unique_id": "macro.dbt_date.next_week", "macro_sql": "{%- macro next_week(tz=None) -%}\n{{ dbt_date.n_weeks_away(1, tz) }}\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt_date.n_weeks_away"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720537836.6592789, "supported_languages": null}, "macro.dbt_date.now": {"name": "now", "resource_type": "macro", "package_name": "dbt_date", "path": "macros\\calendar_date\\now.sql", "original_file_path": "macros\\calendar_date\\now.sql", "unique_id": "macro.dbt_date.now", "macro_sql": "{%- macro now(tz=None) -%}\n{{ dbt_date.convert_timezone(dbt.current_timestamp(), tz) }}\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt_date.convert_timezone", "macro.dbt.current_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720537836.6592789, "supported_languages": null}, "macro.dbt_date.n_days_ago": {"name": "n_days_ago", "resource_type": "macro", "package_name": "dbt_date", "path": "macros\\calendar_date\\n_days_ago.sql", "original_file_path": "macros\\calendar_date\\n_days_ago.sql", "unique_id": "macro.dbt_date.n_days_ago", "macro_sql": "{%- macro n_days_ago(n, date=None, tz=None) -%}\n{%-set dt = date if date else dbt_date.today(tz) -%}\n{%- set n = n|int -%}\ncast({{ dbt.dateadd('day', -1 * n, dt) }} as date)\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt_date.today", "macro.dbt.dateadd"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720537836.6592789, "supported_languages": null}, "macro.dbt_date.n_days_away": {"name": "n_days_away", "resource_type": "macro", "package_name": "dbt_date", "path": "macros\\calendar_date\\n_days_away.sql", "original_file_path": "macros\\calendar_date\\n_days_away.sql", "unique_id": "macro.dbt_date.n_days_away", "macro_sql": "{%- macro n_days_away(n, date=None, tz=None) -%}\n{{ dbt_date.n_days_ago(-1 * n, date, tz) }}\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt_date.n_days_ago"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720537836.6592789, "supported_languages": null}, "macro.dbt_date.n_months_ago": {"name": "n_months_ago", "resource_type": "macro", "package_name": "dbt_date", "path": "macros\\calendar_date\\n_months_ago.sql", "original_file_path": "macros\\calendar_date\\n_months_ago.sql", "unique_id": "macro.dbt_date.n_months_ago", "macro_sql": "{%- macro n_months_ago(n, tz=None) -%}\n{%- set n = n|int -%}\n{{ dbt.date_trunc('month',\n    dbt.dateadd('month', -1 * n,\n        dbt_date.today(tz)\n        )\n    ) }}\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt.date_trunc", "macro.dbt.dateadd", "macro.dbt_date.today"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720537836.6742976, "supported_languages": null}, "macro.dbt_date.n_months_away": {"name": "n_months_away", "resource_type": "macro", "package_name": "dbt_date", "path": "macros\\calendar_date\\n_months_away.sql", "original_file_path": "macros\\calendar_date\\n_months_away.sql", "unique_id": "macro.dbt_date.n_months_away", "macro_sql": "{%- macro n_months_away(n, tz=None) -%}\n{%- set n = n|int -%}\n{{ dbt.date_trunc('month',\n    dbt.dateadd('month', n,\n        dbt_date.today(tz)\n        )\n    ) }}\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt.date_trunc", "macro.dbt.dateadd", "macro.dbt_date.today"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720537836.6742976, "supported_languages": null}, "macro.dbt_date.n_weeks_ago": {"name": "n_weeks_ago", "resource_type": "macro", "package_name": "dbt_date", "path": "macros\\calendar_date\\n_weeks_ago.sql", "original_file_path": "macros\\calendar_date\\n_weeks_ago.sql", "unique_id": "macro.dbt_date.n_weeks_ago", "macro_sql": "{%- macro n_weeks_ago(n, tz=None) -%}\n{%- set n = n|int -%}\n{{ dbt.date_trunc('week',\n    dbt.dateadd('week', -1 * n,\n        dbt_date.today(tz)\n        )\n    ) }}\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt.date_trunc", "macro.dbt.dateadd", "macro.dbt_date.today"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720537836.6742976, "supported_languages": null}, "macro.dbt_date.n_weeks_away": {"name": "n_weeks_away", "resource_type": "macro", "package_name": "dbt_date", "path": "macros\\calendar_date\\n_weeks_away.sql", "original_file_path": "macros\\calendar_date\\n_weeks_away.sql", "unique_id": "macro.dbt_date.n_weeks_away", "macro_sql": "{%- macro n_weeks_away(n, tz=None) -%}\n{%- set n = n|int -%}\n{{ dbt.date_trunc('week',\n    dbt.dateadd('week', n,\n        dbt_date.today(tz)\n        )\n    ) }}\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt.date_trunc", "macro.dbt.dateadd", "macro.dbt_date.today"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720537836.6742976, "supported_languages": null}, "macro.dbt_date.periods_since": {"name": "periods_since", "resource_type": "macro", "package_name": "dbt_date", "path": "macros\\calendar_date\\periods_since.sql", "original_file_path": "macros\\calendar_date\\periods_since.sql", "unique_id": "macro.dbt_date.periods_since", "macro_sql": "{%- macro periods_since(date_col, period_name='day', tz=None) -%}\n{{ dbt.datediff(date_col, dbt_date.now(tz), period_name) }}\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt.datediff", "macro.dbt_date.now"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720537836.678373, "supported_languages": null}, "macro.dbt_date.round_timestamp": {"name": "round_timestamp", "resource_type": "macro", "package_name": "dbt_date", "path": "macros\\calendar_date\\round_timestamp.sql", "original_file_path": "macros\\calendar_date\\round_timestamp.sql", "unique_id": "macro.dbt_date.round_timestamp", "macro_sql": "{% macro round_timestamp(timestamp) %}\n    {{ dbt.date_trunc(\"day\", dbt.dateadd(\"hour\", 12, timestamp)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.date_trunc", "macro.dbt.dateadd"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720537836.678373, "supported_languages": null}, "macro.dbt_date.today": {"name": "today", "resource_type": "macro", "package_name": "dbt_date", "path": "macros\\calendar_date\\today.sql", "original_file_path": "macros\\calendar_date\\today.sql", "unique_id": "macro.dbt_date.today", "macro_sql": "{%- macro today(tz=None) -%}\ncast({{ dbt_date.now(tz) }} as date)\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt_date.now"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720537836.678373, "supported_languages": null}, "macro.dbt_date.tomorrow": {"name": "tomorrow", "resource_type": "macro", "package_name": "dbt_date", "path": "macros\\calendar_date\\tomorrow.sql", "original_file_path": "macros\\calendar_date\\tomorrow.sql", "unique_id": "macro.dbt_date.tomorrow", "macro_sql": "{%- macro tomorrow(date=None, tz=None) -%}\n{{ dbt_date.n_days_away(1, date, tz) }}\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt_date.n_days_away"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720537836.678373, "supported_languages": null}, "macro.dbt_date.to_unixtimestamp": {"name": "to_unixtimestamp", "resource_type": "macro", "package_name": "dbt_date", "path": "macros\\calendar_date\\to_unixtimestamp.sql", "original_file_path": "macros\\calendar_date\\to_unixtimestamp.sql", "unique_id": "macro.dbt_date.to_unixtimestamp", "macro_sql": "{%- macro to_unixtimestamp(timestamp) -%}\n    {{ adapter.dispatch('to_unixtimestamp', 'dbt_date') (timestamp) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.tsql_utils.sqlserver__to_unixtimestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720537836.678373, "supported_languages": null}, "macro.dbt_date.default__to_unixtimestamp": {"name": "default__to_unixtimestamp", "resource_type": "macro", "package_name": "dbt_date", "path": "macros\\calendar_date\\to_unixtimestamp.sql", "original_file_path": "macros\\calendar_date\\to_unixtimestamp.sql", "unique_id": "macro.dbt_date.default__to_unixtimestamp", "macro_sql": "\n\n{%- macro default__to_unixtimestamp(timestamp) -%}\n    {{ dbt_date.date_part('epoch', timestamp) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_date.date_part"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720537836.678373, "supported_languages": null}, "macro.dbt_date.snowflake__to_unixtimestamp": {"name": "snowflake__to_unixtimestamp", "resource_type": "macro", "package_name": "dbt_date", "path": "macros\\calendar_date\\to_unixtimestamp.sql", "original_file_path": "macros\\calendar_date\\to_unixtimestamp.sql", "unique_id": "macro.dbt_date.snowflake__to_unixtimestamp", "macro_sql": "\n\n{%- macro snowflake__to_unixtimestamp(timestamp) -%}\n    {{ dbt_date.date_part('epoch_seconds', timestamp) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_date.date_part"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720537836.678373, "supported_languages": null}, "macro.dbt_date.bigquery__to_unixtimestamp": {"name": "bigquery__to_unixtimestamp", "resource_type": "macro", "package_name": "dbt_date", "path": "macros\\calendar_date\\to_unixtimestamp.sql", "original_file_path": "macros\\calendar_date\\to_unixtimestamp.sql", "unique_id": "macro.dbt_date.bigquery__to_unixtimestamp", "macro_sql": "\n\n{%- macro bigquery__to_unixtimestamp(timestamp) -%}\n    unix_seconds({{ timestamp }})\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720537836.678373, "supported_languages": null}, "macro.dbt_date.spark__to_unixtimestamp": {"name": "spark__to_unixtimestamp", "resource_type": "macro", "package_name": "dbt_date", "path": "macros\\calendar_date\\to_unixtimestamp.sql", "original_file_path": "macros\\calendar_date\\to_unixtimestamp.sql", "unique_id": "macro.dbt_date.spark__to_unixtimestamp", "macro_sql": "\n\n{%- macro spark__to_unixtimestamp(timestamp) -%}\n    unix_timestamp({{ timestamp }})\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720537836.678373, "supported_languages": null}, "macro.dbt_date.trino__to_unixtimestamp": {"name": "trino__to_unixtimestamp", "resource_type": "macro", "package_name": "dbt_date", "path": "macros\\calendar_date\\to_unixtimestamp.sql", "original_file_path": "macros\\calendar_date\\to_unixtimestamp.sql", "unique_id": "macro.dbt_date.trino__to_unixtimestamp", "macro_sql": "\n\n{%- macro trino__to_unixtimestamp(timestamp) -%}\n    to_unixtime({{ timestamp }} AT TIME ZONE 'UTC')\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720537836.678373, "supported_languages": null}, "macro.dbt_date.week_end": {"name": "week_end", "resource_type": "macro", "package_name": "dbt_date", "path": "macros\\calendar_date\\week_end.sql", "original_file_path": "macros\\calendar_date\\week_end.sql", "unique_id": "macro.dbt_date.week_end", "macro_sql": "{%- macro week_end(date=None, tz=None) -%}\n{%-set dt = date if date else dbt_date.today(tz) -%}\n{{ adapter.dispatch('week_end', 'dbt_date') (dt) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt_date.today", "macro.tsql_utils.sqlserver__week_end"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720537836.678373, "supported_languages": null}, "macro.dbt_date.default__week_end": {"name": "default__week_end", "resource_type": "macro", "package_name": "dbt_date", "path": "macros\\calendar_date\\week_end.sql", "original_file_path": "macros\\calendar_date\\week_end.sql", "unique_id": "macro.dbt_date.default__week_end", "macro_sql": "{%- macro default__week_end(date) -%}\n{{ last_day(date, 'week') }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.last_day"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720537836.678373, "supported_languages": null}, "macro.dbt_date.snowflake__week_end": {"name": "snowflake__week_end", "resource_type": "macro", "package_name": "dbt_date", "path": "macros\\calendar_date\\week_end.sql", "original_file_path": "macros\\calendar_date\\week_end.sql", "unique_id": "macro.dbt_date.snowflake__week_end", "macro_sql": "\n\n{%- macro snowflake__week_end(date) -%}\n{%- set dt = dbt_date.week_start(date) -%}\n{{ dbt_date.n_days_away(6, dt) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_date.week_start", "macro.dbt_date.n_days_away"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720537836.678373, "supported_languages": null}, "macro.dbt_date.postgres__week_end": {"name": "postgres__week_end", "resource_type": "macro", "package_name": "dbt_date", "path": "macros\\calendar_date\\week_end.sql", "original_file_path": "macros\\calendar_date\\week_end.sql", "unique_id": "macro.dbt_date.postgres__week_end", "macro_sql": "\n\n{%- macro postgres__week_end(date) -%}\n{%- set dt = dbt_date.week_start(date) -%}\n{{ dbt_date.n_days_away(6, dt) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_date.week_start", "macro.dbt_date.n_days_away"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720537836.678373, "supported_languages": null}, "macro.dbt_date.duckdb__week_end": {"name": "duckdb__week_end", "resource_type": "macro", "package_name": "dbt_date", "path": "macros\\calendar_date\\week_end.sql", "original_file_path": "macros\\calendar_date\\week_end.sql", "unique_id": "macro.dbt_date.duckdb__week_end", "macro_sql": "\n\n{%- macro duckdb__week_end(date) -%}\n{{ return(dbt_date.postgres__week_end(date)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_date.postgres__week_end"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720537836.678373, "supported_languages": null}, "macro.dbt_date.week_of_year": {"name": "week_of_year", "resource_type": "macro", "package_name": "dbt_date", "path": "macros\\calendar_date\\week_of_year.sql", "original_file_path": "macros\\calendar_date\\week_of_year.sql", "unique_id": "macro.dbt_date.week_of_year", "macro_sql": "{%- macro week_of_year(date=None, tz=None) -%}\n{%-set dt = date if date else dbt_date.today(tz) -%}\n{{ adapter.dispatch('week_of_year', 'dbt_date') (dt) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt_date.today", "macro.tsql_utils.sqlserver__week_of_year"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720537836.678373, "supported_languages": null}, "macro.dbt_date.default__week_of_year": {"name": "default__week_of_year", "resource_type": "macro", "package_name": "dbt_date", "path": "macros\\calendar_date\\week_of_year.sql", "original_file_path": "macros\\calendar_date\\week_of_year.sql", "unique_id": "macro.dbt_date.default__week_of_year", "macro_sql": "{%- macro default__week_of_year(date) -%}\ncast({{ dbt_date.date_part('week', date) }} as {{ dbt.type_int() }})\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_date.date_part", "macro.dbt.type_int"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720537836.6894531, "supported_languages": null}, "macro.dbt_date.postgres__week_of_year": {"name": "postgres__week_of_year", "resource_type": "macro", "package_name": "dbt_date", "path": "macros\\calendar_date\\week_of_year.sql", "original_file_path": "macros\\calendar_date\\week_of_year.sql", "unique_id": "macro.dbt_date.postgres__week_of_year", "macro_sql": "\n\n{%- macro postgres__week_of_year(date) -%}\n{# postgresql 'week' returns isoweek. Use to_char instead.\n   WW = the first week starts on the first day of the year #}\ncast(to_char({{ date }}, 'WW') as {{ dbt.type_int() }})\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.type_int"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720537836.6900408, "supported_languages": null}, "macro.dbt_date.duckdb__week_of_year": {"name": "duckdb__week_of_year", "resource_type": "macro", "package_name": "dbt_date", "path": "macros\\calendar_date\\week_of_year.sql", "original_file_path": "macros\\calendar_date\\week_of_year.sql", "unique_id": "macro.dbt_date.duckdb__week_of_year", "macro_sql": "\n\n{%- macro duckdb__week_of_year(date) -%}\ncast(ceil(dayofyear({{ date }}) / 7) as int)\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720537836.6900408, "supported_languages": null}, "macro.dbt_date.week_start": {"name": "week_start", "resource_type": "macro", "package_name": "dbt_date", "path": "macros\\calendar_date\\week_start.sql", "original_file_path": "macros\\calendar_date\\week_start.sql", "unique_id": "macro.dbt_date.week_start", "macro_sql": "{%- macro week_start(date=None, tz=None) -%}\n{%-set dt = date if date else dbt_date.today(tz) -%}\n{{ adapter.dispatch('week_start', 'dbt_date') (dt) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt_date.today", "macro.tsql_utils.sqlserver__week_start"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720537836.6900408, "supported_languages": null}, "macro.dbt_date.default__week_start": {"name": "default__week_start", "resource_type": "macro", "package_name": "dbt_date", "path": "macros\\calendar_date\\week_start.sql", "original_file_path": "macros\\calendar_date\\week_start.sql", "unique_id": "macro.dbt_date.default__week_start", "macro_sql": "{%- macro default__week_start(date) -%}\ncast({{ dbt.date_trunc('week', date) }} as date)\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.date_trunc"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720537836.6900408, "supported_languages": null}, "macro.dbt_date.snowflake__week_start": {"name": "snowflake__week_start", "resource_type": "macro", "package_name": "dbt_date", "path": "macros\\calendar_date\\week_start.sql", "original_file_path": "macros\\calendar_date\\week_start.sql", "unique_id": "macro.dbt_date.snowflake__week_start", "macro_sql": "\n\n{%- macro snowflake__week_start(date) -%}\n    {#\n        Get the day of week offset: e.g. if the date is a Sunday,\n        dbt_date.day_of_week returns 1, so we subtract 1 to get a 0 offset\n    #}\n    {% set off_set = dbt_date.day_of_week(date, isoweek=False) ~ \" - 1\" %}\n    cast({{ dbt.dateadd(\"day\", \"-1 * (\" ~ off_set ~ \")\", date) }} as date)\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_date.day_of_week", "macro.dbt.dateadd"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720537836.6900408, "supported_languages": null}, "macro.dbt_date.postgres__week_start": {"name": "postgres__week_start", "resource_type": "macro", "package_name": "dbt_date", "path": "macros\\calendar_date\\week_start.sql", "original_file_path": "macros\\calendar_date\\week_start.sql", "unique_id": "macro.dbt_date.postgres__week_start", "macro_sql": "\n\n{%- macro postgres__week_start(date) -%}\n-- Sunday as week start date\ncast({{ dbt.dateadd('day', -1, dbt.date_trunc('week', dbt.dateadd('day', 1, date))) }} as date)\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.dateadd", "macro.dbt.date_trunc"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720537836.6900408, "supported_languages": null}, "macro.dbt_date.duckdb__week_start": {"name": "duckdb__week_start", "resource_type": "macro", "package_name": "dbt_date", "path": "macros\\calendar_date\\week_start.sql", "original_file_path": "macros\\calendar_date\\week_start.sql", "unique_id": "macro.dbt_date.duckdb__week_start", "macro_sql": "\n\n{%- macro duckdb__week_start(date) -%}\n{{ return(dbt_date.postgres__week_start(date)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_date.postgres__week_start"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720537836.6900408, "supported_languages": null}, "macro.dbt_date.yesterday": {"name": "yesterday", "resource_type": "macro", "package_name": "dbt_date", "path": "macros\\calendar_date\\yesterday.sql", "original_file_path": "macros\\calendar_date\\yesterday.sql", "unique_id": "macro.dbt_date.yesterday", "macro_sql": "{%- macro yesterday(date=None, tz=None) -%}\n{{ dbt_date.n_days_ago(1, date, tz) }}\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt_date.n_days_ago"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720537836.6900408, "supported_languages": null}, "macro.dbt_date.get_fiscal_periods": {"name": "get_fiscal_periods", "resource_type": "macro", "package_name": "dbt_date", "path": "macros\\fiscal_date\\get_fiscal_periods.sql", "original_file_path": "macros\\fiscal_date\\get_fiscal_periods.sql", "unique_id": "macro.dbt_date.get_fiscal_periods", "macro_sql": "{% macro get_fiscal_periods(dates, year_end_month, week_start_day, shift_year=1) %}\n{#\nThis macro requires you to pass in a ref to a date dimension, created via\ndbt_date.get_date_dimension()s\n#}\nwith fscl_year_dates_for_periods as (\n    {{ dbt_date.get_fiscal_year_dates(dates, year_end_month, week_start_day, shift_year) }}\n),\nfscl_year_w13 as (\n\n    select\n        f.*,\n        -- We count the weeks in a 13 week period\n        -- and separate the 4-5-4 week sequences\n        mod(cast(\n            (f.fiscal_week_of_year-1) as {{ dbt.type_int() }}\n            ), 13) as w13_number,\n        -- Chop weeks into 13 week merch quarters\n        cast(\n            least(\n                floor((f.fiscal_week_of_year-1)/13.0)\n                , 3)\n            as {{ dbt.type_int() }}) as quarter_number\n    from\n        fscl_year_dates_for_periods f\n\n),\nfscl_periods as (\n\n    select\n        f.date_day,\n        f.fiscal_year_number,\n        f.week_start_date,\n        f.week_end_date,\n        f.fiscal_week_of_year,\n        case\n            -- we move week 53 into the 3rd period of the quarter\n            when f.fiscal_week_of_year = 53 then 3\n            when f.w13_number between 0 and 3 then 1\n            when f.w13_number between 4 and 8 then 2\n            when f.w13_number between 9 and 12 then 3\n        end as period_of_quarter,\n        f.quarter_number\n    from\n        fscl_year_w13 f\n\n),\nfscl_periods_quarters as (\n\n    select\n        f.*,\n        cast((\n            (f.quarter_number * 3) + f.period_of_quarter\n         ) as {{ dbt.type_int() }}) as fiscal_period_number\n    from\n        fscl_periods f\n\n)\nselect\n    date_day,\n    fiscal_year_number,\n    week_start_date,\n    week_end_date,\n    fiscal_week_of_year,\n    dense_rank() over(partition by fiscal_period_number order by fiscal_week_of_year) as fiscal_week_of_period,\n    fiscal_period_number,\n    quarter_number+1 as fiscal_quarter_number,\n    period_of_quarter as fiscal_period_of_quarter\nfrom\n    fscl_periods_quarters\norder by 1,2\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_date.get_fiscal_year_dates", "macro.dbt.type_int"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720537836.6900408, "supported_languages": null}, "macro.dbt_date.get_fiscal_year_dates": {"name": "get_fiscal_year_dates", "resource_type": "macro", "package_name": "dbt_date", "path": "macros\\fiscal_date\\get_fiscal_year_dates.sql", "original_file_path": "macros\\fiscal_date\\get_fiscal_year_dates.sql", "unique_id": "macro.dbt_date.get_fiscal_year_dates", "macro_sql": "{% macro get_fiscal_year_dates(dates, year_end_month=12, week_start_day=1, shift_year=1) %}\n{{ adapter.dispatch('get_fiscal_year_dates', 'dbt_date') (dates, year_end_month, week_start_day, shift_year) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_date.default__get_fiscal_year_dates"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720537836.7001193, "supported_languages": null}, "macro.dbt_date.default__get_fiscal_year_dates": {"name": "default__get_fiscal_year_dates", "resource_type": "macro", "package_name": "dbt_date", "path": "macros\\fiscal_date\\get_fiscal_year_dates.sql", "original_file_path": "macros\\fiscal_date\\get_fiscal_year_dates.sql", "unique_id": "macro.dbt_date.default__get_fiscal_year_dates", "macro_sql": "{% macro default__get_fiscal_year_dates(dates, year_end_month, week_start_day, shift_year) %}\n-- this gets all the dates within a fiscal year\n-- determined by the given year-end-month\n-- ending on the saturday closest to that month's end date\nwith fsc_date_dimension as (\n    select * from {{ dates }}\n),\nyear_month_end as (\n\n    select\n       d.year_number - {{ shift_year }} as fiscal_year_number,\n       d.month_end_date\n    from\n        fsc_date_dimension d\n    where\n        d.month_of_year = {{ year_end_month }}\n    group by 1,2\n\n),\nweeks as (\n\n    select\n        d.year_number,\n        d.month_of_year,\n        d.date_day as week_start_date,\n        cast({{ dbt.dateadd('day', 6, 'd.date_day') }} as date) as week_end_date\n    from\n        fsc_date_dimension d\n    where\n        d.day_of_week = {{ week_start_day }}\n\n),\n-- get all the weeks that start in the month the year ends\nyear_week_ends as (\n\n    select\n        d.year_number - {{ shift_year }} as fiscal_year_number,\n        d.week_end_date\n    from\n        weeks d\n    where\n        d.month_of_year = {{ year_end_month }}\n    group by\n        1,2\n\n),\n-- then calculate which Saturday is closest to month end\nweeks_at_month_end as (\n\n    select\n        d.fiscal_year_number,\n        d.week_end_date,\n        m.month_end_date,\n        rank() over\n            (partition by d.fiscal_year_number\n                order by\n                abs({{ dbt.datediff('d.week_end_date', 'm.month_end_date', 'day') }})\n\n            ) as closest_to_month_end\n    from\n        year_week_ends d\n        join\n        year_month_end m on d.fiscal_year_number = m.fiscal_year_number\n),\nfiscal_year_range as (\n\n    select\n        w.fiscal_year_number,\n        cast(\n            {{ dbt.dateadd('day', 1,\n            'lag(w.week_end_date) over(order by w.week_end_date)') }}\n            as date) as fiscal_year_start_date,\n        w.week_end_date as fiscal_year_end_date\n    from\n        weeks_at_month_end w\n    where\n        w.closest_to_month_end = 1\n\n),\nfiscal_year_dates as (\n\n    select\n        d.date_day,\n        m.fiscal_year_number,\n        m.fiscal_year_start_date,\n        m.fiscal_year_end_date,\n        w.week_start_date,\n        w.week_end_date,\n        -- we reset the weeks of the year starting with the merch year start date\n        dense_rank()\n            over(\n                partition by m.fiscal_year_number\n                order by w.week_start_date\n                ) as fiscal_week_of_year\n    from\n        fsc_date_dimension d\n        join\n        fiscal_year_range m on d.date_day between m.fiscal_year_start_date and m.fiscal_year_end_date\n        join\n        weeks w on d.date_day between w.week_start_date and w.week_end_date\n\n)\nselect * from fiscal_year_dates order by 1\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.dateadd", "macro.dbt.datediff"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720537836.7001193, "supported_languages": null}, "macro.dbt_date.get_intervals_between": {"name": "get_intervals_between", "resource_type": "macro", "package_name": "dbt_date", "path": "macros\\_utils\\date_spine.sql", "original_file_path": "macros\\_utils\\date_spine.sql", "unique_id": "macro.dbt_date.get_intervals_between", "macro_sql": "{% macro get_intervals_between(start_date, end_date, datepart) -%}\n    {{ return(adapter.dispatch('get_intervals_between', 'dbt_date')(start_date, end_date, datepart)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_date.default__get_intervals_between"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720537836.7046962, "supported_languages": null}, "macro.dbt_date.default__get_intervals_between": {"name": "default__get_intervals_between", "resource_type": "macro", "package_name": "dbt_date", "path": "macros\\_utils\\date_spine.sql", "original_file_path": "macros\\_utils\\date_spine.sql", "unique_id": "macro.dbt_date.default__get_intervals_between", "macro_sql": "{% macro default__get_intervals_between(start_date, end_date, datepart) -%}\n    {%- call statement('get_intervals_between', fetch_result=True) %}\n\n        select {{ dbt.datediff(start_date, end_date, datepart) }}\n\n    {%- endcall -%}\n\n    {%- set value_list = load_result('get_intervals_between') -%}\n\n    {%- if value_list and value_list['data'] -%}\n        {%- set values = value_list['data'] | map(attribute=0) | list %}\n        {{ return(values[0]) }}\n    {%- else -%}\n        {{ return(1) }}\n    {%- endif -%}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt.datediff"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720537836.7046962, "supported_languages": null}, "macro.dbt_date.date_spine": {"name": "date_spine", "resource_type": "macro", "package_name": "dbt_date", "path": "macros\\_utils\\date_spine.sql", "original_file_path": "macros\\_utils\\date_spine.sql", "unique_id": "macro.dbt_date.date_spine", "macro_sql": "{% macro date_spine(datepart, start_date, end_date) %}\n    {{ return(adapter.dispatch('date_spine', 'dbt_date')(datepart, start_date, end_date)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.tsql_utils.sqlserver__date_spine"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720537836.7046962, "supported_languages": null}, "macro.dbt_date.default__date_spine": {"name": "default__date_spine", "resource_type": "macro", "package_name": "dbt_date", "path": "macros\\_utils\\date_spine.sql", "original_file_path": "macros\\_utils\\date_spine.sql", "unique_id": "macro.dbt_date.default__date_spine", "macro_sql": "{% macro default__date_spine(datepart, start_date, end_date) %}\n\n\n{# call as follows:\n\ndate_spine(\n    \"day\",\n    \"to_date('01/01/2016', 'mm/dd/yyyy')\",\n    \"dbt.dateadd(week, 1, current_date)\"\n) #}\n\n\nwith rawdata as (\n\n    {{\n        dbt_date.generate_series(\n            dbt_date.get_intervals_between(start_date, end_date, datepart)\n        )\n    }}\n\n),\n\nall_periods as (\n\n    select (\n        {{\n            dbt.dateadd(\n                datepart,\n                \"(row_number() over (order by 1) - 1)\",\n                start_date\n            )\n        }}\n    ) as date_{{datepart}}\n    from rawdata\n\n),\n\nfiltered as (\n\n    select *\n    from all_periods\n    where date_{{datepart}} <= {{ end_date }}\n\n)\n\nselect * from filtered\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_date.generate_series", "macro.dbt_date.get_intervals_between", "macro.dbt.dateadd"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720537836.7046962, "supported_languages": null}, "macro.dbt_date.get_powers_of_two": {"name": "get_powers_of_two", "resource_type": "macro", "package_name": "dbt_date", "path": "macros\\_utils\\generate_series.sql", "original_file_path": "macros\\_utils\\generate_series.sql", "unique_id": "macro.dbt_date.get_powers_of_two", "macro_sql": "{% macro get_powers_of_two(upper_bound) %}\n    {{ return(adapter.dispatch('get_powers_of_two', 'dbt_date')(upper_bound)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_date.default__get_powers_of_two"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720537836.7046962, "supported_languages": null}, "macro.dbt_date.default__get_powers_of_two": {"name": "default__get_powers_of_two", "resource_type": "macro", "package_name": "dbt_date", "path": "macros\\_utils\\generate_series.sql", "original_file_path": "macros\\_utils\\generate_series.sql", "unique_id": "macro.dbt_date.default__get_powers_of_two", "macro_sql": "{% macro default__get_powers_of_two(upper_bound) %}\n\n    {% if upper_bound <= 0 %}\n    {{ exceptions.raise_compiler_error(\"upper bound must be positive\") }}\n    {% endif %}\n\n    {% for _ in range(1, 100) %}\n       {% if upper_bound <= 2 ** loop.index %}{{ return(loop.index) }}{% endif %}\n    {% endfor %}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720537836.7046962, "supported_languages": null}, "macro.dbt_date.generate_series": {"name": "generate_series", "resource_type": "macro", "package_name": "dbt_date", "path": "macros\\_utils\\generate_series.sql", "original_file_path": "macros\\_utils\\generate_series.sql", "unique_id": "macro.dbt_date.generate_series", "macro_sql": "{% macro generate_series(upper_bound) %}\n    {{ return(adapter.dispatch('generate_series', 'dbt_date')(upper_bound)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.tsql_utils.sqlserver__generate_series"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720537836.7046962, "supported_languages": null}, "macro.dbt_date.default__generate_series": {"name": "default__generate_series", "resource_type": "macro", "package_name": "dbt_date", "path": "macros\\_utils\\generate_series.sql", "original_file_path": "macros\\_utils\\generate_series.sql", "unique_id": "macro.dbt_date.default__generate_series", "macro_sql": "{% macro default__generate_series(upper_bound) %}\n\n    {% set n = dbt_date.get_powers_of_two(upper_bound) %}\n\n    with p as (\n        select 0 as generated_number union all select 1\n    ), unioned as (\n\n    select\n\n    {% for i in range(n) %}\n    p{{i}}.generated_number * power(2, {{i}})\n    {% if not loop.last %} + {% endif %}\n    {% endfor %}\n    + 1\n    as generated_number\n\n    from\n\n    {% for i in range(n) %}\n    p as p{{i}}\n    {% if not loop.last %} cross join {% endif %}\n    {% endfor %}\n\n    )\n\n    select *\n    from unioned\n    where generated_number <= {{upper_bound}}\n    order by generated_number\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_date.get_powers_of_two"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720537836.7046962, "supported_languages": null}, "macro.dbt_date.date": {"name": "date", "resource_type": "macro", "package_name": "dbt_date", "path": "macros\\_utils\\modules_datetime.sql", "original_file_path": "macros\\_utils\\modules_datetime.sql", "unique_id": "macro.dbt_date.date", "macro_sql": "{% macro date(year, month, day) %}\n    {{ return(modules.datetime.date(year, month, day)) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720537836.7046962, "supported_languages": null}, "macro.dbt_date.datetime": {"name": "datetime", "resource_type": "macro", "package_name": "dbt_date", "path": "macros\\_utils\\modules_datetime.sql", "original_file_path": "macros\\_utils\\modules_datetime.sql", "unique_id": "macro.dbt_date.datetime", "macro_sql": "{% macro datetime(year, month, day, hour=0, minute=0, second=0, microsecond=0, tz=None) %}\n    {% set tz = tz if tz else var(\"dbt_date:time_zone\") %}\n    {{ return(\n        modules.datetime.datetime(\n            year=year, month=month, day=day, hour=hour,\n            minute=minute, second=second, microsecond=microsecond,\n            tzinfo=modules.pytz.timezone(tz)\n        )\n    ) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720537836.7046962, "supported_languages": null}, "macro.dbt_expectations.log_natural": {"name": "log_natural", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros\\math\\log_natural.sql", "original_file_path": "macros\\math\\log_natural.sql", "unique_id": "macro.dbt_expectations.log_natural", "macro_sql": "{% macro log_natural(x) -%}\n    {{ adapter.dispatch('log_natural', 'dbt_expectations') (x) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.tsql_utils.sqlserver__log_natural"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720537836.7046962, "supported_languages": null}, "macro.dbt_expectations.default__log_natural": {"name": "default__log_natural", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros\\math\\log_natural.sql", "original_file_path": "macros\\math\\log_natural.sql", "unique_id": "macro.dbt_expectations.default__log_natural", "macro_sql": "{% macro default__log_natural(x) -%}\n\n    ln({{ x }})\n\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720537836.7046962, "supported_languages": null}, "macro.dbt_expectations.bigquery__log_natural": {"name": "bigquery__log_natural", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros\\math\\log_natural.sql", "original_file_path": "macros\\math\\log_natural.sql", "unique_id": "macro.dbt_expectations.bigquery__log_natural", "macro_sql": "{% macro bigquery__log_natural(x) -%}\n\n    ln({{ x }})\n\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720537836.7046962, "supported_languages": null}, "macro.dbt_expectations.snowflake__log_natural": {"name": "snowflake__log_natural", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros\\math\\log_natural.sql", "original_file_path": "macros\\math\\log_natural.sql", "unique_id": "macro.dbt_expectations.snowflake__log_natural", "macro_sql": "{% macro snowflake__log_natural(x) -%}\n\n    ln({{ x }})\n\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720537836.7046962, "supported_languages": null}, "macro.dbt_expectations.spark__log_natural": {"name": "spark__log_natural", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros\\math\\log_natural.sql", "original_file_path": "macros\\math\\log_natural.sql", "unique_id": "macro.dbt_expectations.spark__log_natural", "macro_sql": "{% macro spark__log_natural(x) -%}\n\n    ln({{ x }})\n\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720537836.7046962, "supported_languages": null}, "macro.dbt_expectations.median": {"name": "median", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros\\math\\median.sql", "original_file_path": "macros\\math\\median.sql", "unique_id": "macro.dbt_expectations.median", "macro_sql": "{% macro median(field) %}\n{{ dbt_expectations.percentile_cont(field, 0.5) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_expectations.percentile_cont"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720537836.719722, "supported_languages": null}, "macro.dbt_expectations.percentile_cont": {"name": "percentile_cont", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros\\math\\percentile_cont.sql", "original_file_path": "macros\\math\\percentile_cont.sql", "unique_id": "macro.dbt_expectations.percentile_cont", "macro_sql": "{% macro percentile_cont(field, quantile, partition=None) %}\n  {{ adapter.dispatch('quantile', 'dbt_expectations') (field, quantile, partition) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_expectations.default__quantile"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720537836.719722, "supported_languages": null}, "macro.dbt_expectations.default__quantile": {"name": "default__quantile", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros\\math\\percentile_cont.sql", "original_file_path": "macros\\math\\percentile_cont.sql", "unique_id": "macro.dbt_expectations.default__quantile", "macro_sql": "{% macro default__quantile(field, quantile, partition)  -%}\n    percentile_cont({{ quantile }}) within group (order by {{ field }})\n    {%- if partition %}over(partition by {{ partition }}){% endif -%}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720537836.719722, "supported_languages": null}, "macro.dbt_expectations.bigquery__quantile": {"name": "bigquery__quantile", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros\\math\\percentile_cont.sql", "original_file_path": "macros\\math\\percentile_cont.sql", "unique_id": "macro.dbt_expectations.bigquery__quantile", "macro_sql": "{% macro bigquery__quantile(field, quantile, partition) -%}\n    percentile_cont({{ field }}, {{ quantile }})\n    over({%- if partition %}partition by {{ partition }}{% endif -%})\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720537836.719722, "supported_languages": null}, "macro.dbt_expectations.spark__quantile": {"name": "spark__quantile", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros\\math\\percentile_cont.sql", "original_file_path": "macros\\math\\percentile_cont.sql", "unique_id": "macro.dbt_expectations.spark__quantile", "macro_sql": "{% macro spark__quantile(field, quantile, partition) -%}\n    percentile({{ field }}, {{ quantile }})\n    over({%- if partition %}partition by {{ partition }}{% endif -%})\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720537836.719722, "supported_languages": null}, "macro.dbt_expectations.rand": {"name": "rand", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros\\math\\rand.sql", "original_file_path": "macros\\math\\rand.sql", "unique_id": "macro.dbt_expectations.rand", "macro_sql": "{% macro rand() -%}\n    {{ adapter.dispatch('rand', 'dbt_expectations') () }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_expectations.default__rand"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720537836.719722, "supported_languages": null}, "macro.dbt_expectations.default__rand": {"name": "default__rand", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros\\math\\rand.sql", "original_file_path": "macros\\math\\rand.sql", "unique_id": "macro.dbt_expectations.default__rand", "macro_sql": "{% macro default__rand() -%}\n\n    rand()\n\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720537836.719722, "supported_languages": null}, "macro.dbt_expectations.bigquery__rand": {"name": "bigquery__rand", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros\\math\\rand.sql", "original_file_path": "macros\\math\\rand.sql", "unique_id": "macro.dbt_expectations.bigquery__rand", "macro_sql": "{% macro bigquery__rand() -%}\n\n    rand()\n\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720537836.719722, "supported_languages": null}, "macro.dbt_expectations.snowflake__rand": {"name": "snowflake__rand", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros\\math\\rand.sql", "original_file_path": "macros\\math\\rand.sql", "unique_id": "macro.dbt_expectations.snowflake__rand", "macro_sql": "{% macro snowflake__rand(seed) -%}\n\n    uniform(0::float, 1::float, random())\n\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720537836.719722, "supported_languages": null}, "macro.dbt_expectations.postgres__rand": {"name": "postgres__rand", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros\\math\\rand.sql", "original_file_path": "macros\\math\\rand.sql", "unique_id": "macro.dbt_expectations.postgres__rand", "macro_sql": "{% macro postgres__rand() -%}\n\n    random()\n\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720537836.719722, "supported_languages": null}, "macro.dbt_expectations.redshift__rand": {"name": "redshift__rand", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros\\math\\rand.sql", "original_file_path": "macros\\math\\rand.sql", "unique_id": "macro.dbt_expectations.redshift__rand", "macro_sql": "{% macro redshift__rand() -%}\n\n    random()\n\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720537836.719722, "supported_languages": null}, "macro.dbt_expectations.duckdb__rand": {"name": "duckdb__rand", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros\\math\\rand.sql", "original_file_path": "macros\\math\\rand.sql", "unique_id": "macro.dbt_expectations.duckdb__rand", "macro_sql": "{% macro duckdb__rand() -%}\n\n    random()\n\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720537836.719722, "supported_languages": null}, "macro.dbt_expectations.regexp_instr": {"name": "regexp_instr", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros\\regex\\regexp_instr.sql", "original_file_path": "macros\\regex\\regexp_instr.sql", "unique_id": "macro.dbt_expectations.regexp_instr", "macro_sql": "{% macro regexp_instr(source_value, regexp, position=1, occurrence=1, is_raw=False, flags=\"\") %}\n\n    {{ adapter.dispatch('regexp_instr', 'dbt_expectations')(\n        source_value, regexp, position, occurrence, is_raw, flags\n    ) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_expectations.default__regexp_instr"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720537836.719722, "supported_languages": null}, "macro.dbt_expectations.default__regexp_instr": {"name": "default__regexp_instr", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros\\regex\\regexp_instr.sql", "original_file_path": "macros\\regex\\regexp_instr.sql", "unique_id": "macro.dbt_expectations.default__regexp_instr", "macro_sql": "{% macro default__regexp_instr(source_value, regexp, position, occurrence, is_raw, flags) %}\n{# unclear if other databases support raw strings or flags #}\n{% if is_raw or flags %}\n    {{ exceptions.warn(\n            \"is_raw and flags options are not supported for this adapter \"\n            ~ \"and are being ignored.\"\n    ) }}\n{% endif %}\nregexp_instr({{ source_value }}, '{{ regexp }}', {{ position }}, {{ occurrence }})\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720537836.719722, "supported_languages": null}, "macro.dbt_expectations.snowflake__regexp_instr": {"name": "snowflake__regexp_instr", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros\\regex\\regexp_instr.sql", "original_file_path": "macros\\regex\\regexp_instr.sql", "unique_id": "macro.dbt_expectations.snowflake__regexp_instr", "macro_sql": "{% macro snowflake__regexp_instr(source_value, regexp, position, occurrence, is_raw, flags) %}\n{%- set regexp = \"$$\" ~ regexp ~ \"$$\" if is_raw else \"'\" ~ regexp ~ \"'\" -%}\n{% if flags %}{{ dbt_expectations._validate_flags(flags, 'cimes') }}{% endif %}\nregexp_instr({{ source_value }}, {{ regexp }}, {{ position }}, {{ occurrence }}, 0, '{{ flags }}')\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_expectations._validate_flags"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720537836.719722, "supported_languages": null}, "macro.dbt_expectations.bigquery__regexp_instr": {"name": "bigquery__regexp_instr", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros\\regex\\regexp_instr.sql", "original_file_path": "macros\\regex\\regexp_instr.sql", "unique_id": "macro.dbt_expectations.bigquery__regexp_instr", "macro_sql": "{% macro bigquery__regexp_instr(source_value, regexp, position, occurrence, is_raw, flags) %}\n{% if flags %}\n    {{ dbt_expectations._validate_re2_flags(flags) }}\n    {# BigQuery prepends \"(?flags)\" to set flags for current group #}\n    {%- set regexp = \"(?\" ~ flags ~ \")\" ~ regexp -%}\n{% endif %}\n{%- set regexp = \"r'\" ~ regexp ~ \"'\" if is_raw else \"'\" ~ regexp ~ \"'\" -%}\nregexp_instr({{ source_value }}, {{ regexp }}, {{ position }}, {{ occurrence }})\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_expectations._validate_re2_flags"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720537836.719722, "supported_languages": null}, "macro.dbt_expectations.postgres__regexp_instr": {"name": "postgres__regexp_instr", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros\\regex\\regexp_instr.sql", "original_file_path": "macros\\regex\\regexp_instr.sql", "unique_id": "macro.dbt_expectations.postgres__regexp_instr", "macro_sql": "{% macro postgres__regexp_instr(source_value, regexp, position, occurrence, is_raw, flags) %}\n{% if flags %}{{ dbt_expectations._validate_flags(flags, 'bcegimnpqstwx') }}{% endif %}\ncoalesce(array_length((select regexp_matches({{ source_value }}, '{{ regexp }}', '{{ flags }}')), 1), 0)\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_expectations._validate_flags"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720537836.7355747, "supported_languages": null}, "macro.dbt_expectations.redshift__regexp_instr": {"name": "redshift__regexp_instr", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros\\regex\\regexp_instr.sql", "original_file_path": "macros\\regex\\regexp_instr.sql", "unique_id": "macro.dbt_expectations.redshift__regexp_instr", "macro_sql": "{% macro redshift__regexp_instr(source_value, regexp, position, occurrence, is_raw, flags) %}\n{% if flags %}{{ dbt_expectations._validate_flags(flags, 'ciep') }}{% endif %}\nregexp_instr({{ source_value }}, '{{ regexp }}', {{ position }}, {{ occurrence }}, 0, '{{ flags }}')\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_expectations._validate_flags"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720537836.7375965, "supported_languages": null}, "macro.dbt_expectations.duckdb__regexp_instr": {"name": "duckdb__regexp_instr", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros\\regex\\regexp_instr.sql", "original_file_path": "macros\\regex\\regexp_instr.sql", "unique_id": "macro.dbt_expectations.duckdb__regexp_instr", "macro_sql": "{% macro duckdb__regexp_instr(source_value, regexp, position, occurrence, is_raw, flags) %}\n{% if flags %}{{ dbt_expectations._validate_flags(flags, 'ciep') }}{% endif %}\nregexp_matches({{ source_value }}, '{{ regexp }}', '{{ flags }}')\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_expectations._validate_flags"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720537836.7387974, "supported_languages": null}, "macro.dbt_expectations.spark__regexp_instr": {"name": "spark__regexp_instr", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros\\regex\\regexp_instr.sql", "original_file_path": "macros\\regex\\regexp_instr.sql", "unique_id": "macro.dbt_expectations.spark__regexp_instr", "macro_sql": "{% macro spark__regexp_instr(source_value, regexp, position, occurrence, is_raw, flags) %}\n{% if is_raw or flags %}\n    {{ exceptions.warn(\n            \"is_raw and flags options are not supported for this adapter \"\n            ~ \"and are being ignored.\"\n    ) }}\n{% endif %}\nlength(regexp_extract({{ source_value }}, '{{ regexp }}', 0))\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720537836.7404416, "supported_languages": null}, "macro.dbt_expectations.trino__regexp_instr": {"name": "trino__regexp_instr", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros\\regex\\regexp_instr.sql", "original_file_path": "macros\\regex\\regexp_instr.sql", "unique_id": "macro.dbt_expectations.trino__regexp_instr", "macro_sql": "{% macro trino__regexp_instr(source_value, regexp, position, occurrence, is_raw, flags) %}\n    {% if flags %}\n        {{ dbt_expectations._validate_re2_flags(flags) }}\n        {# Trino prepends \"(?flags)\" to set flags for current group #}\n        {%- set regexp = \"(?\" ~ flags ~ \")\" ~ regexp -%}\n    {% endif %}\n    {% if is_raw %}\n        {{ exceptions.warn(\n                \"is_raw option is not supported for this adapter \"\n                ~ \"and is being ignored.\"\n        ) }}\n    {% endif %}\n    {%- set regexp_query = \"regexp_position(\" ~ source_value ~ \", '\" ~ regexp ~ \"', \" ~ position ~ \", \" ~ occurrence ~ \")\" -%}\n    {# Trino regexp_position returns -1 if not found. Change it to 0, to be consistent with other adapters #}\n    if({{ regexp_query}} = -1, 0, {{ regexp_query}})\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_expectations._validate_re2_flags"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720537836.7406588, "supported_languages": null}, "macro.dbt_expectations._validate_flags": {"name": "_validate_flags", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros\\regex\\regexp_instr.sql", "original_file_path": "macros\\regex\\regexp_instr.sql", "unique_id": "macro.dbt_expectations._validate_flags", "macro_sql": "{% macro _validate_flags(flags, alphabet) %}\n{% for flag in flags %}\n    {% if flag not in alphabet %}\n    {# Using raise_compiler_error causes disabled tests with invalid flags to fail compilation #}\n    {{ exceptions.warn(\n        \"flag \" ~ flag ~ \" not in list of allowed flags for this adapter: \" ~ alphabet | join(\", \")\n    ) }}\n    {% endif %}\n{% endfor %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720537836.7406588, "supported_languages": null}, "macro.dbt_expectations._validate_re2_flags": {"name": "_validate_re2_flags", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros\\regex\\regexp_instr.sql", "original_file_path": "macros\\regex\\regexp_instr.sql", "unique_id": "macro.dbt_expectations._validate_re2_flags", "macro_sql": "{% macro _validate_re2_flags(flags) %}\n{# Re2 supports following flags: #}\n{# i  :  case-insensitive (default fault) #}\n{# m  :  multi-line mode: ^ and $ match begin/end line in addition to begin/end text (default false) #}\n{# s  :  let . match \\n (default false) #}\n{# U  :  ungreedy: swap meaning of x* and x*?, x+ and x+?, etc (default false) #}\n{# Flag syntax is xyz (set) or -xyz (clear) or xy-z (set xy, clear z).  #}\n\n{# Regex explanation: do not allow consecutive dashes, accept all re2 flags and clear operator, do not end with a dash  #}\n{% set re2_flags_pattern = '^(?!.*--)[-imsU]*(?<!-)$' %}\n{% set re = modules.re %}\n{% set is_match = re.match(re2_flags_pattern, flags) %}\n{% if not is_match %}\n    {# Using raise_compiler_error causes disabled tests with invalid flags to fail compilation #}\n    {{ exceptions.warn(\n        \"flags \" ~ flags ~ \" isn't a valid re2 flag pattern\"\n    ) }}\n{% endif %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720537836.7406588, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_distinct_count_to_be_greater_than": {"name": "test_expect_column_distinct_count_to_be_greater_than", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros\\schema_tests\\aggregate_functions\\expect_column_distinct_count_to_be_greater_than.sql", "original_file_path": "macros\\schema_tests\\aggregate_functions\\expect_column_distinct_count_to_be_greater_than.sql", "unique_id": "macro.dbt_expectations.test_expect_column_distinct_count_to_be_greater_than", "macro_sql": "{% test expect_column_distinct_count_to_be_greater_than(model,\n                                                          column_name,\n                                                          value,\n                                                          group_by=None,\n                                                          row_condition=None\n                                                          ) %}\n{% set expression %}\ncount(distinct {{ column_name }}) > {{ value }}\n{% endset %}\n{{ dbt_expectations.expression_is_true(model,\n                                        expression=expression,\n                                        group_by_columns=group_by,\n                                        row_condition=row_condition)\n                                        }}\n{%- endtest -%}", "depends_on": {"macros": ["macro.dbt_expectations.expression_is_true"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720537836.7406588, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_distinct_count_to_be_less_than": {"name": "test_expect_column_distinct_count_to_be_less_than", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros\\schema_tests\\aggregate_functions\\expect_column_distinct_count_to_be_less_than.sql", "original_file_path": "macros\\schema_tests\\aggregate_functions\\expect_column_distinct_count_to_be_less_than.sql", "unique_id": "macro.dbt_expectations.test_expect_column_distinct_count_to_be_less_than", "macro_sql": "{% test expect_column_distinct_count_to_be_less_than(model,\n                                                       column_name,\n                                                       value,\n                                                       group_by=None,\n                                                       row_condition=None\n                                                       ) %}\n{% set expression %}\ncount(distinct {{ column_name }}) < {{ value }}\n{% endset %}\n{{ dbt_expectations.expression_is_true(model,\n                                        expression=expression,\n                                        group_by_columns=group_by,\n                                        row_condition=row_condition)\n                                        }}\n{%- endtest -%}", "depends_on": {"macros": ["macro.dbt_expectations.expression_is_true"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720537836.7406588, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_distinct_count_to_equal": {"name": "test_expect_column_distinct_count_to_equal", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros\\schema_tests\\aggregate_functions\\expect_column_distinct_count_to_equal.sql", "original_file_path": "macros\\schema_tests\\aggregate_functions\\expect_column_distinct_count_to_equal.sql", "unique_id": "macro.dbt_expectations.test_expect_column_distinct_count_to_equal", "macro_sql": "{% test expect_column_distinct_count_to_equal(model,\n                                                column_name,\n                                                value,\n                                                group_by=None,\n                                                row_condition=None\n                                                ) %}\n{% set expression %}\ncount(distinct {{ column_name }}) = {{ value }}\n{% endset %}\n{{ dbt_expectations.expression_is_true(model,\n                                        expression=expression,\n                                        group_by_columns=group_by,\n                                        row_condition=row_condition)\n                                        }}\n{%- endtest -%}", "depends_on": {"macros": ["macro.dbt_expectations.expression_is_true"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720537836.7406588, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_distinct_count_to_equal_other_table": {"name": "test_expect_column_distinct_count_to_equal_other_table", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros\\schema_tests\\aggregate_functions\\expect_column_distinct_count_to_equal_other_table.sql", "original_file_path": "macros\\schema_tests\\aggregate_functions\\expect_column_distinct_count_to_equal_other_table.sql", "unique_id": "macro.dbt_expectations.test_expect_column_distinct_count_to_equal_other_table", "macro_sql": "{% test expect_column_distinct_count_to_equal_other_table(model,\n                                                                compare_model,\n                                                                column_name,\n                                                                compare_column_name,\n                                                                row_condition=None,\n                                                                compare_row_condition=None\n                                                                ) %}\n{%- set expression -%}\ncount(distinct {{ column_name }})\n{%- endset -%}\n{%- set compare_expression -%}\n{%- if compare_column_name -%}\ncount(distinct {{ compare_column_name }})\n{%- else -%}\n{{ expression }}\n{%- endif -%}\n{%- endset -%}\n{{ dbt_expectations.test_equal_expression(\n    model,\n    expression=expression,\n    compare_model=compare_model,\n    compare_expression=compare_expression,\n    row_condition=row_condition,\n    compare_row_condition=compare_row_condition\n) }}\n{%- endtest -%}", "depends_on": {"macros": ["macro.dbt_expectations.test_equal_expression"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720537836.7566125, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_distinct_values_to_be_in_set": {"name": "test_expect_column_distinct_values_to_be_in_set", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros\\schema_tests\\aggregate_functions\\expect_column_distinct_values_to_be_in_set.sql", "original_file_path": "macros\\schema_tests\\aggregate_functions\\expect_column_distinct_values_to_be_in_set.sql", "unique_id": "macro.dbt_expectations.test_expect_column_distinct_values_to_be_in_set", "macro_sql": "{% test expect_column_distinct_values_to_be_in_set(model,\n                                                     column_name,\n                                                     value_set,\n                                                     quote_values=True,\n                                                     row_condition=None\n                                                     ) %}\n\nwith all_values as (\n\n    select distinct\n        {{ column_name }} as value_field\n\n    from {{ model }}\n    {% if row_condition %}\n    where {{ row_condition }}\n    {% endif %}\n\n),\nset_values as (\n\n    {% for value in value_set -%}\n    select\n        {% if quote_values -%}\n        '{{ value }}'\n        {%- else -%}\n        {{ value }}\n        {%- endif %} as value_field\n    {% if not loop.last %}union all{% endif %}\n    {% endfor %}\n\n),\nunique_set_values as (\n\n    select distinct value_field\n    from\n        set_values\n\n),\nvalidation_errors as (\n    -- values from the model that are not in the set\n    select\n        v.value_field\n    from\n        all_values v\n        left join\n        unique_set_values s on v.value_field = s.value_field\n    where\n        s.value_field is null\n\n)\n\nselect *\nfrom validation_errors\n\n{% endtest %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720537836.7566125, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_distinct_values_to_contain_set": {"name": "test_expect_column_distinct_values_to_contain_set", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros\\schema_tests\\aggregate_functions\\expect_column_distinct_values_to_contain_set.sql", "original_file_path": "macros\\schema_tests\\aggregate_functions\\expect_column_distinct_values_to_contain_set.sql", "unique_id": "macro.dbt_expectations.test_expect_column_distinct_values_to_contain_set", "macro_sql": "{% test expect_column_distinct_values_to_contain_set(model, column_name,\n                                                            value_set,\n                                                            quote_values=True,\n                                                            row_condition=None\n                                                            ) %}\n\nwith all_values as (\n\n    select distinct\n        {{ column_name }} as value_field\n\n    from {{ model }}\n    {% if row_condition %}\n    where {{ row_condition }}\n    {% endif %}\n\n),\nset_values as (\n\n    {% for value in value_set -%}\n    select\n        {% if quote_values -%}\n        '{{ value }}'\n        {%- else -%}\n        {{ value }}\n        {%- endif %} as value_field\n    {% if not loop.last %}union all{% endif %}\n    {% endfor %}\n\n),\nunique_set_values as (\n\n    select distinct value_field\n    from\n        set_values\n\n),\nvalidation_errors as (\n    -- values in set that are not in the list of values from the model\n    select\n        s.value_field\n    from\n        unique_set_values s\n        left join\n        all_values v on s.value_field = v.value_field\n    where\n        v.value_field is null\n\n)\n\nselect *\nfrom validation_errors\n\n{% endtest %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720537836.7666295, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_distinct_values_to_equal_set": {"name": "test_expect_column_distinct_values_to_equal_set", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros\\schema_tests\\aggregate_functions\\expect_column_distinct_values_to_equal_set.sql", "original_file_path": "macros\\schema_tests\\aggregate_functions\\expect_column_distinct_values_to_equal_set.sql", "unique_id": "macro.dbt_expectations.test_expect_column_distinct_values_to_equal_set", "macro_sql": "{% test expect_column_distinct_values_to_equal_set(model, column_name,\n                                                            value_set,\n                                                            quote_values=True,\n                                                            row_condition=None\n                                                            ) %}\n\nwith all_values as (\n\n    select distinct\n        {{ column_name }} as column_value\n\n    from {{ model }}\n    {% if row_condition %}\n    where {{ row_condition }}\n    {% endif %}\n\n),\nset_values as (\n\n    {% for value in value_set -%}\n    select\n        {% if quote_values -%}\n        '{{ value }}'\n        {%- else -%}\n        {{ value }}\n        {%- endif %} as value_field\n    {% if not loop.last %}union all{% endif %}\n    {% endfor %}\n\n),\nunique_set_values as (\n\n    select distinct value_field\n    from\n        set_values\n\n),\nvalidation_errors as (\n\n    select\n        *\n    from\n        all_values v\n        full outer join\n        unique_set_values s on v.column_value = s.value_field\n    where\n        v.column_value is null or\n        s.value_field is null\n\n)\n\nselect *\nfrom validation_errors\n\n{% endtest %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720537836.772177, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_max_to_be_between": {"name": "test_expect_column_max_to_be_between", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros\\schema_tests\\aggregate_functions\\expect_column_max_to_be_between.sql", "original_file_path": "macros\\schema_tests\\aggregate_functions\\expect_column_max_to_be_between.sql", "unique_id": "macro.dbt_expectations.test_expect_column_max_to_be_between", "macro_sql": "{% test expect_column_max_to_be_between(model, column_name,\n                                                min_value=None,\n                                                max_value=None,\n                                                group_by=None,\n                                                row_condition=None,\n                                                strictly=False\n                                                ) %}\n{% set expression %}\nmax({{ column_name }})\n{% endset %}\n{{ dbt_expectations.expression_between(model,\n                                        expression=expression,\n                                        min_value=min_value,\n                                        max_value=max_value,\n                                        group_by_columns=group_by,\n                                        row_condition=row_condition,\n                                        strictly=strictly\n                                        ) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_expectations.expression_between"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720537836.772177, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_mean_to_be_between": {"name": "test_expect_column_mean_to_be_between", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros\\schema_tests\\aggregate_functions\\expect_column_mean_to_be_between.sql", "original_file_path": "macros\\schema_tests\\aggregate_functions\\expect_column_mean_to_be_between.sql", "unique_id": "macro.dbt_expectations.test_expect_column_mean_to_be_between", "macro_sql": "{% test expect_column_mean_to_be_between(model, column_name,\n                                                    min_value=None,\n                                                    max_value=None,\n                                                    group_by=None,\n                                                    row_condition=None,\n                                                    strictly=False\n                                                    ) %}\n{% set expression %}\navg({{ column_name }})\n{% endset %}\n{{ dbt_expectations.expression_between(model,\n                                        expression=expression,\n                                        min_value=min_value,\n                                        max_value=max_value,\n                                        group_by_columns=group_by,\n                                        row_condition=row_condition,\n                                        strictly=strictly\n                                        ) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_expectations.expression_between"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720537836.772177, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_median_to_be_between": {"name": "test_expect_column_median_to_be_between", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros\\schema_tests\\aggregate_functions\\expect_column_median_to_be_between.sql", "original_file_path": "macros\\schema_tests\\aggregate_functions\\expect_column_median_to_be_between.sql", "unique_id": "macro.dbt_expectations.test_expect_column_median_to_be_between", "macro_sql": "{% test expect_column_median_to_be_between(model, column_name,\n                                                    min_value=None,\n                                                    max_value=None,\n                                                    group_by=None,\n                                                    row_condition=None,\n                                                    strictly=False\n                                                    ) %}\n\n{% set expression %}\n{{ dbt_expectations.median(column_name) }}\n{% endset %}\n{{ dbt_expectations.expression_between(model,\n                                        expression=expression,\n                                        min_value=min_value,\n                                        max_value=max_value,\n                                        group_by_columns=group_by,\n                                        row_condition=row_condition,\n                                        strictly=strictly\n                                        ) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_expectations.median", "macro.dbt_expectations.expression_between"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720537836.7782087, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_min_to_be_between": {"name": "test_expect_column_min_to_be_between", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros\\schema_tests\\aggregate_functions\\expect_column_min_to_be_between.sql", "original_file_path": "macros\\schema_tests\\aggregate_functions\\expect_column_min_to_be_between.sql", "unique_id": "macro.dbt_expectations.test_expect_column_min_to_be_between", "macro_sql": "{% test expect_column_min_to_be_between(model, column_name,\n                                                    min_value=None,\n                                                    max_value=None,\n                                                    group_by=None,\n                                                    row_condition=None,\n                                                    strictly=False\n                                                    ) %}\n{% set expression %}\nmin({{ column_name }})\n{% endset %}\n{{ dbt_expectations.expression_between(model,\n                                        expression=expression,\n                                        min_value=min_value,\n                                        max_value=max_value,\n                                        group_by_columns=group_by,\n                                        row_condition=row_condition,\n                                        strictly=strictly\n                                        ) }}\n\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_expectations.expression_between"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720537836.7782087, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_most_common_value_to_be_in_set": {"name": "test_expect_column_most_common_value_to_be_in_set", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros\\schema_tests\\aggregate_functions\\expect_column_most_common_value_to_be_in_set.sql", "original_file_path": "macros\\schema_tests\\aggregate_functions\\expect_column_most_common_value_to_be_in_set.sql", "unique_id": "macro.dbt_expectations.test_expect_column_most_common_value_to_be_in_set", "macro_sql": "{% test expect_column_most_common_value_to_be_in_set(model,\n                                                       column_name,\n                                                       value_set,\n                                                       top_n,\n                                                       quote_values=True,\n                                                       data_type=\"decimal\",\n                                                       row_condition=None\n                                                       ) -%}\n\n    {{ adapter.dispatch('test_expect_column_most_common_value_to_be_in_set', 'dbt_expectations') (\n            model, column_name, value_set, top_n, quote_values, data_type, row_condition\n        ) }}\n\n{%- endtest %}", "depends_on": {"macros": ["macro.tsql_utils.sqlserver__test_expect_column_most_common_value_to_be_in_set"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720537836.7782087, "supported_languages": null}, "macro.dbt_expectations.default__test_expect_column_most_common_value_to_be_in_set": {"name": "default__test_expect_column_most_common_value_to_be_in_set", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros\\schema_tests\\aggregate_functions\\expect_column_most_common_value_to_be_in_set.sql", "original_file_path": "macros\\schema_tests\\aggregate_functions\\expect_column_most_common_value_to_be_in_set.sql", "unique_id": "macro.dbt_expectations.default__test_expect_column_most_common_value_to_be_in_set", "macro_sql": "{% macro default__test_expect_column_most_common_value_to_be_in_set(model,\n                                                                      column_name,\n                                                                      value_set,\n                                                                      top_n,\n                                                                      quote_values,\n                                                                      data_type,\n                                                                      row_condition\n                                                                      ) %}\n\nwith value_counts as (\n\n    select\n        {% if quote_values -%}\n        {{ column_name }}\n        {%- else -%}\n        cast({{ column_name }} as {{ data_type }})\n        {%- endif %} as value_field,\n        count(*) as value_count\n\n    from {{ model }}\n    {% if row_condition %}\n    where {{ row_condition }}\n    {% endif %}\n\n    group by {% if quote_values -%}\n                {{ column_name }}\n            {%- else -%}\n                cast({{ column_name }} as {{ data_type }})\n            {%- endif %}\n\n),\nvalue_counts_ranked as (\n\n    select\n        *,\n        row_number() over(order by value_count desc) as value_count_rank\n    from\n        value_counts\n\n),\nvalue_count_top_n as (\n\n    select\n        value_field\n    from\n        value_counts_ranked\n    where\n        value_count_rank = {{ top_n }}\n\n),\nset_values as (\n\n    {% for value in value_set -%}\n    select\n        {% if quote_values -%}\n        '{{ value }}'\n        {%- else -%}\n        cast({{ value }} as {{ data_type }})\n        {%- endif %} as value_field\n    {% if not loop.last %}union all{% endif %}\n    {% endfor %}\n\n),\nunique_set_values as (\n\n    select distinct value_field\n    from\n        set_values\n\n),\nvalidation_errors as (\n    -- values from the model that are not in the set\n    select\n        value_field\n    from\n        value_count_top_n\n    where\n        value_field not in (select value_field from unique_set_values)\n\n)\n\nselect *\nfrom validation_errors\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720537836.7862184, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_proportion_of_unique_values_to_be_between": {"name": "test_expect_column_proportion_of_unique_values_to_be_between", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros\\schema_tests\\aggregate_functions\\expect_column_proportion_of_unique_values_to_be_between.sql", "original_file_path": "macros\\schema_tests\\aggregate_functions\\expect_column_proportion_of_unique_values_to_be_between.sql", "unique_id": "macro.dbt_expectations.test_expect_column_proportion_of_unique_values_to_be_between", "macro_sql": "{% test expect_column_proportion_of_unique_values_to_be_between(model, column_name,\n                                                            min_value=None,\n                                                            max_value=None,\n                                                            group_by=None,\n                                                            row_condition=None,\n                                                            strictly=False\n                                                            ) %}\n{% set expression %}\ncast(count(distinct {{ column_name }}) as {{ dbt.type_float() }})/count({{ column_name }})\n{% endset %}\n{{ dbt_expectations.expression_between(model,\n                                        expression=expression,\n                                        min_value=min_value,\n                                        max_value=max_value,\n                                        group_by_columns=group_by,\n                                        row_condition=row_condition,\n                                        strictly=strictly\n                                        ) }}\n\n{% endtest %}", "depends_on": {"macros": ["macro.dbt.type_float", "macro.dbt_expectations.expression_between"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720537836.7862184, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_quantile_values_to_be_between": {"name": "test_expect_column_quantile_values_to_be_between", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros\\schema_tests\\aggregate_functions\\expect_column_quantile_values_to_be_between.sql", "original_file_path": "macros\\schema_tests\\aggregate_functions\\expect_column_quantile_values_to_be_between.sql", "unique_id": "macro.dbt_expectations.test_expect_column_quantile_values_to_be_between", "macro_sql": "{% test expect_column_quantile_values_to_be_between(model, column_name,\n                                                            quantile,\n                                                            min_value=None,\n                                                            max_value=None,\n                                                            group_by=None,\n                                                            row_condition=None,\n                                                            strictly=False\n                                                            ) %}\n\n{% set expression %}\n{{ dbt_expectations.percentile_cont(column_name, quantile) }}\n{% endset %}\n{{ dbt_expectations.expression_between(model,\n                                        expression=expression,\n                                        min_value=min_value,\n                                        max_value=max_value,\n                                        group_by_columns=group_by,\n                                        row_condition=row_condition,\n                                        strictly=strictly\n                                        ) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_expectations.percentile_cont", "macro.dbt_expectations.expression_between"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720537836.7862184, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_stdev_to_be_between": {"name": "test_expect_column_stdev_to_be_between", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros\\schema_tests\\aggregate_functions\\expect_column_stdev_to_be_between.sql", "original_file_path": "macros\\schema_tests\\aggregate_functions\\expect_column_stdev_to_be_between.sql", "unique_id": "macro.dbt_expectations.test_expect_column_stdev_to_be_between", "macro_sql": "{% test expect_column_stdev_to_be_between(model, column_name,\n                                                    min_value=None,\n                                                    max_value=None,\n                                                    group_by=None,\n                                                    row_condition=None,\n                                                    strictly=False\n                                                    ) -%}\n    {{ adapter.dispatch('test_expect_column_stdev_to_be_between', 'dbt_expectations') (\n                                                    model, column_name,\n                                                    min_value,\n                                                    max_value,\n                                                    group_by,\n                                                    row_condition,\n                                                    strictly\n                                                    ) }}\n{%- endtest %}", "depends_on": {"macros": ["macro.tsql_utils.sqlserver__test_expect_column_stdev_to_be_between"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720537836.8012347, "supported_languages": null}, "macro.dbt_expectations.default__test_expect_column_stdev_to_be_between": {"name": "default__test_expect_column_stdev_to_be_between", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros\\schema_tests\\aggregate_functions\\expect_column_stdev_to_be_between.sql", "original_file_path": "macros\\schema_tests\\aggregate_functions\\expect_column_stdev_to_be_between.sql", "unique_id": "macro.dbt_expectations.default__test_expect_column_stdev_to_be_between", "macro_sql": "{% macro default__test_expect_column_stdev_to_be_between(\n                                                    model, column_name,\n                                                    min_value,\n                                                    max_value,\n                                                    group_by,\n                                                    row_condition,\n                                                    strictly\n                                                    ) %}\n\n{% set expression %}\nstddev({{ column_name }})\n{% endset %}\n{{ dbt_expectations.expression_between(model,\n                                        expression=expression,\n                                        min_value=min_value,\n                                        max_value=max_value,\n                                        group_by_columns=group_by,\n                                        row_condition=row_condition,\n                                        strictly=strictly\n                                        ) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_expectations.expression_between"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720537836.8012347, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_sum_to_be_between": {"name": "test_expect_column_sum_to_be_between", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros\\schema_tests\\aggregate_functions\\expect_column_sum_to_be_between.sql", "original_file_path": "macros\\schema_tests\\aggregate_functions\\expect_column_sum_to_be_between.sql", "unique_id": "macro.dbt_expectations.test_expect_column_sum_to_be_between", "macro_sql": "{% test expect_column_sum_to_be_between(model, column_name,\n                                                min_value=None,\n                                                max_value=None,\n                                                group_by=None,\n                                                row_condition=None,\n                                                strictly=False\n                                                ) %}\n{% set expression %}\nsum({{ column_name }})\n{% endset %}\n{{ dbt_expectations.expression_between(model,\n                                        expression=expression,\n                                        min_value=min_value,\n                                        max_value=max_value,\n                                        group_by_columns=group_by,\n                                        row_condition=row_condition,\n                                        strictly=strictly\n                                        ) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_expectations.expression_between"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720537836.8012347, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_unique_value_count_to_be_between": {"name": "test_expect_column_unique_value_count_to_be_between", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros\\schema_tests\\aggregate_functions\\expect_column_unique_value_count_to_be_between.sql", "original_file_path": "macros\\schema_tests\\aggregate_functions\\expect_column_unique_value_count_to_be_between.sql", "unique_id": "macro.dbt_expectations.test_expect_column_unique_value_count_to_be_between", "macro_sql": "{% test expect_column_unique_value_count_to_be_between(model, column_name,\n                                                            min_value=None,\n                                                            max_value=None,\n                                                            group_by=None,\n                                                            row_condition=None,\n                                                            strictly=False\n                                                            ) %}\n{% set expression %}\ncount(distinct {{ column_name }})\n{% endset %}\n{{ dbt_expectations.expression_between(model,\n                                        expression=expression,\n                                        min_value=min_value,\n                                        max_value=max_value,\n                                        group_by_columns=group_by,\n                                        row_condition=row_condition,\n                                        strictly=strictly\n                                        ) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_expectations.expression_between"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720537836.8057597, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_values_to_be_between": {"name": "test_expect_column_values_to_be_between", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros\\schema_tests\\column_values_basic\\expect_column_values_to_be_between.sql", "original_file_path": "macros\\schema_tests\\column_values_basic\\expect_column_values_to_be_between.sql", "unique_id": "macro.dbt_expectations.test_expect_column_values_to_be_between", "macro_sql": "{% test expect_column_values_to_be_between(model, column_name,\n                                                   min_value=None,\n                                                   max_value=None,\n                                                   row_condition=None,\n                                                   strictly=False\n                                                   ) %}\n\n{% set expression %}\n{{ column_name }}\n{% endset %}\n\n{{ dbt_expectations.expression_between(model,\n                                        expression=expression,\n                                        min_value=min_value,\n                                        max_value=max_value,\n                                        group_by_columns=None,\n                                        row_condition=row_condition,\n                                        strictly=strictly\n                                        ) }}\n\n\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_expectations.expression_between"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720537836.8057597, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_values_to_be_decreasing": {"name": "test_expect_column_values_to_be_decreasing", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros\\schema_tests\\column_values_basic\\expect_column_values_to_be_decreasing.sql", "original_file_path": "macros\\schema_tests\\column_values_basic\\expect_column_values_to_be_decreasing.sql", "unique_id": "macro.dbt_expectations.test_expect_column_values_to_be_decreasing", "macro_sql": "{% test expect_column_values_to_be_decreasing(model, column_name,\n                                                   sort_column=None,\n                                                   strictly=True,\n                                                   row_condition=None,\n                                                   group_by=None) %}\n\n{%- set sort_column = column_name if not sort_column else sort_column -%}\n{%- set operator = \"<\" if strictly else \"<=\" %}\nwith all_values as (\n\n    select\n        {{ sort_column }} as sort_column,\n        {%- if group_by -%}\n        {{ group_by | join(\", \") }},\n        {%- endif %}\n        {{ column_name }} as value_field\n    from {{ model }}\n    {% if row_condition %}\n    where {{ row_condition }}\n    {% endif %}\n\n),\nadd_lag_values as (\n\n    select\n        sort_column,\n        value_field,\n        lag(value_field) over\n            {%- if not group_by -%}\n                (order by sort_column)\n            {%- else -%}\n                (partition by {{ group_by | join(\", \") }} order by sort_column)\n            {%- endif  %} as value_field_lag\n    from\n        all_values\n\n),\nvalidation_errors as (\n\n    select\n        *\n    from\n        add_lag_values\n    where\n        value_field_lag is not null\n        and\n        not (value_field {{ operator }} value_field_lag)\n\n)\nselect *\nfrom validation_errors\n{% endtest %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720537836.812294, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_values_to_be_increasing": {"name": "test_expect_column_values_to_be_increasing", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros\\schema_tests\\column_values_basic\\expect_column_values_to_be_increasing.sql", "original_file_path": "macros\\schema_tests\\column_values_basic\\expect_column_values_to_be_increasing.sql", "unique_id": "macro.dbt_expectations.test_expect_column_values_to_be_increasing", "macro_sql": "{% test expect_column_values_to_be_increasing(model, column_name,\n                                                   sort_column=None,\n                                                   strictly=True,\n                                                   row_condition=None,\n                                                   group_by=None) %}\n\n{%- set sort_column = column_name if not sort_column else sort_column -%}\n{%- set operator = \">\" if strictly else \">=\" -%}\nwith all_values as (\n\n    select\n        {{ sort_column }} as sort_column,\n        {%- if group_by -%}\n        {{ group_by | join(\", \") }},\n        {%- endif %}\n        {{ column_name }} as value_field\n    from {{ model }}\n    {% if row_condition %}\n    where {{ row_condition }}\n    {% endif %}\n\n),\nadd_lag_values as (\n\n    select\n        sort_column,\n        {%- if group_by -%}\n        {{ group_by | join(\", \") }},\n        {%- endif %}\n        value_field,\n        lag(value_field) over\n            {%- if not group_by -%}\n                (order by sort_column)\n            {%- else -%}\n                (partition by {{ group_by | join(\", \") }} order by sort_column)\n            {%- endif  %} as value_field_lag\n    from\n        all_values\n\n),\nvalidation_errors as (\n    select\n        *\n    from\n        add_lag_values\n    where\n        value_field_lag is not null\n        and\n        not (value_field {{ operator }} value_field_lag)\n\n)\nselect *\nfrom validation_errors\n{% endtest %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720537836.8163068, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_values_to_be_in_set": {"name": "test_expect_column_values_to_be_in_set", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros\\schema_tests\\column_values_basic\\expect_column_values_to_be_in_set.sql", "original_file_path": "macros\\schema_tests\\column_values_basic\\expect_column_values_to_be_in_set.sql", "unique_id": "macro.dbt_expectations.test_expect_column_values_to_be_in_set", "macro_sql": "{% test expect_column_values_to_be_in_set(model, column_name,\n                                                   value_set,\n                                                   quote_values=True,\n                                                   row_condition=None\n                                                   ) %}\n\nwith all_values as (\n\n    select\n        {{ column_name }} as value_field\n\n    from {{ model }}\n    {% if row_condition %}\n    where {{ row_condition }}\n    {% endif %}\n\n),\nset_values as (\n\n    {% for value in value_set -%}\n    select\n        {% if quote_values -%}\n        cast('{{ value }}' as {{ dbt.type_string() }})\n        {%- else -%}\n        {{ value }}\n        {%- endif %} as value_field\n    {% if not loop.last %}union all{% endif %}\n    {% endfor %}\n),\nvalidation_errors as (\n    -- values from the model that are not in the set\n    select\n        v.value_field\n    from\n        all_values v\n        left join\n        set_values s on v.value_field = s.value_field\n    where\n        s.value_field is null\n\n)\n\nselect *\nfrom validation_errors\n\n{% endtest %}", "depends_on": {"macros": ["macro.dbt.type_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720537836.8163068, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_values_to_be_in_type_list": {"name": "test_expect_column_values_to_be_in_type_list", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros\\schema_tests\\column_values_basic\\expect_column_values_to_be_in_type_list.sql", "original_file_path": "macros\\schema_tests\\column_values_basic\\expect_column_values_to_be_in_type_list.sql", "unique_id": "macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro_sql": "{%- test expect_column_values_to_be_in_type_list(model, column_name, column_type_list) -%}\n{%- if execute -%}\n\n    {%- set column_name = column_name | upper -%}\n    {%- set columns_in_relation = adapter.get_columns_in_relation(model) -%}\n    {%- set column_type_list = column_type_list| map(\"upper\") | list -%}\n    with relation_columns as (\n\n        {% for column in columns_in_relation %}\n        select\n            cast('{{ escape_single_quotes(column.name | upper) }}' as {{ dbt.type_string() }}) as relation_column,\n            cast('{{ column.dtype | upper }}' as {{ dbt.type_string() }}) as relation_column_type\n        {% if not loop.last %}union all{% endif %}\n        {% endfor %}\n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = '{{ column_name }}'\n            and\n            relation_column_type not in ('{{ column_type_list | join(\"', '\") }}')\n\n    )\n    select *\n    from test_data\n\n{%- endif -%}\n{%- endtest -%}", "depends_on": {"macros": ["macro.dbt.escape_single_quotes", "macro.dbt.type_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720537836.8163068, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_values_to_be_null": {"name": "test_expect_column_values_to_be_null", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros\\schema_tests\\column_values_basic\\expect_column_values_to_be_null.sql", "original_file_path": "macros\\schema_tests\\column_values_basic\\expect_column_values_to_be_null.sql", "unique_id": "macro.dbt_expectations.test_expect_column_values_to_be_null", "macro_sql": "{% test expect_column_values_to_be_null(model, column_name, row_condition=None) %}\n\n{% set expression = column_name ~ \" is null\" %}\n\n{{ dbt_expectations.expression_is_true(model,\n                                        expression=expression,\n                                        group_by_columns=None,\n                                        row_condition=row_condition\n                                        )\n                                        }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_expectations.expression_is_true"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720537836.8163068, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_values_to_be_of_type": {"name": "test_expect_column_values_to_be_of_type", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros\\schema_tests\\column_values_basic\\expect_column_values_to_be_of_type.sql", "original_file_path": "macros\\schema_tests\\column_values_basic\\expect_column_values_to_be_of_type.sql", "unique_id": "macro.dbt_expectations.test_expect_column_values_to_be_of_type", "macro_sql": "{%- test expect_column_values_to_be_of_type(model, column_name, column_type) -%}\n{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(model, column_name, [column_type]) }}\n{%- endtest -%}", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720537836.8163068, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_values_to_be_unique": {"name": "test_expect_column_values_to_be_unique", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros\\schema_tests\\column_values_basic\\expect_column_values_to_be_unique.sql", "original_file_path": "macros\\schema_tests\\column_values_basic\\expect_column_values_to_be_unique.sql", "unique_id": "macro.dbt_expectations.test_expect_column_values_to_be_unique", "macro_sql": "{% test expect_column_values_to_be_unique(model, column_name, row_condition=None) %}\n{{ dbt_expectations.test_expect_compound_columns_to_be_unique(model, [column_name], row_condition=row_condition) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_compound_columns_to_be_unique"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720537836.8163068, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_values_to_have_consistent_casing": {"name": "test_expect_column_values_to_have_consistent_casing", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros\\schema_tests\\column_values_basic\\expect_column_values_to_have_consistent_casing.sql", "original_file_path": "macros\\schema_tests\\column_values_basic\\expect_column_values_to_have_consistent_casing.sql", "unique_id": "macro.dbt_expectations.test_expect_column_values_to_have_consistent_casing", "macro_sql": "{% test expect_column_values_to_have_consistent_casing(model, column_name, display_inconsistent_columns=False) %}\n\nwith test_data as (\n\n    select\n        distinct {{ column_name }} as distinct_values\n    from\n        {{ model }}\n\n ),\n {% if display_inconsistent_columns %}\n validation_errors as (\n\n    select\n        lower(distinct_values) as inconsistent_columns,\n        count(distinct_values) as set_count_case_insensitive\n    from\n        test_data\n    group by 1\n    having\n        count(distinct_values) > 1\n\n )\n select * from validation_errors\n {% else %}\n validation_errors as (\n\n    select\n        count(1) as set_count,\n        count(distinct lower(distinct_values)) as set_count_case_insensitive\n    from\n        test_data\n\n )\n select *\n from\n    validation_errors\n where\n    set_count != set_count_case_insensitive\n {% endif %}\n {%- endtest -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720537836.8163068, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_values_to_not_be_in_set": {"name": "test_expect_column_values_to_not_be_in_set", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros\\schema_tests\\column_values_basic\\expect_column_values_to_not_be_in_set.sql", "original_file_path": "macros\\schema_tests\\column_values_basic\\expect_column_values_to_not_be_in_set.sql", "unique_id": "macro.dbt_expectations.test_expect_column_values_to_not_be_in_set", "macro_sql": "{% test expect_column_values_to_not_be_in_set(model, column_name,\n                                                   value_set,\n                                                   quote_values=True,\n                                                   row_condition=None\n                                                   ) %}\n\nwith all_values as (\n\n    select\n        {{ column_name }} as value_field\n\n    from {{ model }}\n    {% if row_condition %}\n    where {{ row_condition }}\n    {% endif %}\n\n),\nset_values as (\n\n    {% for value in value_set -%}\n    select\n        {% if quote_values -%}\n        cast('{{ value }}' as {{ dbt.type_string() }})\n        {%- else -%}\n        {{ value }}\n        {%- endif %} as value_field\n    {% if not loop.last %}union all{% endif %}\n    {% endfor %}\n),\nvalidation_errors as (\n    -- values from the model that match the set\n    select\n        v.value_field\n    from\n        all_values v\n        join\n        set_values s on v.value_field = s.value_field\n\n)\n\nselect *\nfrom validation_errors\n\n{% endtest %}", "depends_on": {"macros": ["macro.dbt.type_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720537836.8313203, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_values_to_not_be_null": {"name": "test_expect_column_values_to_not_be_null", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros\\schema_tests\\column_values_basic\\expect_column_values_to_not_be_null.sql", "original_file_path": "macros\\schema_tests\\column_values_basic\\expect_column_values_to_not_be_null.sql", "unique_id": "macro.dbt_expectations.test_expect_column_values_to_not_be_null", "macro_sql": "{% test expect_column_values_to_not_be_null(model, column_name, row_condition=None) %}\n\n{% set expression = column_name ~ \" is not null\" %}\n\n{{ dbt_expectations.expression_is_true(model,\n                                        expression=expression,\n                                        group_by_columns=None,\n                                        row_condition=row_condition\n                                        )\n                                        }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_expectations.expression_is_true"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720537836.8313203, "supported_languages": null}, "macro.dbt_expectations._get_metric_expression": {"name": "_get_metric_expression", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros\\schema_tests\\distributional\\expect_column_values_to_be_within_n_moving_stdevs.sql", "original_file_path": "macros\\schema_tests\\distributional\\expect_column_values_to_be_within_n_moving_stdevs.sql", "unique_id": "macro.dbt_expectations._get_metric_expression", "macro_sql": "{%- macro _get_metric_expression(metric_column, take_logs) -%}\n\n{%- if take_logs %}\n{%- set expr = \"nullif(\" ~ metric_column ~ \", 0)\" -%}\ncoalesce({{ dbt_expectations.log_natural(expr) }}, 0)\n{%- else -%}\ncoalesce({{ metric_column }}, 0)\n{%- endif %}\n\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt_expectations.log_natural"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720537836.8393357, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_values_to_be_within_n_moving_stdevs": {"name": "test_expect_column_values_to_be_within_n_moving_stdevs", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros\\schema_tests\\distributional\\expect_column_values_to_be_within_n_moving_stdevs.sql", "original_file_path": "macros\\schema_tests\\distributional\\expect_column_values_to_be_within_n_moving_stdevs.sql", "unique_id": "macro.dbt_expectations.test_expect_column_values_to_be_within_n_moving_stdevs", "macro_sql": "{% test expect_column_values_to_be_within_n_moving_stdevs(model,\n                                  column_name,\n                                  date_column_name,\n                                  group_by=None,\n                                  period='day',\n                                  lookback_periods=1,\n                                  trend_periods=7,\n                                  test_periods=14,\n                                  sigma_threshold=3,\n                                  sigma_threshold_upper=None,\n                                  sigma_threshold_lower=None,\n                                  take_diffs=true,\n                                  take_logs=true\n                                ) -%}\n    {{ adapter.dispatch('test_expect_column_values_to_be_within_n_moving_stdevs', 'dbt_expectations') (model,\n                                  column_name,\n                                  date_column_name,\n                                  group_by,\n                                  period,\n                                  lookback_periods,\n                                  trend_periods,\n                                  test_periods,\n                                  sigma_threshold,\n                                  sigma_threshold_upper,\n                                  sigma_threshold_lower,\n                                  take_diffs,\n                                  take_logs\n                                ) }}\n{%- endtest %}", "depends_on": {"macros": ["macro.tsql_utils.sqlserver__test_expect_column_values_to_be_within_n_moving_stdevs"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720537836.8393357, "supported_languages": null}, "macro.dbt_expectations.default__test_expect_column_values_to_be_within_n_moving_stdevs": {"name": "default__test_expect_column_values_to_be_within_n_moving_stdevs", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros\\schema_tests\\distributional\\expect_column_values_to_be_within_n_moving_stdevs.sql", "original_file_path": "macros\\schema_tests\\distributional\\expect_column_values_to_be_within_n_moving_stdevs.sql", "unique_id": "macro.dbt_expectations.default__test_expect_column_values_to_be_within_n_moving_stdevs", "macro_sql": "{% macro default__test_expect_column_values_to_be_within_n_moving_stdevs(model,\n                                  column_name,\n                                  date_column_name,\n                                  group_by,\n                                  period,\n                                  lookback_periods,\n                                  trend_periods,\n                                  test_periods,\n                                  sigma_threshold,\n                                  sigma_threshold_upper,\n                                  sigma_threshold_lower,\n                                  take_diffs,\n                                  take_logs\n                                ) %}\n\n{%- set sigma_threshold_upper = sigma_threshold_upper if sigma_threshold_upper else sigma_threshold -%}\n{%- set sigma_threshold_lower = sigma_threshold_lower if sigma_threshold_lower else -1 * sigma_threshold -%}\n{%- set partition_by = \"partition by \" ~ (group_by | join(\",\")) if group_by -%}\n{%- set group_by_length = (group_by | length ) if group_by else 0 -%}\n\nwith metric_values as (\n\n    with grouped_metric_values as (\n\n        select\n            {{ dbt.date_trunc(period, date_column_name) }} as metric_period,\n            {{ group_by | join(\",\") ~ \",\" if group_by }}\n            sum({{ column_name }}) as agg_metric_value\n        from\n            {{ model }}\n        {{  dbt_expectations.group_by(1 + group_by_length) }}\n\n    )\n    {%- if take_diffs %}\n    , grouped_metric_values_with_priors as (\n\n        select\n            *,\n            lag(agg_metric_value, {{ lookback_periods }}) over(\n                {{ partition_by }}\n                order by metric_period) as prior_agg_metric_value\n    from\n        grouped_metric_values d\n\n    )\n    select\n        *,\n        {{ dbt_expectations._get_metric_expression(\"agg_metric_value\", take_logs) }}\n        -\n        {{ dbt_expectations._get_metric_expression(\"prior_agg_metric_value\", take_logs) }}\n        as metric_test_value\n    from\n        grouped_metric_values_with_priors d\n\n    {%- else %}\n\n    select\n        *,\n        {{ dbt_expectations._get_metric_expression(\"agg_metric_value\", take_logs) }}\n        as metric_test_value\n    from\n        grouped_metric_values\n\n    {%- endif %}\n\n),\nmetric_moving_calcs as (\n\n    select\n        *,\n        avg(metric_test_value)\n            over({{ partition_by }}\n                    order by metric_period rows\n                    between {{ trend_periods }} preceding and 1 preceding) as metric_test_rolling_average,\n        stddev(metric_test_value)\n            over({{ partition_by }}\n                    order by metric_period rows\n                    between {{ trend_periods }} preceding and 1 preceding) as metric_test_rolling_stddev\n    from\n        metric_values\n\n),\nmetric_sigma as (\n\n    select\n        *,\n        (metric_test_value - metric_test_rolling_average) as metric_test_delta,\n        (metric_test_value - metric_test_rolling_average)/\n            nullif(metric_test_rolling_stddev, 0) as metric_test_sigma\n    from\n        metric_moving_calcs\n\n)\nselect\n    *\nfrom\n    metric_sigma\nwhere\n\n    metric_period >= cast(\n            {{ dbt.dateadd(period, -test_periods, dbt.date_trunc(period, dbt_date.now())) }}\n            as {{ dbt_expectations.type_timestamp() }})\n    and\n    metric_period < {{ dbt.date_trunc(period, dbt_date.now()) }}\n    and\n\n    not (\n        metric_test_sigma >= {{ sigma_threshold_lower }} and\n        metric_test_sigma <= {{ sigma_threshold_upper }}\n    )\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt.date_trunc", "macro.dbt_expectations.group_by", "macro.dbt_expectations._get_metric_expression", "macro.dbt.dateadd", "macro.dbt_date.now", "macro.dbt_expectations.type_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720537836.8463435, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_values_to_be_within_n_stdevs": {"name": "test_expect_column_values_to_be_within_n_stdevs", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros\\schema_tests\\distributional\\expect_column_values_to_be_within_n_stdevs.sql", "original_file_path": "macros\\schema_tests\\distributional\\expect_column_values_to_be_within_n_stdevs.sql", "unique_id": "macro.dbt_expectations.test_expect_column_values_to_be_within_n_stdevs", "macro_sql": "{% test expect_column_values_to_be_within_n_stdevs(model,\n                                  column_name,\n                                  group_by=None,\n                                  sigma_threshold=3\n                                ) -%}\n    {{\n        adapter.dispatch('test_expect_column_values_to_be_within_n_stdevs', 'dbt_expectations') (\n            model, column_name, group_by, sigma_threshold\n        )\n    }}\n{%- endtest %}", "depends_on": {"macros": ["macro.tsql_utils.sqlserver__test_expect_column_values_to_be_within_n_stdevs"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720537836.8463435, "supported_languages": null}, "macro.dbt_expectations.default__test_expect_column_values_to_be_within_n_stdevs": {"name": "default__test_expect_column_values_to_be_within_n_stdevs", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros\\schema_tests\\distributional\\expect_column_values_to_be_within_n_stdevs.sql", "original_file_path": "macros\\schema_tests\\distributional\\expect_column_values_to_be_within_n_stdevs.sql", "unique_id": "macro.dbt_expectations.default__test_expect_column_values_to_be_within_n_stdevs", "macro_sql": "{% macro default__test_expect_column_values_to_be_within_n_stdevs(model,\n                                  column_name,\n                                  group_by,\n                                  sigma_threshold\n                                ) %}\n\nwith metric_values as (\n\n    select\n        {{ group_by | join(\",\") ~ \",\" if group_by }}\n        sum({{ column_name }}) as {{ column_name }}\n    from\n        {{ model }}\n    {% if group_by -%}\n    {{  dbt_expectations.group_by(group_by | length) }}\n    {%- endif %}\n\n),\nmetric_values_with_statistics as (\n\n    select\n        *,\n        avg({{ column_name }}) over() as {{ column_name }}_average,\n        stddev({{ column_name }}) over() as {{ column_name }}_stddev\n    from\n        metric_values\n\n),\nmetric_values_z_scores as (\n\n    select\n        *,\n        ({{ column_name }} - {{ column_name }}_average)/\n            nullif({{ column_name }}_stddev, 0) as {{ column_name }}_sigma\n    from\n        metric_values_with_statistics\n\n)\nselect\n    *\nfrom\n    metric_values_z_scores\nwhere\n    abs({{ column_name }}_sigma) > {{ sigma_threshold }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_expectations.group_by"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720537836.8463435, "supported_languages": null}, "macro.dbt_expectations.test_expect_row_values_to_have_data_for_every_n_datepart": {"name": "test_expect_row_values_to_have_data_for_every_n_datepart", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros\\schema_tests\\distributional\\expect_row_values_to_have_data_for_every_n_datepart.sql", "original_file_path": "macros\\schema_tests\\distributional\\expect_row_values_to_have_data_for_every_n_datepart.sql", "unique_id": "macro.dbt_expectations.test_expect_row_values_to_have_data_for_every_n_datepart", "macro_sql": "{%- test expect_row_values_to_have_data_for_every_n_datepart(model,\n                                                            date_col,\n                                                            date_part=\"day\",\n                                                            interval=None,\n                                                            row_condition=None,\n                                                            exclusion_condition=None,\n                                                            test_start_date=None,\n                                                            test_end_date=None) -%}\n{% if not execute %}\n    {{ return('') }}\n{% endif %}\n\n{% if not test_start_date or not test_end_date %}\n    {% set sql %}\n\n        select\n            min(cast({{ date_col }} as date)) as start_{{ date_part }},\n            max(cast({{ date_col }} as date)) as end_{{ date_part }}\n        from {{ model }}\n        {% if row_condition %}\n        where {{ row_condition }}\n        {% endif %}\n\n    {% endset %}\n\n    {%- set dr = run_query(sql) -%}\n\n    {%- set db_start_date = dr.columns[0].values()[0] -%}\n    {%- set db_end_date = dr.columns[1].values()[0] -%}\n\n    {% if db_start_date is not string %}\n        {%- set db_start_date = db_start_date.strftime('%Y-%m-%d') -%}\n        {%- set db_end_date = db_end_date.strftime('%Y-%m-%d') -%}\n    {% endif %}\n\n{% endif %}\n\n{% if not test_start_date %}\n{% set start_date = db_start_date %}\n{% else %}\n{% set start_date = test_start_date %}\n{% endif %}\n\n\n{% if not test_end_date %}\n{% set end_date = db_end_date %}\n{% else %}\n{% set end_date = test_end_date %}\n{% endif %}\n\nwith base_dates as (\n\n    {{ dbt_date.get_base_dates(start_date=start_date, end_date=end_date, datepart=date_part) }}\n    {% if interval %}\n    {#\n        Filter the date spine created above down to the interval granularity using a modulo operation.\n        The number of date_parts after the start_date divided by the integer interval will produce no remainder for the desired intervals,\n        e.g. for 2-day interval from a starting Jan 1, 2020:\n            params: start_date = '2020-01-01', date_part = 'day', interval = 2\n            date spine created above: [2020-01-01, 2020-01-02, 2020-01-03, 2020-01-04, 2020-01-05, ...]\n            The first parameter to the `mod` function would be the number of days between the start_date and the spine date, i.e. [0, 1, 2, 3, 4 ...]\n            The second parameter to the `mod` function would be the integer interval, i.e. 2\n            This modulo operation produces the following remainders: [0, 1, 0, 1, 0, ...]\n            Filtering the spine only where this remainder == 0 will return a spine with every other day as desired, i.e. [2020-01-01, 2020-01-03, 2020-01-05, ...]\n    #}\n    where mod(\n            cast({{ dbt.datediff(\"'\" ~ start_date ~ \"'\", 'date_' ~ date_part, date_part) }} as {{ dbt.type_int() }}),\n            cast({{interval}} as {{ dbt.type_int() }})\n        ) = 0\n    {% endif %}\n\n),\nmodel_data as (\n\n    select\n    {% if not interval %}\n\n        cast({{ dbt.date_trunc(date_part, date_col) }} as {{ dbt_expectations.type_datetime() }}) as date_{{ date_part }},\n\n    {% else %}\n        {#\n            Use a modulo operator to determine the number of intervals that a date_col is away from the interval-date spine\n            and subtracts that amount to effectively slice each date_col record into its corresponding spine bucket,\n            e.g. given a date_col of with records [2020-01-01, 2020-01-02, 2020-01-03, 2020-01-11, 2020-01-12]\n                if we want to slice these dates into their 2-day buckets starting Jan 1, 2020 (start_date = '2020-01-01', date_part='day', interval=2),\n                the modulo operation described above will produce these remainders: [0, 1, 0, 0, 1]\n                subtracting that number of days from the observations will produce records [2020-01-01, 2020-01-01, 2020-01-03, 2020-01-11, 2020-01-11],\n                all of which align with records from the interval-date spine\n        #}\n        {{ dbt.dateadd(\n            date_part,\n            \"mod(\n                cast(\" ~ dbt.datediff(\"'\" ~ start_date ~ \"'\", date_col, date_part) ~ \" as \" ~ dbt.type_int() ~ \" ),\n                cast(\" ~ interval ~ \" as  \" ~ dbt.type_int() ~ \" )\n            ) * (-1)\",\n            \"cast( \" ~ dbt.date_trunc(date_part, date_col) ~ \" as  \" ~ dbt_expectations.type_datetime() ~ \")\"\n        )}} as date_{{ date_part }},\n\n    {% endif %}\n\n        count(*) as row_cnt\n    from\n        {{ model }} f\n    {% if row_condition %}\n    where {{ row_condition }}\n    {% endif %}\n    group by\n        date_{{date_part}}\n\n),\n\nfinal as (\n\n    select\n        cast(d.date_{{ date_part }} as {{ dbt_expectations.type_datetime() }}) as date_{{ date_part }},\n        case when f.date_{{ date_part }} is null then true else false end as is_missing,\n        coalesce(f.row_cnt, 0) as row_cnt\n    from\n        base_dates d\n        left join\n        model_data f on cast(d.date_{{ date_part }} as {{ dbt_expectations.type_datetime() }}) = f.date_{{ date_part }}\n)\nselect\n    *\nfrom final\nwhere row_cnt = 0\n{% if exclusion_condition %}\n  and {{ exclusion_condition }}\n{% endif %}\n{%- endtest -%}", "depends_on": {"macros": ["macro.dbt.run_query", "macro.dbt_date.get_base_dates", "macro.dbt.datediff", "macro.dbt.type_int", "macro.dbt.date_trunc", "macro.dbt_expectations.type_datetime", "macro.dbt.dateadd"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720537836.8614345, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_pair_values_A_to_be_greater_than_B": {"name": "test_expect_column_pair_values_A_to_be_greater_than_B", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros\\schema_tests\\multi-column\\expect_column_pair_values_A_to_be_greater_than_B.sql", "original_file_path": "macros\\schema_tests\\multi-column\\expect_column_pair_values_A_to_be_greater_than_B.sql", "unique_id": "macro.dbt_expectations.test_expect_column_pair_values_A_to_be_greater_than_B", "macro_sql": "{% test expect_column_pair_values_A_to_be_greater_than_B(model,\n                                                                column_A,\n                                                                column_B,\n                                                                or_equal=False,\n                                                                row_condition=None\n                                                                ) %}\n\n{% set operator = \">=\" if or_equal else \">\" %}\n{% set expression = column_A ~ \" \" ~ operator ~ \" \" ~ column_B %}\n\n{{ dbt_expectations.expression_is_true(model,\n                                        expression=expression,\n                                        group_by_columns=None,\n                                        row_condition=row_condition\n                                        )\n                                        }}\n\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_expectations.expression_is_true"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720537836.8614345, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_pair_values_to_be_equal": {"name": "test_expect_column_pair_values_to_be_equal", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros\\schema_tests\\multi-column\\expect_column_pair_values_to_be_equal.sql", "original_file_path": "macros\\schema_tests\\multi-column\\expect_column_pair_values_to_be_equal.sql", "unique_id": "macro.dbt_expectations.test_expect_column_pair_values_to_be_equal", "macro_sql": "{% test expect_column_pair_values_to_be_equal(model,\n                                                        column_A,\n                                                        column_B,\n                                                        row_condition=None\n                                                        ) %}\n\n{% set operator = \"=\" %}\n{% set expression = column_A ~ \" \" ~ operator ~ \" \" ~ column_B %}\n\n{{ dbt_expectations.expression_is_true(model,\n                                        expression=expression,\n                                        group_by_columns=None,\n                                        row_condition=row_condition\n                                        )\n                                        }}\n\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_expectations.expression_is_true"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720537836.8614345, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_pair_values_to_be_in_set": {"name": "test_expect_column_pair_values_to_be_in_set", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros\\schema_tests\\multi-column\\expect_column_pair_values_to_be_in_set.sql", "original_file_path": "macros\\schema_tests\\multi-column\\expect_column_pair_values_to_be_in_set.sql", "unique_id": "macro.dbt_expectations.test_expect_column_pair_values_to_be_in_set", "macro_sql": "{% test expect_column_pair_values_to_be_in_set(model,\n                                                        column_A,\n                                                        column_B,\n                                                        value_pairs_set,\n                                                        row_condition=None\n                                                        ) %}\n\n{% set expression %}\n{% for pair in value_pairs_set %}\n{%- if (pair | length) == 2 %}\n({{ column_A }} = {{ pair[0] }} and {{ column_B }} = {{ pair[1] }}){% if not loop.last %} or {% endif %}\n{% else %}\n{{ exceptions.raise_compiler_error(\n        \"`value_pairs_set` argument for expect_column_pair_values_to_be_in_set test cannot have more than 2 item per element.\n        Got: '\" ~ pair ~ \"'.'\"\n    ) }}\n{% endif %}\n{% endfor %}\n{% endset %}\n{{ dbt_expectations.expression_is_true(model,\n                                        expression=expression,\n                                        group_by_columns=None,\n                                        row_condition=row_condition\n                                        )\n                                        }}\n\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_expectations.expression_is_true"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720537836.8714502, "supported_languages": null}, "macro.dbt_expectations.test_expect_compound_columns_to_be_unique": {"name": "test_expect_compound_columns_to_be_unique", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros\\schema_tests\\multi-column\\expect_compound_columns_to_be_unique.sql", "original_file_path": "macros\\schema_tests\\multi-column\\expect_compound_columns_to_be_unique.sql", "unique_id": "macro.dbt_expectations.test_expect_compound_columns_to_be_unique", "macro_sql": "{% test expect_compound_columns_to_be_unique(model,\n                                                column_list,\n                                                quote_columns=False,\n                                                ignore_row_if=\"all_values_are_missing\",\n                                                row_condition=None\n                                                ) %}\n{% if not column_list %}\n    {{ exceptions.raise_compiler_error(\n        \"`column_list` must be specified as a list of columns. Got: '\" ~ column_list ~\"'.'\"\n    ) }}\n{% endif %}\n\n{% if not quote_columns %}\n    {%- set columns=column_list %}\n{% elif quote_columns %}\n    {%- set columns=[] %}\n        {% for column in column_list -%}\n            {% set columns = columns.append( adapter.quote(column) ) %}\n        {%- endfor %}\n{% else %}\n    {{ exceptions.raise_compiler_error(\n        \"`quote_columns` argument for expect_compound_columns_to_be_unique test must be one of [True, False] Got: '\" ~ quote_columns ~\"'.'\"\n    ) }}\n{% endif %}\n\n{%- set row_condition_ext -%}\n\n    {%- if row_condition  %}\n    {{ row_condition }} and\n    {% endif -%}\n\n    {{ dbt_expectations.ignore_row_if_expression(ignore_row_if, columns) }}\n\n{%- endset -%}\n\nwith validation_errors as (\n\n    select\n        {% for column in columns -%}\n        {{ column }},\n        {%- endfor %}\n        count(*) as {{adapter.quote(\"n_records\")}}\n    from {{ model }}\n    where\n        1=1\n    {%- if row_condition_ext %}\n        and {{ row_condition_ext }}\n    {% endif %}\n    group by\n        {% for column in columns -%}\n        {{ column }}{% if not loop.last %},{% endif %}\n        {%- endfor %}\n    having count(*) > 1\n\n)\nselect * from validation_errors\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_expectations.ignore_row_if_expression"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720537836.876498, "supported_languages": null}, "macro.dbt_expectations.test_expect_multicolumn_sum_to_equal": {"name": "test_expect_multicolumn_sum_to_equal", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros\\schema_tests\\multi-column\\expect_multicolumn_sum_to_equal.sql", "original_file_path": "macros\\schema_tests\\multi-column\\expect_multicolumn_sum_to_equal.sql", "unique_id": "macro.dbt_expectations.test_expect_multicolumn_sum_to_equal", "macro_sql": "{% test expect_multicolumn_sum_to_equal(model,\n                                                column_list,\n                                                sum_total,\n                                                group_by=None,\n                                                row_condition=None\n                                                ) %}\n\n{% set expression %}\n{% for column in column_list %}\nsum({{ column }}){% if not loop.last %} + {% endif %}\n{# the if just allows for column names or literal numbers #}\n{% endfor %} = {% if sum_total is number %}{{sum_total}}{% else %}sum({{ sum_total }}){% endif %}\n{% endset %}\n\n{{ dbt_expectations.expression_is_true(model,\n                                        expression=expression,\n                                        group_by_columns=group_by,\n                                        row_condition=row_condition\n                                        )\n                                        }}\n\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_expectations.expression_is_true"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720537836.878511, "supported_languages": null}, "macro.dbt_expectations.test_expect_select_column_values_to_be_unique_within_record": {"name": "test_expect_select_column_values_to_be_unique_within_record", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros\\schema_tests\\multi-column\\expect_select_column_values_to_be_unique_within_record.sql", "original_file_path": "macros\\schema_tests\\multi-column\\expect_select_column_values_to_be_unique_within_record.sql", "unique_id": "macro.dbt_expectations.test_expect_select_column_values_to_be_unique_within_record", "macro_sql": "{% test expect_select_column_values_to_be_unique_within_record(model,\n                                                    column_list,\n                                                    quote_columns=False,\n                                                    ignore_row_if=\"all_values_are_missing\",\n                                                    row_condition=None\n                                                    )  -%}\n    {{ adapter.dispatch('test_expect_select_column_values_to_be_unique_within_record', 'dbt_expectations') (model, column_list, quote_columns, ignore_row_if, row_condition) }}\n{%- endtest %}", "depends_on": {"macros": ["macro.tsql_utils.sqlserver__test_expect_select_column_values_to_be_unique_within_record"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720537836.878511, "supported_languages": null}, "macro.dbt_expectations.default__test_expect_select_column_values_to_be_unique_within_record": {"name": "default__test_expect_select_column_values_to_be_unique_within_record", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros\\schema_tests\\multi-column\\expect_select_column_values_to_be_unique_within_record.sql", "original_file_path": "macros\\schema_tests\\multi-column\\expect_select_column_values_to_be_unique_within_record.sql", "unique_id": "macro.dbt_expectations.default__test_expect_select_column_values_to_be_unique_within_record", "macro_sql": "{% macro default__test_expect_select_column_values_to_be_unique_within_record(model,\n                                                    column_list,\n                                                    quote_columns,\n                                                    ignore_row_if,\n                                                    row_condition\n                                                    ) %}\n\n{% if not quote_columns %}\n    {%- set columns=column_list %}\n{% elif quote_columns %}\n    {%- set columns=[] %}\n        {% for column in column_list -%}\n            {% set columns = columns.append( adapter.quote(column) ) %}\n        {%- endfor %}\n{% else %}\n    {{ exceptions.raise_compiler_error(\n        \"`quote_columns` argument for unique_combination_of_columns test must be one of [True, False] Got: '\" ~ quote_columns ~\"'.'\"\n    ) }}\n{% endif %}\n\n{%- set row_condition_ext -%}\n\n    {%- if row_condition  %}\n    {{ row_condition }} and\n    {% endif -%}\n\n    {{ dbt_expectations.ignore_row_if_expression(ignore_row_if, columns) }}\n\n{%- endset -%}\n\nwith column_values as (\n\n    select\n        row_number() over(order by {{ columns|join(', ') }}) as row_index,\n        {% for column in columns -%}\n        {{ column }}{% if not loop.last %},{% endif %}\n        {%- endfor %}\n    from {{ model }}\n    where\n        1=1\n    {%- if row_condition_ext %}\n        and {{ row_condition_ext }}\n    {% endif %}\n\n),\nunpivot_columns as (\n\n    {% for column in columns %}\n    select row_index, '{{ column }}' as column_name, {{ dbt_expectations.md5(column) }} as column_value from column_values\n    {% if not loop.last %}union all{% endif %}\n    {% endfor %}\n),\nvalidation_errors as (\n\n    select\n        row_index,\n        count(distinct column_value) as column_values\n    from unpivot_columns\n    group by 1\n    having count(distinct column_value) < {{ columns | length }}\n\n)\nselect * from validation_errors\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_expectations.ignore_row_if_expression", "macro.dbt_expectations.md5"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720537836.878511, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_values_to_match_like_pattern": {"name": "test_expect_column_values_to_match_like_pattern", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros\\schema_tests\\string_matching\\expect_column_values_to_match_like_pattern.sql", "original_file_path": "macros\\schema_tests\\string_matching\\expect_column_values_to_match_like_pattern.sql", "unique_id": "macro.dbt_expectations.test_expect_column_values_to_match_like_pattern", "macro_sql": "{% test expect_column_values_to_match_like_pattern(model, column_name,\n                                                    like_pattern,\n                                                    row_condition=None\n                                                    ) %}\n\n{% set expression = dbt_expectations._get_like_pattern_expression(column_name, like_pattern, positive=True) %}\n\n{{ dbt_expectations.expression_is_true(model,\n                                        expression=expression,\n                                        group_by_columns=None,\n                                        row_condition=row_condition\n                                        )\n                                        }}\n\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_expectations._get_like_pattern_expression", "macro.dbt_expectations.expression_is_true"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720537836.878511, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_values_to_match_like_pattern_list": {"name": "test_expect_column_values_to_match_like_pattern_list", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros\\schema_tests\\string_matching\\expect_column_values_to_match_like_pattern_list.sql", "original_file_path": "macros\\schema_tests\\string_matching\\expect_column_values_to_match_like_pattern_list.sql", "unique_id": "macro.dbt_expectations.test_expect_column_values_to_match_like_pattern_list", "macro_sql": "{% test expect_column_values_to_match_like_pattern_list(model, column_name,\n                                                    like_pattern_list,\n                                                    match_on=\"any\",\n                                                    row_condition=None\n                                                    ) %}\n\n{% set expression %}\n    {% for like_pattern in like_pattern_list %}\n    {{ dbt_expectations._get_like_pattern_expression(column_name, like_pattern, positive=True) }}\n    {%- if not loop.last %}\n    {{ \" and \" if match_on == \"all\" else \" or \"}}\n    {% endif -%}\n    {% endfor %}\n{% endset %}\n\n{{ dbt_expectations.expression_is_true(model,\n                                        expression=expression,\n                                        group_by_columns=None,\n                                        row_condition=row_condition\n                                        )\n                                        }}\n\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_expectations._get_like_pattern_expression", "macro.dbt_expectations.expression_is_true"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720537836.878511, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_values_to_match_regex": {"name": "test_expect_column_values_to_match_regex", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros\\schema_tests\\string_matching\\expect_column_values_to_match_regex.sql", "original_file_path": "macros\\schema_tests\\string_matching\\expect_column_values_to_match_regex.sql", "unique_id": "macro.dbt_expectations.test_expect_column_values_to_match_regex", "macro_sql": "{% test expect_column_values_to_match_regex(model, column_name,\n                                                    regex,\n                                                    row_condition=None,\n                                                    is_raw=False,\n                                                    flags=\"\"\n                                                    ) %}\n\n{% set expression %}\n{{ dbt_expectations.regexp_instr(column_name, regex, is_raw=is_raw, flags=flags) }} > 0\n{% endset %}\n\n{{ dbt_expectations.expression_is_true(model,\n                                        expression=expression,\n                                        group_by_columns=None,\n                                        row_condition=row_condition\n                                        )\n                                        }}\n\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_expectations.regexp_instr", "macro.dbt_expectations.expression_is_true"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720537836.8915236, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_values_to_match_regex_list": {"name": "test_expect_column_values_to_match_regex_list", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros\\schema_tests\\string_matching\\expect_column_values_to_match_regex_list.sql", "original_file_path": "macros\\schema_tests\\string_matching\\expect_column_values_to_match_regex_list.sql", "unique_id": "macro.dbt_expectations.test_expect_column_values_to_match_regex_list", "macro_sql": "{% test expect_column_values_to_match_regex_list(model, column_name,\n                                                    regex_list,\n                                                    match_on=\"any\",\n                                                    row_condition=None,\n                                                    is_raw=False,\n                                                    flags=\"\"\n                                                    ) %}\n\n{% set expression %}\n    {% for regex in regex_list %}\n    {{ dbt_expectations.regexp_instr(column_name, regex, is_raw=is_raw, flags=flags) }} > 0\n    {%- if not loop.last %}\n    {{ \" and \" if match_on == \"all\" else \" or \"}}\n    {% endif -%}\n    {% endfor %}\n{% endset %}\n\n{{ dbt_expectations.expression_is_true(model,\n                                        expression=expression,\n                                        group_by_columns=None,\n                                        row_condition=row_condition\n                                        )\n                                        }}\n\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_expectations.regexp_instr", "macro.dbt_expectations.expression_is_true"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720537836.8915236, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_values_to_not_match_like_pattern": {"name": "test_expect_column_values_to_not_match_like_pattern", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros\\schema_tests\\string_matching\\expect_column_values_to_not_match_like_pattern.sql", "original_file_path": "macros\\schema_tests\\string_matching\\expect_column_values_to_not_match_like_pattern.sql", "unique_id": "macro.dbt_expectations.test_expect_column_values_to_not_match_like_pattern", "macro_sql": "{% test expect_column_values_to_not_match_like_pattern(model, column_name,\n                                                    like_pattern,\n                                                    row_condition=None\n                                                    ) %}\n\n{% set expression = dbt_expectations._get_like_pattern_expression(column_name, like_pattern, positive=False) %}\n\n{{ dbt_expectations.expression_is_true(model,\n                                        expression=expression,\n                                        group_by_columns=None,\n                                        row_condition=row_condition\n                                        )\n                                        }}\n\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_expectations._get_like_pattern_expression", "macro.dbt_expectations.expression_is_true"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720537836.8915236, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_values_to_not_match_like_pattern_list": {"name": "test_expect_column_values_to_not_match_like_pattern_list", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros\\schema_tests\\string_matching\\expect_column_values_to_not_match_like_pattern_list.sql", "original_file_path": "macros\\schema_tests\\string_matching\\expect_column_values_to_not_match_like_pattern_list.sql", "unique_id": "macro.dbt_expectations.test_expect_column_values_to_not_match_like_pattern_list", "macro_sql": "{% test expect_column_values_to_not_match_like_pattern_list(model, column_name,\n                                                    like_pattern_list,\n                                                    match_on=\"any\",\n                                                    row_condition=None\n                                                    ) %}\n\n{% set expression %}\n    {% for like_pattern in like_pattern_list %}\n    {{ dbt_expectations._get_like_pattern_expression(column_name, like_pattern, positive=False) }}\n    {%- if not loop.last %}\n    {{ \" and \" if match_on == \"all\" else \" or \"}}\n    {% endif -%}\n    {% endfor %}\n{% endset %}\n\n{{ dbt_expectations.expression_is_true(model,\n                                        expression=expression,\n                                        group_by_columns=None,\n                                        row_condition=row_condition\n                                        )\n                                        }}\n\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_expectations._get_like_pattern_expression", "macro.dbt_expectations.expression_is_true"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720537836.8915236, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_values_to_not_match_regex": {"name": "test_expect_column_values_to_not_match_regex", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros\\schema_tests\\string_matching\\expect_column_values_to_not_match_regex.sql", "original_file_path": "macros\\schema_tests\\string_matching\\expect_column_values_to_not_match_regex.sql", "unique_id": "macro.dbt_expectations.test_expect_column_values_to_not_match_regex", "macro_sql": "{% test expect_column_values_to_not_match_regex(model, column_name,\n                                                    regex,\n                                                    row_condition=None,\n                                                    is_raw=False,\n                                                    flags=\"\"\n                                                    ) %}\n\n{% set expression %}\n{{ dbt_expectations.regexp_instr(column_name, regex, is_raw=is_raw, flags=flags) }} = 0\n{% endset %}\n\n{{ dbt_expectations.expression_is_true(model,\n                                        expression=expression,\n                                        group_by_columns=None,\n                                        row_condition=row_condition\n                                        )\n                                        }}\n\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_expectations.regexp_instr", "macro.dbt_expectations.expression_is_true"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720537836.8915236, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_values_to_not_match_regex_list": {"name": "test_expect_column_values_to_not_match_regex_list", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros\\schema_tests\\string_matching\\expect_column_values_to_not_match_regex_list.sql", "original_file_path": "macros\\schema_tests\\string_matching\\expect_column_values_to_not_match_regex_list.sql", "unique_id": "macro.dbt_expectations.test_expect_column_values_to_not_match_regex_list", "macro_sql": "{% test expect_column_values_to_not_match_regex_list(model, column_name,\n                                                    regex_list,\n                                                    match_on=\"any\",\n                                                    row_condition=None,\n                                                    is_raw=False,\n                                                    flags=\"\"\n                                                    ) %}\n\n{% set expression %}\n{% for regex in regex_list %}\n{{ dbt_expectations.regexp_instr(column_name, regex, is_raw=is_raw, flags=flags) }} = 0\n{%- if not loop.last %}\n{{ \" and \" if match_on == \"all\" else \" or \"}}\n{% endif -%}\n{% endfor %}\n{% endset %}\n\n{{ dbt_expectations.expression_is_true(model,\n                                        expression=expression,\n                                        group_by_columns=None,\n                                        row_condition=row_condition\n                                        )\n                                        }}\n\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_expectations.regexp_instr", "macro.dbt_expectations.expression_is_true"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720537836.8915236, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_value_lengths_to_be_between": {"name": "test_expect_column_value_lengths_to_be_between", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros\\schema_tests\\string_matching\\expect_column_value_lengths_to_be_between.sql", "original_file_path": "macros\\schema_tests\\string_matching\\expect_column_value_lengths_to_be_between.sql", "unique_id": "macro.dbt_expectations.test_expect_column_value_lengths_to_be_between", "macro_sql": "{% test expect_column_value_lengths_to_be_between(model, column_name,\n                                                         min_value=None,\n                                                         max_value=None,\n                                                         row_condition=None,\n                                                         strictly=False\n                                                      ) %}\n{% set expression %}\n{{ dbt.length(column_name) }}\n{% endset %}\n\n{{ dbt_expectations.expression_between(model,\n                                        expression=expression,\n                                        min_value=min_value,\n                                        max_value=max_value,\n                                        group_by_columns=None,\n                                        row_condition=row_condition,\n                                        strictly=strictly\n                                        ) }}\n\n{% endtest %}", "depends_on": {"macros": ["macro.dbt.length", "macro.dbt_expectations.expression_between"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720537836.9072983, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_value_lengths_to_equal": {"name": "test_expect_column_value_lengths_to_equal", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros\\schema_tests\\string_matching\\expect_column_value_lengths_to_equal.sql", "original_file_path": "macros\\schema_tests\\string_matching\\expect_column_value_lengths_to_equal.sql", "unique_id": "macro.dbt_expectations.test_expect_column_value_lengths_to_equal", "macro_sql": "{% test expect_column_value_lengths_to_equal(model, column_name,\n                                                    value,\n                                                    row_condition=None\n                                                    ) %}\n\n{% set expression = dbt.length(column_name) ~ \" = \" ~ value %}\n\n{{ dbt_expectations.expression_is_true(model,\n                                        expression=expression,\n                                        group_by_columns=None,\n                                        row_condition=row_condition\n                                        )\n                                        }}\n\n{% endtest %}", "depends_on": {"macros": ["macro.dbt.length", "macro.dbt_expectations.expression_is_true"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720537836.9072983, "supported_languages": null}, "macro.dbt_expectations._get_like_pattern_expression": {"name": "_get_like_pattern_expression", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros\\schema_tests\\string_matching\\_get_like_pattern_expression.sql", "original_file_path": "macros\\schema_tests\\string_matching\\_get_like_pattern_expression.sql", "unique_id": "macro.dbt_expectations._get_like_pattern_expression", "macro_sql": "{% macro _get_like_pattern_expression(column_name, like_pattern, positive) %}\n{{ column_name }} {{ \"not\" if not positive else \"\" }} like '{{ like_pattern }}'\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720537836.9072983, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_to_exist": {"name": "test_expect_column_to_exist", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros\\schema_tests\\table_shape\\expect_column_to_exist.sql", "original_file_path": "macros\\schema_tests\\table_shape\\expect_column_to_exist.sql", "unique_id": "macro.dbt_expectations.test_expect_column_to_exist", "macro_sql": "{%- test expect_column_to_exist(model, column_name, column_index=None, transform=\"upper\") -%}\n{%- if execute -%}\n\n    {%- set column_name = column_name | map(transform) | join -%}\n    {%- set relation_column_names = dbt_expectations._get_column_list(model, transform) -%}\n\n    {%- set matching_column_index = relation_column_names.index(column_name) if column_name in relation_column_names else -1 %}\n\n    {%- if column_index -%}\n\n        {%- set column_index_0 = column_index - 1 if column_index > 0 else 0 -%}\n\n        {%- set column_index_matches = true if matching_column_index == column_index_0 else false %}\n\n    {%- else -%}\n\n        {%- set column_index_matches = true -%}\n\n    {%- endif %}\n\n    with test_data as (\n\n        select\n            cast('{{ column_name }}' as {{ dbt.type_string() }}) as column_name,\n            {{ matching_column_index }} as matching_column_index,\n            {{ column_index_matches }} as column_index_matches\n\n    )\n    select *\n    from test_data\n    where\n        not(matching_column_index >= 0 and column_index_matches)\n\n{%- endif -%}\n{%- endtest -%}", "depends_on": {"macros": ["macro.dbt_expectations._get_column_list", "macro.dbt.type_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720537836.9072983, "supported_languages": null}, "macro.dbt_expectations.test_expect_grouped_row_values_to_have_recent_data": {"name": "test_expect_grouped_row_values_to_have_recent_data", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros\\schema_tests\\table_shape\\expect_grouped_row_values_to_have_recent_data.sql", "original_file_path": "macros\\schema_tests\\table_shape\\expect_grouped_row_values_to_have_recent_data.sql", "unique_id": "macro.dbt_expectations.test_expect_grouped_row_values_to_have_recent_data", "macro_sql": "{% test expect_grouped_row_values_to_have_recent_data(model,\n                                                        group_by,\n                                                        timestamp_column,\n                                                        datepart,\n                                                        interval,\n                                                        row_condition=None) %}\n\n {{ adapter.dispatch('test_expect_grouped_row_values_to_have_recent_data', 'dbt_expectations') (model,\n                                                                                                group_by,\n                                                                                                timestamp_column,\n                                                                                                datepart,\n                                                                                                interval,\n                                                                                                row_condition) }}\n\n{% endtest %}", "depends_on": {"macros": ["macro.tsql_utils.sqlserver__test_expect_grouped_row_values_to_have_recent_data"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720537836.9173727, "supported_languages": null}, "macro.dbt_expectations.default__test_expect_grouped_row_values_to_have_recent_data": {"name": "default__test_expect_grouped_row_values_to_have_recent_data", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros\\schema_tests\\table_shape\\expect_grouped_row_values_to_have_recent_data.sql", "original_file_path": "macros\\schema_tests\\table_shape\\expect_grouped_row_values_to_have_recent_data.sql", "unique_id": "macro.dbt_expectations.default__test_expect_grouped_row_values_to_have_recent_data", "macro_sql": "{% macro default__test_expect_grouped_row_values_to_have_recent_data(model,\n                                                                        group_by,\n                                                                        timestamp_column,\n                                                                        datepart,\n                                                                        interval,\n                                                                        row_condition) %}\nwith latest_grouped_timestamps as (\n\n    select\n        {{ group_by | join(\",\") ~ \",\" if group_by }}\n        max(1) as join_key,\n        max(cast({{ timestamp_column }} as {{ dbt_expectations.type_timestamp() }})) as latest_timestamp_column\n    from\n        {{ model }}\n    where\n        -- to exclude erroneous future dates\n        cast({{ timestamp_column }} as {{ dbt_expectations.type_timestamp() }}) <= {{ dbt_date.now() }}\n        {% if row_condition %}\n        and {{ row_condition }}\n        {% endif %}\n\n    {% if group_by -%}\n    {{  dbt_expectations.group_by(group_by | length) }}\n    {%- endif %}\n),\ntotal_row_counts as (\n\n    select\n        {{ group_by | join(\",\") ~ \",\" if group_by }}\n        max(1) as join_key,\n        count(*) as row_count\n    from\n        latest_grouped_timestamps\n    {% if group_by -%}\n    {{  dbt_expectations.group_by(group_by | length) }}\n    {%- endif %}\n\n\n),\noutdated_grouped_timestamps as (\n\n    select *\n    from\n        latest_grouped_timestamps\n    where\n        -- are the max timestamps per group older than the specified cutoff?\n        latest_timestamp_column <\n            cast(\n                {{ dbt.dateadd(datepart, interval * -1, dbt_date.now()) }}\n                as {{ dbt_expectations.type_timestamp() }}\n            )\n\n),\nvalidation_errors as (\n\n    select\n        r.row_count,\n        t.*\n    from\n        total_row_counts r\n        left join\n        outdated_grouped_timestamps t\n        on\n            {% for g in group_by %}\n            r.{{ g }} = t.{{ g }} and\n            {% endfor %}\n            r.join_key = t.join_key\n    where\n        -- fail if either no rows were returned due to row_condition,\n        -- or the recency test returned failed rows\n        r.row_count = 0\n        or\n        t.join_key is not null\n\n)\nselect * from validation_errors\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_expectations.type_timestamp", "macro.dbt_date.now", "macro.dbt_expectations.group_by", "macro.dbt.dateadd"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720537836.9173727, "supported_languages": null}, "macro.dbt_expectations.test_expect_row_values_to_have_recent_data": {"name": "test_expect_row_values_to_have_recent_data", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros\\schema_tests\\table_shape\\expect_row_values_to_have_recent_data.sql", "original_file_path": "macros\\schema_tests\\table_shape\\expect_row_values_to_have_recent_data.sql", "unique_id": "macro.dbt_expectations.test_expect_row_values_to_have_recent_data", "macro_sql": "{% test expect_row_values_to_have_recent_data(model,\n                                                column_name,\n                                                datepart,\n                                                interval,\n                                                row_condition=None) %}\n\n {{ adapter.dispatch('test_expect_row_values_to_have_recent_data', 'dbt_expectations') (model,\n                                                                                        column_name,\n                                                                                        datepart,\n                                                                                        interval,\n                                                                                        row_condition) }}\n\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_expectations.default__test_expect_row_values_to_have_recent_data"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720537836.9219472, "supported_languages": null}, "macro.dbt_expectations.default__test_expect_row_values_to_have_recent_data": {"name": "default__test_expect_row_values_to_have_recent_data", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros\\schema_tests\\table_shape\\expect_row_values_to_have_recent_data.sql", "original_file_path": "macros\\schema_tests\\table_shape\\expect_row_values_to_have_recent_data.sql", "unique_id": "macro.dbt_expectations.default__test_expect_row_values_to_have_recent_data", "macro_sql": "{% macro default__test_expect_row_values_to_have_recent_data(model, column_name, datepart, interval, row_condition) %}\n{%- set default_start_date = '1970-01-01' -%}\nwith max_recency as (\n\n    select max(cast({{ column_name }} as {{ dbt_expectations.type_timestamp() }})) as max_timestamp\n    from\n        {{ model }}\n    where\n        -- to exclude erroneous future dates\n        cast({{ column_name }} as {{ dbt_expectations.type_timestamp() }}) <= {{ dbt_date.now() }}\n        {% if row_condition %}\n        and {{ row_condition }}\n        {% endif %}\n)\nselect\n    *\nfrom\n    max_recency\nwhere\n    -- if the row_condition excludes all rows, we need to compare against a default date\n    -- to avoid false negatives\n    coalesce(max_timestamp, cast('{{ default_start_date }}' as {{ dbt_expectations.type_timestamp() }}))\n        <\n        cast({{ dbt.dateadd(datepart, interval * -1, dbt_date.now()) }} as {{ dbt_expectations.type_timestamp() }})\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_expectations.type_timestamp", "macro.dbt_date.now", "macro.dbt.dateadd"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720537836.9219472, "supported_languages": null}, "macro.dbt_expectations.test_expect_table_aggregation_to_equal_other_table": {"name": "test_expect_table_aggregation_to_equal_other_table", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros\\schema_tests\\table_shape\\expect_table_aggregation_to_equal_other_table.sql", "original_file_path": "macros\\schema_tests\\table_shape\\expect_table_aggregation_to_equal_other_table.sql", "unique_id": "macro.dbt_expectations.test_expect_table_aggregation_to_equal_other_table", "macro_sql": "{%- test expect_table_aggregation_to_equal_other_table(model,\n                                                expression,\n                                                compare_model,\n                                                compare_expression=None,\n                                                group_by=None,\n                                                compare_group_by=None,\n                                                row_condition=None,\n                                                compare_row_condition=None,\n                                                tolerance=0.0,\n                                                tolerance_percent=None\n                                                ) -%}\n\n\n{{ dbt_expectations.test_equal_expression(\n    model,\n    expression=expression,\n    compare_model=compare_model,\n    compare_expression=compare_expression,\n    group_by=group_by,\n    compare_group_by=compare_group_by,\n    row_condition=row_condition,\n    compare_row_condition=compare_row_condition,\n    tolerance=tolerance,\n    tolerance_percent=tolerance_percent\n) }}\n\n{%- endtest -%}", "depends_on": {"macros": ["macro.dbt_expectations.test_equal_expression"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720537836.9219472, "supported_languages": null}, "macro.dbt_expectations.test_expect_table_columns_to_contain_set": {"name": "test_expect_table_columns_to_contain_set", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros\\schema_tests\\table_shape\\expect_table_columns_to_contain_set.sql", "original_file_path": "macros\\schema_tests\\table_shape\\expect_table_columns_to_contain_set.sql", "unique_id": "macro.dbt_expectations.test_expect_table_columns_to_contain_set", "macro_sql": "{%- test expect_table_columns_to_contain_set(model, column_list, transform=\"upper\") -%}\n{%- if execute -%}\n    {%- set column_list = column_list | map(transform) | list -%}\n    {%- set relation_column_names = dbt_expectations._get_column_list(model, transform) -%}\n    {%- set matching_columns = dbt_expectations._list_intersect(column_list, relation_column_names) -%}\n    with relation_columns as (\n\n        {% for col_name in relation_column_names %}\n        select cast('{{ col_name }}' as {{ dbt.type_string() }}) as relation_column\n        {% if not loop.last %}union all{% endif %}\n        {% endfor %}\n    ),\n    input_columns as (\n\n        {% for col_name in column_list %}\n        select cast('{{ col_name }}' as {{ dbt.type_string() }}) as input_column\n        {% if not loop.last %}union all{% endif %}\n        {% endfor %}\n    )\n    select *\n    from\n        input_columns i\n        left join\n        relation_columns r on r.relation_column = i.input_column\n    where\n        -- catch any column in input list that is not in the list of table columns\n        r.relation_column is null\n{%- endif -%}\n{%- endtest -%}", "depends_on": {"macros": ["macro.dbt_expectations._get_column_list", "macro.dbt_expectations._list_intersect", "macro.dbt.type_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720537836.9219472, "supported_languages": null}, "macro.dbt_expectations.test_expect_table_columns_to_match_ordered_list": {"name": "test_expect_table_columns_to_match_ordered_list", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros\\schema_tests\\table_shape\\expect_table_columns_to_match_ordered_list.sql", "original_file_path": "macros\\schema_tests\\table_shape\\expect_table_columns_to_match_ordered_list.sql", "unique_id": "macro.dbt_expectations.test_expect_table_columns_to_match_ordered_list", "macro_sql": "{%- test expect_table_columns_to_match_ordered_list(model, column_list, transform=\"upper\") -%}\n{%- if execute -%}\n    {%- set column_list = column_list | map(transform) | list -%}\n    {%- set relation_column_names = dbt_expectations._get_column_list(model, transform) -%}\n    {%- set matching_columns = dbt_expectations._list_intersect(column_list, relation_column_names) -%}\n    with relation_columns as (\n\n        {% for col_name in relation_column_names %}\n        select\n            {{ loop.index }} as relation_column_idx,\n            cast('{{ col_name }}' as {{ dbt.type_string() }}) as relation_column\n        {% if not loop.last %}union all{% endif %}\n        {% endfor %}\n    ),\n    input_columns as (\n\n        {% for col_name in column_list %}\n        select\n            {{ loop.index }} as input_column_idx,\n            cast('{{ col_name }}' as {{ dbt.type_string() }}) as input_column\n        {% if not loop.last %}union all{% endif %}\n        {% endfor %}\n    )\n    select *\n    from\n        relation_columns r\n        full outer join\n        input_columns i on r.relation_column = i.input_column and r.relation_column_idx = i.input_column_idx\n    where\n        -- catch any column in input list that is not in the sequence of table columns\n        -- or any table column that is not in the input sequence\n        r.relation_column is null or\n        i.input_column is null\n\n{%- endif -%}\n{%- endtest -%}", "depends_on": {"macros": ["macro.dbt_expectations._get_column_list", "macro.dbt_expectations._list_intersect", "macro.dbt.type_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720537836.9219472, "supported_languages": null}, "macro.dbt_expectations.test_expect_table_columns_to_match_set": {"name": "test_expect_table_columns_to_match_set", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros\\schema_tests\\table_shape\\expect_table_columns_to_match_set.sql", "original_file_path": "macros\\schema_tests\\table_shape\\expect_table_columns_to_match_set.sql", "unique_id": "macro.dbt_expectations.test_expect_table_columns_to_match_set", "macro_sql": "{%- test expect_table_columns_to_match_set(model, column_list, transform=\"upper\") -%}\n{%- if execute -%}\n    {%- set column_list = column_list | map(transform) | list -%}\n    {%- set relation_column_names = dbt_expectations._get_column_list(model, transform) -%}\n    {%- set matching_columns = dbt_expectations._list_intersect(column_list, relation_column_names) -%}\n    with relation_columns as (\n\n        {% for col_name in relation_column_names %}\n        select cast('{{ col_name }}' as {{ dbt.type_string() }}) as relation_column\n        {% if not loop.last %}union all{% endif %}\n        {% endfor %}\n    ),\n    input_columns as (\n\n        {% for col_name in column_list %}\n        select cast('{{ col_name }}' as {{ dbt.type_string() }}) as input_column\n        {% if not loop.last %}union all{% endif %}\n        {% endfor %}\n    )\n    select *\n    from\n        relation_columns r\n        full outer join\n        input_columns i on r.relation_column = i.input_column\n    where\n        -- catch any column in input list that is not in the list of table columns\n        -- or any table column that is not in the input list\n        r.relation_column is null or\n        i.input_column is null\n\n{%- endif -%}\n{%- endtest -%}", "depends_on": {"macros": ["macro.dbt_expectations._get_column_list", "macro.dbt_expectations._list_intersect", "macro.dbt.type_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720537836.9370267, "supported_languages": null}, "macro.dbt_expectations.test_expect_table_columns_to_not_contain_set": {"name": "test_expect_table_columns_to_not_contain_set", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros\\schema_tests\\table_shape\\expect_table_columns_to_not_contain_set.sql", "original_file_path": "macros\\schema_tests\\table_shape\\expect_table_columns_to_not_contain_set.sql", "unique_id": "macro.dbt_expectations.test_expect_table_columns_to_not_contain_set", "macro_sql": "{%- test expect_table_columns_to_not_contain_set(model, column_list, transform=\"upper\") -%}\n{%- if execute -%}\n    {%- set column_list = column_list | map(transform) | list -%}\n    {%- set relation_column_names = dbt_expectations._get_column_list(model, transform) -%}\n    {%- set matching_columns = dbt_expectations._list_intersect(column_list, relation_column_names) -%}\n    with relation_columns as (\n\n        {% for col_name in relation_column_names %}\n        select cast('{{ col_name }}' as {{ dbt.type_string() }}) as relation_column\n        {% if not loop.last %}union all{% endif %}\n        {% endfor %}\n    ),\n    input_columns as (\n\n        {% for col_name in column_list %}\n        select cast('{{ col_name }}' as {{ dbt.type_string() }}) as input_column\n        {% if not loop.last %}union all{% endif %}\n        {% endfor %}\n    )\n    -- catch any column in input list that is in the list of table columns\n    select *\n    from\n        input_columns i\n        inner join\n        relation_columns r on r.relation_column = i.input_column\n\n{%- endif -%}\n{%- endtest -%}", "depends_on": {"macros": ["macro.dbt_expectations._get_column_list", "macro.dbt_expectations._list_intersect", "macro.dbt.type_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720537836.9391255, "supported_languages": null}, "macro.dbt_expectations.test_expect_table_column_count_to_be_between": {"name": "test_expect_table_column_count_to_be_between", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros\\schema_tests\\table_shape\\expect_table_column_count_to_be_between.sql", "original_file_path": "macros\\schema_tests\\table_shape\\expect_table_column_count_to_be_between.sql", "unique_id": "macro.dbt_expectations.test_expect_table_column_count_to_be_between", "macro_sql": "{%- test expect_table_column_count_to_be_between(model,\n                                                    min_value=None,\n                                                    max_value=None\n                                                    ) -%}\n{%- if min_value is none and max_value is none -%}\n{{ exceptions.raise_compiler_error(\n    \"You have to provide either a min_value, max_value or both.\"\n) }}\n{%- endif -%}\n{%- if execute -%}\n{%- set number_actual_columns = (adapter.get_columns_in_relation(model) | length) -%}\n\n{%- set expression %}\n( 1=1\n{%- if min_value %} and number_actual_columns >= min_value{% endif %}\n{%- if max_value %} and number_actual_columns <= max_value{% endif %}\n)\n{% endset -%}\n\nwith test_data as (\n\n    select\n        {{ number_actual_columns }} as number_actual_columns,\n        {{ min_value if min_value else 0 }} as min_value,\n        {{ max_value if max_value else 0 }} as max_value\n\n)\nselect *\nfrom test_data\nwhere\n    not {{ expression }}\n{%- endif -%}\n{%- endtest -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720537836.9391255, "supported_languages": null}, "macro.dbt_expectations.test_expect_table_column_count_to_equal": {"name": "test_expect_table_column_count_to_equal", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros\\schema_tests\\table_shape\\expect_table_column_count_to_equal.sql", "original_file_path": "macros\\schema_tests\\table_shape\\expect_table_column_count_to_equal.sql", "unique_id": "macro.dbt_expectations.test_expect_table_column_count_to_equal", "macro_sql": "{%- test expect_table_column_count_to_equal(model, value) -%}\n{%- if execute -%}\n{%- set number_actual_columns = (adapter.get_columns_in_relation(model) | length) -%}\nwith test_data as (\n\n    select\n        {{ number_actual_columns }} as number_actual_columns,\n        {{ value }} as value\n\n)\nselect *\nfrom test_data\nwhere\n    number_actual_columns != value\n{%- endif -%}\n{%- endtest -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720537836.9391255, "supported_languages": null}, "macro.dbt_expectations.test_expect_table_column_count_to_equal_other_table": {"name": "test_expect_table_column_count_to_equal_other_table", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros\\schema_tests\\table_shape\\expect_table_column_count_to_equal_other_table.sql", "original_file_path": "macros\\schema_tests\\table_shape\\expect_table_column_count_to_equal_other_table.sql", "unique_id": "macro.dbt_expectations.test_expect_table_column_count_to_equal_other_table", "macro_sql": "{%- test expect_table_column_count_to_equal_other_table(model, compare_model) -%}\n{%- if execute -%}\n{%- set number_columns = (adapter.get_columns_in_relation(model) | length) -%}\n{%- set compare_number_columns = (adapter.get_columns_in_relation(compare_model) | length) -%}\nwith test_data as (\n\n    select\n        {{ number_columns }} as number_columns,\n        {{ compare_number_columns }} as compare_number_columns\n\n)\nselect *\nfrom test_data\nwhere\n    number_columns != compare_number_columns\n{%- endif -%}\n{%- endtest -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720537836.9391255, "supported_languages": null}, "macro.dbt_expectations.test_expect_table_row_count_to_be_between": {"name": "test_expect_table_row_count_to_be_between", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros\\schema_tests\\table_shape\\expect_table_row_count_to_be_between.sql", "original_file_path": "macros\\schema_tests\\table_shape\\expect_table_row_count_to_be_between.sql", "unique_id": "macro.dbt_expectations.test_expect_table_row_count_to_be_between", "macro_sql": "{%- test expect_table_row_count_to_be_between(model,\n                                                min_value=None,\n                                                max_value=None,\n                                                group_by=None,\n                                                row_condition=None,\n                                                strictly=False\n                                            ) -%}\n    {{ adapter.dispatch('test_expect_table_row_count_to_be_between',\n                        'dbt_expectations') (model,\n                                                min_value,\n                                                max_value,\n                                                group_by,\n                                                row_condition,\n                                                strictly\n                                                ) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_expectations.default__test_expect_table_row_count_to_be_between"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720537836.9391255, "supported_languages": null}, "macro.dbt_expectations.default__test_expect_table_row_count_to_be_between": {"name": "default__test_expect_table_row_count_to_be_between", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros\\schema_tests\\table_shape\\expect_table_row_count_to_be_between.sql", "original_file_path": "macros\\schema_tests\\table_shape\\expect_table_row_count_to_be_between.sql", "unique_id": "macro.dbt_expectations.default__test_expect_table_row_count_to_be_between", "macro_sql": "\n\n{%- macro default__test_expect_table_row_count_to_be_between(model,\n                                                min_value,\n                                                max_value,\n                                                group_by,\n                                                row_condition,\n                                                strictly\n                                                ) -%}\n{% set expression %}\ncount(*)\n{% endset %}\n{{ dbt_expectations.expression_between(model,\n    expression=expression,\n    min_value=min_value,\n    max_value=max_value,\n    group_by_columns=group_by,\n    row_condition=row_condition,\n    strictly=strictly\n    ) }}\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt_expectations.expression_between"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720537836.9391255, "supported_languages": null}, "macro.dbt_expectations.test_expect_table_row_count_to_equal": {"name": "test_expect_table_row_count_to_equal", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros\\schema_tests\\table_shape\\expect_table_row_count_to_equal.sql", "original_file_path": "macros\\schema_tests\\table_shape\\expect_table_row_count_to_equal.sql", "unique_id": "macro.dbt_expectations.test_expect_table_row_count_to_equal", "macro_sql": "{%- test expect_table_row_count_to_equal(model,\n                                            value,\n                                            group_by=None,\n                                            row_condition=None\n                                            ) -%}\n    {{ adapter.dispatch('test_expect_table_row_count_to_equal',\n                        'dbt_expectations') (model,\n                                                value,\n                                                group_by,\n                                                row_condition\n                                                ) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_expectations.default__test_expect_table_row_count_to_equal"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720537836.9391255, "supported_languages": null}, "macro.dbt_expectations.default__test_expect_table_row_count_to_equal": {"name": "default__test_expect_table_row_count_to_equal", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros\\schema_tests\\table_shape\\expect_table_row_count_to_equal.sql", "original_file_path": "macros\\schema_tests\\table_shape\\expect_table_row_count_to_equal.sql", "unique_id": "macro.dbt_expectations.default__test_expect_table_row_count_to_equal", "macro_sql": "\n\n\n\n{%- macro default__test_expect_table_row_count_to_equal(model,\n                                                value,\n                                                group_by,\n                                                row_condition\n                                                ) -%}\n{% set expression %}\ncount(*) = {{ value }}\n{% endset %}\n{{ dbt_expectations.expression_is_true(model,\n    expression=expression,\n    group_by_columns=group_by,\n    row_condition=row_condition)\n    }}\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt_expectations.expression_is_true"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720537836.9391255, "supported_languages": null}, "macro.dbt_expectations.test_expect_table_row_count_to_equal_other_table": {"name": "test_expect_table_row_count_to_equal_other_table", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros\\schema_tests\\table_shape\\expect_table_row_count_to_equal_other_table.sql", "original_file_path": "macros\\schema_tests\\table_shape\\expect_table_row_count_to_equal_other_table.sql", "unique_id": "macro.dbt_expectations.test_expect_table_row_count_to_equal_other_table", "macro_sql": "{%- test expect_table_row_count_to_equal_other_table(model,\n                                            compare_model,\n                                            group_by=None,\n                                            compare_group_by=None,\n                                            factor=1,\n                                            row_condition=None,\n                                            compare_row_condition=None\n                                        ) -%}\n\n    {{ adapter.dispatch('test_expect_table_row_count_to_equal_other_table',\n                        'dbt_expectations') (model,\n                                                compare_model,\n                                                group_by,\n                                                compare_group_by,\n                                                factor,\n                                                row_condition,\n                                                compare_row_condition\n                                            ) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_expectations.default__test_expect_table_row_count_to_equal_other_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720537836.952204, "supported_languages": null}, "macro.dbt_expectations.default__test_expect_table_row_count_to_equal_other_table": {"name": "default__test_expect_table_row_count_to_equal_other_table", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros\\schema_tests\\table_shape\\expect_table_row_count_to_equal_other_table.sql", "original_file_path": "macros\\schema_tests\\table_shape\\expect_table_row_count_to_equal_other_table.sql", "unique_id": "macro.dbt_expectations.default__test_expect_table_row_count_to_equal_other_table", "macro_sql": "\n\n{%- macro default__test_expect_table_row_count_to_equal_other_table(model,\n                                                    compare_model,\n                                                    group_by,\n                                                    compare_group_by,\n                                                    factor,\n                                                    row_condition,\n                                                    compare_row_condition\n                                                    ) -%}\n{{ dbt_expectations.test_equal_expression(model, \"count(*)\",\n    compare_model=compare_model,\n    compare_expression=\"count(*) * \" + factor|string,\n    group_by=group_by,\n    compare_group_by=compare_group_by,\n    row_condition=row_condition,\n    compare_row_condition=compare_row_condition\n) }}\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt_expectations.test_equal_expression"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720537836.952204, "supported_languages": null}, "macro.dbt_expectations.test_expect_table_row_count_to_equal_other_table_times_factor": {"name": "test_expect_table_row_count_to_equal_other_table_times_factor", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros\\schema_tests\\table_shape\\expect_table_row_count_to_equal_other_table_times_factor.sql", "original_file_path": "macros\\schema_tests\\table_shape\\expect_table_row_count_to_equal_other_table_times_factor.sql", "unique_id": "macro.dbt_expectations.test_expect_table_row_count_to_equal_other_table_times_factor", "macro_sql": "{%- test expect_table_row_count_to_equal_other_table_times_factor(model,\n                                                                    compare_model,\n                                                                    factor,\n                                                                    group_by=None,\n                                                                    compare_group_by=None,\n                                                                    row_condition=None,\n                                                                    compare_row_condition=None\n                                            ) -%}\n    {{ adapter.dispatch('test_expect_table_row_count_to_equal_other_table_times_factor',\n                        'dbt_expectations') (model,\n                                                compare_model,\n                                                factor,\n                                                group_by,\n                                                compare_group_by,\n                                                row_condition,\n                                                compare_row_condition\n                                            ) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_expectations.default__test_expect_table_row_count_to_equal_other_table_times_factor"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720537836.952204, "supported_languages": null}, "macro.dbt_expectations.default__test_expect_table_row_count_to_equal_other_table_times_factor": {"name": "default__test_expect_table_row_count_to_equal_other_table_times_factor", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros\\schema_tests\\table_shape\\expect_table_row_count_to_equal_other_table_times_factor.sql", "original_file_path": "macros\\schema_tests\\table_shape\\expect_table_row_count_to_equal_other_table_times_factor.sql", "unique_id": "macro.dbt_expectations.default__test_expect_table_row_count_to_equal_other_table_times_factor", "macro_sql": "\n\n{%- macro default__test_expect_table_row_count_to_equal_other_table_times_factor(model,\n                                                                    compare_model,\n                                                                    factor,\n                                                                    group_by,\n                                                                    compare_group_by,\n                                                                    row_condition,\n                                                                    compare_row_condition\n                                                                    ) -%}\n\n{{ dbt_expectations.test_expect_table_row_count_to_equal_other_table(model,\n    compare_model,\n    group_by=group_by,\n    compare_group_by=compare_group_by,\n    factor=factor,\n    row_condition=row_condition,\n    compare_row_condition=compare_row_condition\n) }}\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_table_row_count_to_equal_other_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720537836.952204, "supported_languages": null}, "macro.dbt_expectations._get_column_list": {"name": "_get_column_list", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros\\schema_tests\\table_shape\\_get_column_list.sql", "original_file_path": "macros\\schema_tests\\table_shape\\_get_column_list.sql", "unique_id": "macro.dbt_expectations._get_column_list", "macro_sql": "{%- macro _get_column_list(model, transform=\"upper\") -%}\n{%- set relation_columns = adapter.get_columns_in_relation(model) -%}\n{%- set relation_column_names = relation_columns | map(attribute=\"name\") | map(transform) | list -%}\n{%- do return(relation_column_names) -%}\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720537836.952204, "supported_languages": null}, "macro.dbt_expectations._list_intersect": {"name": "_list_intersect", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros\\schema_tests\\table_shape\\_list_intersect.sql", "original_file_path": "macros\\schema_tests\\table_shape\\_list_intersect.sql", "unique_id": "macro.dbt_expectations._list_intersect", "macro_sql": "{%- macro _list_intersect(list1, list2) -%}\n{%- set matching_items = [] -%}\n{%- for itm in list1 -%}\n    {%- if itm in list2 -%}\n        {%- do matching_items.append(itm) -%}\n    {%- endif -%}\n{%- endfor -%}\n{%- do return(matching_items) -%}\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720537836.952204, "supported_languages": null}, "macro.dbt_expectations.get_select": {"name": "get_select", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros\\schema_tests\\_generalized\\equal_expression.sql", "original_file_path": "macros\\schema_tests\\_generalized\\equal_expression.sql", "unique_id": "macro.dbt_expectations.get_select", "macro_sql": "{% macro get_select(model, expression, row_condition, group_by) -%}\n    {{ adapter.dispatch('get_select', 'dbt_expectations') (model, expression, row_condition, group_by) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.tsql_utils.sqlserver__get_select"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720537836.9672847, "supported_languages": null}, "macro.dbt_expectations.default__get_select": {"name": "default__get_select", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros\\schema_tests\\_generalized\\equal_expression.sql", "original_file_path": "macros\\schema_tests\\_generalized\\equal_expression.sql", "unique_id": "macro.dbt_expectations.default__get_select", "macro_sql": "\n\n{%- macro default__get_select(model, expression, row_condition, group_by) %}\n    select\n        {% if group_by %}\n        {% for g in group_by -%}\n            {{ g }} as col_{{ loop.index }},\n        {% endfor -%}\n        {% endif %}\n        {{ expression }} as expression\n    from\n        {{ model }}\n    {%- if row_condition %}\n    where\n        {{ row_condition }}\n    {% endif %}\n    {% if group_by %}\n    group by\n        {% for g in group_by -%}\n            {{ loop.index }}{% if not loop.last %},{% endif %}\n        {% endfor %}\n    {% endif %}\n{% endmacro -%}\n\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720537836.9723613, "supported_languages": null}, "macro.dbt_expectations.test_equal_expression": {"name": "test_equal_expression", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros\\schema_tests\\_generalized\\equal_expression.sql", "original_file_path": "macros\\schema_tests\\_generalized\\equal_expression.sql", "unique_id": "macro.dbt_expectations.test_equal_expression", "macro_sql": "{% test equal_expression(model, expression,\n                                compare_model=None,\n                                compare_expression=None,\n                                group_by=None,\n                                compare_group_by=None,\n                                row_condition=None,\n                                compare_row_condition=None,\n                                tolerance=0.0,\n                                tolerance_percent=None\n                                ) -%}\n\n    {{ adapter.dispatch('test_equal_expression', 'dbt_expectations') (\n                                model,\n                                expression,\n                                compare_model,\n                                compare_expression,\n                                group_by,\n                                compare_group_by,\n                                row_condition,\n                                compare_row_condition,\n                                tolerance,\n                                tolerance_percent) }}\n{%- endtest %}", "depends_on": {"macros": ["macro.tsql_utils.sqlserver__test_equal_expression"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720537836.9723613, "supported_languages": null}, "macro.dbt_expectations.default__test_equal_expression": {"name": "default__test_equal_expression", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros\\schema_tests\\_generalized\\equal_expression.sql", "original_file_path": "macros\\schema_tests\\_generalized\\equal_expression.sql", "unique_id": "macro.dbt_expectations.default__test_equal_expression", "macro_sql": "\n\n{%- macro default__test_equal_expression(\n                                model,\n                                expression,\n                                compare_model,\n                                compare_expression,\n                                group_by,\n                                compare_group_by,\n                                row_condition,\n                                compare_row_condition,\n                                tolerance,\n                                tolerance_percent) -%}\n\n    {%- set compare_model = model if not compare_model else compare_model -%}\n    {%- set compare_expression = expression if not compare_expression else compare_expression -%}\n    {%- set compare_row_condition = row_condition if not compare_row_condition else compare_row_condition -%}\n    {%- set compare_group_by = group_by if not compare_group_by else compare_group_by -%}\n\n    {%- set n_cols = (group_by|length) if group_by else 0 %}\n    with a as (\n        {{ dbt_expectations.get_select(model, expression, row_condition, group_by) }}\n    ),\n    b as (\n        {{ dbt_expectations.get_select(compare_model, compare_expression, compare_row_condition, compare_group_by) }}\n    ),\n    final as (\n\n        select\n            {% for i in range(1, n_cols + 1) -%}\n            coalesce(a.col_{{ i }}, b.col_{{ i }}) as col_{{ i }},\n            {% endfor %}\n            a.expression,\n            b.expression as compare_expression,\n            abs(coalesce(a.expression, 0) - coalesce(b.expression, 0)) as expression_difference,\n            abs(coalesce(a.expression, 0) - coalesce(b.expression, 0))/\n                nullif(a.expression * 1.0, 0) as expression_difference_percent\n        from\n        {% if n_cols > 0 %}\n            a\n            full outer join\n            b on\n            {% for i in range(1, n_cols + 1) -%}\n                a.col_{{ i }} = b.col_{{ i }} {% if not loop.last %}and{% endif %}\n            {% endfor -%}\n        {% else %}\n            a cross join b\n        {% endif %}\n    )\n    -- DEBUG:\n    -- select * from final\n    select\n        *\n    from final\n    where\n        {% if tolerance_percent %}\n        expression_difference_percent > {{ tolerance_percent }}\n        {% else %}\n        expression_difference > {{ tolerance }}\n        {% endif %}\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt_expectations.get_select"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720537836.9785037, "supported_languages": null}, "macro.dbt_expectations.test_expression_between": {"name": "test_expression_between", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros\\schema_tests\\_generalized\\expression_between.sql", "original_file_path": "macros\\schema_tests\\_generalized\\expression_between.sql", "unique_id": "macro.dbt_expectations.test_expression_between", "macro_sql": "{% test expression_between(model,\n                                 expression,\n                                 min_value=None,\n                                 max_value=None,\n                                 group_by_columns=None,\n                                 row_condition=None,\n                                 strictly=False\n                                 ) %}\n\n    {{ dbt_expectations.expression_between(model, expression, min_value, max_value, group_by_columns, row_condition, strictly) }}\n\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_expectations.expression_between"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720537836.9785037, "supported_languages": null}, "macro.dbt_expectations.expression_between": {"name": "expression_between", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros\\schema_tests\\_generalized\\expression_between.sql", "original_file_path": "macros\\schema_tests\\_generalized\\expression_between.sql", "unique_id": "macro.dbt_expectations.expression_between", "macro_sql": "{% macro expression_between(model,\n                            expression,\n                            min_value,\n                            max_value,\n                            group_by_columns,\n                            row_condition,\n                            strictly\n                            ) %}\n\n{%- if min_value is none and max_value is none -%}\n{{ exceptions.raise_compiler_error(\n    \"You have to provide either a min_value, max_value or both.\"\n) }}\n{%- endif -%}\n\n{%- set strict_operator = \"\" if strictly else \"=\" -%}\n\n{% set expression_min_max %}\n( 1=1\n{%- if min_value is not none %} and {{ expression | trim }} >{{ strict_operator }} {{ min_value }}{% endif %}\n{%- if max_value is not none %} and {{ expression | trim }} <{{ strict_operator }} {{ max_value }}{% endif %}\n)\n{% endset %}\n\n{{ dbt_expectations.expression_is_true(model,\n                                        expression=expression_min_max,\n                                        group_by_columns=group_by_columns,\n                                        row_condition=row_condition)\n                                        }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_expectations.expression_is_true"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720537836.9825752, "supported_languages": null}, "macro.dbt_expectations.test_expression_is_true": {"name": "test_expression_is_true", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros\\schema_tests\\_generalized\\expression_is_true.sql", "original_file_path": "macros\\schema_tests\\_generalized\\expression_is_true.sql", "unique_id": "macro.dbt_expectations.test_expression_is_true", "macro_sql": "{% test expression_is_true(model,\n                                 expression,\n                                 test_condition=\"= true\",\n                                 group_by_columns=None,\n                                 row_condition=None\n                                 ) %}\n\n    {{ dbt_expectations.expression_is_true(model, expression, test_condition, group_by_columns, row_condition) }}\n\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_expectations.expression_is_true"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720537836.9825752, "supported_languages": null}, "macro.dbt_expectations.expression_is_true": {"name": "expression_is_true", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros\\schema_tests\\_generalized\\expression_is_true.sql", "original_file_path": "macros\\schema_tests\\_generalized\\expression_is_true.sql", "unique_id": "macro.dbt_expectations.expression_is_true", "macro_sql": "{% macro expression_is_true(model,\n                                 expression,\n                                 test_condition=\"= true\",\n                                 group_by_columns=None,\n                                 row_condition=None\n                                 ) %}\n    {{ adapter.dispatch('expression_is_true', 'dbt_expectations') (model, expression, test_condition, group_by_columns, row_condition) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.tsql_utils.sqlserver__expression_is_true"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720537836.9825752, "supported_languages": null}, "macro.dbt_expectations.default__expression_is_true": {"name": "default__expression_is_true", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros\\schema_tests\\_generalized\\expression_is_true.sql", "original_file_path": "macros\\schema_tests\\_generalized\\expression_is_true.sql", "unique_id": "macro.dbt_expectations.default__expression_is_true", "macro_sql": "{% macro default__expression_is_true(model, expression, test_condition, group_by_columns, row_condition) -%}\nwith grouped_expression as (\n    select\n        {% if group_by_columns %}\n        {% for group_by_column in group_by_columns -%}\n        {{ group_by_column }} as col_{{ loop.index }},\n        {% endfor -%}\n        {% endif %}\n        {{ dbt_expectations.truth_expression(expression) }}\n    from {{ model }}\n     {%- if row_condition %}\n    where\n        {{ row_condition }}\n    {% endif %}\n    {% if group_by_columns %}\n    group by\n    {% for group_by_column in group_by_columns -%}\n        {{ group_by_column }}{% if not loop.last %},{% endif %}\n    {% endfor %}\n    {% endif %}\n\n),\nvalidation_errors as (\n\n    select\n        *\n    from\n        grouped_expression\n    where\n        not(expression {{ test_condition }})\n\n)\n\nselect *\nfrom validation_errors\n\n\n{% endmacro -%}", "depends_on": {"macros": ["macro.dbt_expectations.truth_expression"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720537836.9825752, "supported_languages": null}, "macro.dbt_expectations.ignore_row_if_expression": {"name": "ignore_row_if_expression", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros\\schema_tests\\_generalized\\_ignore_row_if_expression.sql", "original_file_path": "macros\\schema_tests\\_generalized\\_ignore_row_if_expression.sql", "unique_id": "macro.dbt_expectations.ignore_row_if_expression", "macro_sql": "{% macro ignore_row_if_expression(ignore_row_if, columns) %}\n    {{ adapter.dispatch('ignore_row_if_expression', 'dbt_expectations') (ignore_row_if, columns) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_expectations.default__ignore_row_if_expression"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720537836.9825752, "supported_languages": null}, "macro.dbt_expectations.default__ignore_row_if_expression": {"name": "default__ignore_row_if_expression", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros\\schema_tests\\_generalized\\_ignore_row_if_expression.sql", "original_file_path": "macros\\schema_tests\\_generalized\\_ignore_row_if_expression.sql", "unique_id": "macro.dbt_expectations.default__ignore_row_if_expression", "macro_sql": "{% macro default__ignore_row_if_expression(ignore_row_if, columns) %}\n  {%- set ignore_row_if_values = [\"all_values_are_missing\", \"any_value_is_missing\"] -%}\n    {% if ignore_row_if not in ignore_row_if_values %}\n        {{ exceptions.raise_compiler_error(\n            \"`ignore_row_if` must be one of \" ~ (ignore_row_if_values | join(\", \")) ~ \". Got: '\" ~ ignore_row_if ~\"'.'\"\n        ) }}\n    {% endif %}\n\n    {%- set op = \"and\" if ignore_row_if == \"all_values_are_missing\" else \"or\" -%}\n    not (\n        {% for column in columns -%}\n        {{ column }} is null{% if not loop.last %} {{ op }} {% endif %}\n        {% endfor %}\n    )\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720537836.9825752, "supported_languages": null}, "macro.dbt_expectations.truth_expression": {"name": "truth_expression", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros\\schema_tests\\_generalized\\_truth_expression.sql", "original_file_path": "macros\\schema_tests\\_generalized\\_truth_expression.sql", "unique_id": "macro.dbt_expectations.truth_expression", "macro_sql": "{% macro truth_expression(expression) %}\n    {{ adapter.dispatch('truth_expression', 'dbt_expectations') (expression) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_expectations.default__truth_expression"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720537836.9825752, "supported_languages": null}, "macro.dbt_expectations.default__truth_expression": {"name": "default__truth_expression", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros\\schema_tests\\_generalized\\_truth_expression.sql", "original_file_path": "macros\\schema_tests\\_generalized\\_truth_expression.sql", "unique_id": "macro.dbt_expectations.default__truth_expression", "macro_sql": "{% macro default__truth_expression(expression) %}\n  {{ expression }} as expression\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720537836.9825752, "supported_languages": null}, "macro.dbt_expectations.type_timestamp": {"name": "type_timestamp", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros\\utils\\datatypes.sql", "original_file_path": "macros\\utils\\datatypes.sql", "unique_id": "macro.dbt_expectations.type_timestamp", "macro_sql": "\n{%- macro type_timestamp() -%}\n  {{ return(adapter.dispatch('type_timestamp', 'dbt_expectations')()) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt_expectations.default__type_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720537836.9825752, "supported_languages": null}, "macro.dbt_expectations.default__type_timestamp": {"name": "default__type_timestamp", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros\\utils\\datatypes.sql", "original_file_path": "macros\\utils\\datatypes.sql", "unique_id": "macro.dbt_expectations.default__type_timestamp", "macro_sql": "{% macro default__type_timestamp() -%}\n    timestamp\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720537836.9825752, "supported_languages": null}, "macro.dbt_expectations.snowflake__type_timestamp": {"name": "snowflake__type_timestamp", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros\\utils\\datatypes.sql", "original_file_path": "macros\\utils\\datatypes.sql", "unique_id": "macro.dbt_expectations.snowflake__type_timestamp", "macro_sql": "{% macro snowflake__type_timestamp() -%}\n    timestamp_ntz\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720537836.9825752, "supported_languages": null}, "macro.dbt_expectations.postgres__type_timestamp": {"name": "postgres__type_timestamp", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros\\utils\\datatypes.sql", "original_file_path": "macros\\utils\\datatypes.sql", "unique_id": "macro.dbt_expectations.postgres__type_timestamp", "macro_sql": "{% macro postgres__type_timestamp() -%}\n    timestamp without time zone\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720537836.9825752, "supported_languages": null}, "macro.dbt_expectations.trino__type_timestamp": {"name": "trino__type_timestamp", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros\\utils\\datatypes.sql", "original_file_path": "macros\\utils\\datatypes.sql", "unique_id": "macro.dbt_expectations.trino__type_timestamp", "macro_sql": "{% macro trino__type_timestamp() -%}\n    timestamp(3)\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720537836.9825752, "supported_languages": null}, "macro.dbt_expectations.type_datetime": {"name": "type_datetime", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros\\utils\\datatypes.sql", "original_file_path": "macros\\utils\\datatypes.sql", "unique_id": "macro.dbt_expectations.type_datetime", "macro_sql": "{% macro type_datetime() -%}\n  {{ return(adapter.dispatch('type_datetime', 'dbt_expectations')()) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_expectations.default__type_datetime"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720537836.9825752, "supported_languages": null}, "macro.dbt_expectations.default__type_datetime": {"name": "default__type_datetime", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros\\utils\\datatypes.sql", "original_file_path": "macros\\utils\\datatypes.sql", "unique_id": "macro.dbt_expectations.default__type_datetime", "macro_sql": "{% macro default__type_datetime() -%}\n    datetime\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720537836.9825752, "supported_languages": null}, "macro.dbt_expectations.snowflake__type_datetime": {"name": "snowflake__type_datetime", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros\\utils\\datatypes.sql", "original_file_path": "macros\\utils\\datatypes.sql", "unique_id": "macro.dbt_expectations.snowflake__type_datetime", "macro_sql": "{% macro snowflake__type_datetime() -%}\n    timestamp_ntz\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720537836.9825752, "supported_languages": null}, "macro.dbt_expectations.postgres__type_datetime": {"name": "postgres__type_datetime", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros\\utils\\datatypes.sql", "original_file_path": "macros\\utils\\datatypes.sql", "unique_id": "macro.dbt_expectations.postgres__type_datetime", "macro_sql": "{% macro postgres__type_datetime() -%}\n    timestamp without time zone\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720537836.9825752, "supported_languages": null}, "macro.dbt_expectations.duckdb__type_datetime": {"name": "duckdb__type_datetime", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros\\utils\\datatypes.sql", "original_file_path": "macros\\utils\\datatypes.sql", "unique_id": "macro.dbt_expectations.duckdb__type_datetime", "macro_sql": "{% macro duckdb__type_datetime() -%}\n    timestamp\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720537836.9825752, "supported_languages": null}, "macro.dbt_expectations.spark__type_datetime": {"name": "spark__type_datetime", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros\\utils\\datatypes.sql", "original_file_path": "macros\\utils\\datatypes.sql", "unique_id": "macro.dbt_expectations.spark__type_datetime", "macro_sql": "{% macro spark__type_datetime() -%}\n    timestamp\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720537836.9825752, "supported_languages": null}, "macro.dbt_expectations.trino__type_datetime": {"name": "trino__type_datetime", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros\\utils\\datatypes.sql", "original_file_path": "macros\\utils\\datatypes.sql", "unique_id": "macro.dbt_expectations.trino__type_datetime", "macro_sql": "{% macro trino__type_datetime() -%}\n    timestamp(3)\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720537836.9976542, "supported_languages": null}, "macro.dbt_expectations.group_by": {"name": "group_by", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros\\utils\\groupby.sql", "original_file_path": "macros\\utils\\groupby.sql", "unique_id": "macro.dbt_expectations.group_by", "macro_sql": "{%- macro group_by(n) -%}\n    {{ return(adapter.dispatch('group_by', 'dbt_expectations')(n)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_expectations.default__group_by"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720537836.9976542, "supported_languages": null}, "macro.dbt_expectations.default__group_by": {"name": "default__group_by", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros\\utils\\groupby.sql", "original_file_path": "macros\\utils\\groupby.sql", "unique_id": "macro.dbt_expectations.default__group_by", "macro_sql": "\n\n{%- macro default__group_by(n) -%}\n\n  group by {% for i in range(1, n + 1) -%}\n      {{ i }}{{ ',' if not loop.last }}\n   {%- endfor -%}\n\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720537836.9976542, "supported_languages": null}, "macro.dbt_expectations.md5": {"name": "md5", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros\\utils\\md5.sql", "original_file_path": "macros\\utils\\md5.sql", "unique_id": "macro.dbt_expectations.md5", "macro_sql": "{%- macro md5(string_value) -%}\n    {{ return(adapter.dispatch('md5', 'dbt_expectations')(string_value)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_expectations.default__md5"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720537836.9976542, "supported_languages": null}, "macro.dbt_expectations.default__md5": {"name": "default__md5", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros\\utils\\md5.sql", "original_file_path": "macros\\utils\\md5.sql", "unique_id": "macro.dbt_expectations.default__md5", "macro_sql": "\n\n{%- macro default__md5(string_value) -%}\n\n  {{ dbt.hash(string_value) }}\n\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": ["macro.dbt.hash"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720537836.9976542, "supported_languages": null}, "macro.dbt_expectations.trino__md5": {"name": "trino__md5", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros\\utils\\md5.sql", "original_file_path": "macros\\utils\\md5.sql", "unique_id": "macro.dbt_expectations.trino__md5", "macro_sql": "{%- macro trino__md5(string_value) -%}\n\n  md5(cast({{ string_value }} as varbinary))\n\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720537836.9976542, "supported_languages": null}, "macro.dbt_utils.test_accepted_range": {"name": "test_accepted_range", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\generic_tests\\accepted_range.sql", "original_file_path": "macros\\generic_tests\\accepted_range.sql", "unique_id": "macro.dbt_utils.test_accepted_range", "macro_sql": "{% test accepted_range(model, column_name, min_value=none, max_value=none, inclusive=true) %}\n  {{ return(adapter.dispatch('test_accepted_range', 'dbt_utils')(model, column_name, min_value, max_value, inclusive)) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_accepted_range"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720537836.9976542, "supported_languages": null}, "macro.dbt_utils.default__test_accepted_range": {"name": "default__test_accepted_range", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\generic_tests\\accepted_range.sql", "original_file_path": "macros\\generic_tests\\accepted_range.sql", "unique_id": "macro.dbt_utils.default__test_accepted_range", "macro_sql": "{% macro default__test_accepted_range(model, column_name, min_value=none, max_value=none, inclusive=true) %}\n\nwith meet_condition as(\n  select *\n  from {{ model }}\n),\n\nvalidation_errors as (\n  select *\n  from meet_condition\n  where\n    -- never true, defaults to an empty result set. Exists to ensure any combo of the `or` clauses below succeeds\n    1 = 2\n\n  {%- if min_value is not none %}\n    -- records with a value >= min_value are permitted. The `not` flips this to find records that don't meet the rule.\n    or not {{ column_name }} > {{- \"=\" if inclusive }} {{ min_value }}\n  {%- endif %}\n\n  {%- if max_value is not none %}\n    -- records with a value <= max_value are permitted. The `not` flips this to find records that don't meet the rule.\n    or not {{ column_name }} < {{- \"=\" if inclusive }} {{ max_value }}\n  {%- endif %}\n)\n\nselect *\nfrom validation_errors\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720537836.9976542, "supported_languages": null}, "macro.dbt_utils.test_at_least_one": {"name": "test_at_least_one", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\generic_tests\\at_least_one.sql", "original_file_path": "macros\\generic_tests\\at_least_one.sql", "unique_id": "macro.dbt_utils.test_at_least_one", "macro_sql": "{% test at_least_one(model, column_name, group_by_columns = []) %}\n  {{ return(adapter.dispatch('test_at_least_one', 'dbt_utils')(model, column_name, group_by_columns)) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_at_least_one"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720537837.0057356, "supported_languages": null}, "macro.dbt_utils.default__test_at_least_one": {"name": "default__test_at_least_one", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\generic_tests\\at_least_one.sql", "original_file_path": "macros\\generic_tests\\at_least_one.sql", "unique_id": "macro.dbt_utils.default__test_at_least_one", "macro_sql": "{% macro default__test_at_least_one(model, column_name, group_by_columns) %}\n\n{% if group_by_columns|length() > 0 %}\n  {% set select_gb_cols = group_by_columns|join(' ,') + ', ' %}\n  {% set groupby_gb_cols = 'group by ' + group_by_columns|join(',') %}\n{% endif %}\n\nselect *\nfrom (\n    select\n        {# In TSQL, subquery aggregate columns need aliases #}\n        {# thus: a filler col name, 'filler_column' #}\n      {{select_gb_cols}}\n      count({{ column_name }}) as filler_column\n\n    from {{ model }}\n\n    {{groupby_gb_cols}}\n\n    having count({{ column_name }}) = 0\n\n) validation_errors\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720537837.0057356, "supported_languages": null}, "macro.dbt_utils.test_cardinality_equality": {"name": "test_cardinality_equality", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\generic_tests\\cardinality_equality.sql", "original_file_path": "macros\\generic_tests\\cardinality_equality.sql", "unique_id": "macro.dbt_utils.test_cardinality_equality", "macro_sql": "{% test cardinality_equality(model, column_name, to, field) %}\n    {{ return(adapter.dispatch('test_cardinality_equality', 'dbt_utils')(model, column_name, to, field)) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_cardinality_equality"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720537837.0057356, "supported_languages": null}, "macro.dbt_utils.default__test_cardinality_equality": {"name": "default__test_cardinality_equality", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\generic_tests\\cardinality_equality.sql", "original_file_path": "macros\\generic_tests\\cardinality_equality.sql", "unique_id": "macro.dbt_utils.default__test_cardinality_equality", "macro_sql": "{% macro default__test_cardinality_equality(model, column_name, to, field) %}\n\n{# T-SQL does not let you use numbers as aliases for columns #}\n{# Thus, no \"GROUP BY 1\" #}\n\nwith table_a as (\nselect\n  {{ column_name }},\n  count(*) as num_rows\nfrom {{ model }}\ngroup by {{ column_name }}\n),\n\ntable_b as (\nselect\n  {{ field }},\n  count(*) as num_rows\nfrom {{ to }}\ngroup by {{ field }}\n),\n\nexcept_a as (\n  select *\n  from table_a\n  {{ dbt.except() }}\n  select *\n  from table_b\n),\n\nexcept_b as (\n  select *\n  from table_b\n  {{ dbt.except() }}\n  select *\n  from table_a\n),\n\nunioned as (\n  select *\n  from except_a\n  union all\n  select *\n  from except_b\n)\n\nselect *\nfrom unioned\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.except"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720537837.0057356, "supported_languages": null}, "macro.dbt_utils.test_equality": {"name": "test_equality", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\generic_tests\\equality.sql", "original_file_path": "macros\\generic_tests\\equality.sql", "unique_id": "macro.dbt_utils.test_equality", "macro_sql": "{% test equality(model, compare_model, compare_columns=None) %}\n  {{ return(adapter.dispatch('test_equality', 'dbt_utils')(model, compare_model, compare_columns)) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_equality"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720537837.0057356, "supported_languages": null}, "macro.dbt_utils.default__test_equality": {"name": "default__test_equality", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\generic_tests\\equality.sql", "original_file_path": "macros\\generic_tests\\equality.sql", "unique_id": "macro.dbt_utils.default__test_equality", "macro_sql": "{% macro default__test_equality(model, compare_model, compare_columns=None) %}\n\n{% set set_diff %}\n    count(*) + coalesce(abs(\n        sum(case when which_diff = 'a_minus_b' then 1 else 0 end) -\n        sum(case when which_diff = 'b_minus_a' then 1 else 0 end)\n    ), 0)\n{% endset %}\n\n{#-- Needs to be set at parse time, before we return '' below --#}\n{{ config(fail_calc = set_diff) }}\n\n{#-- Prevent querying of db in parsing mode. This works because this macro does not create any new refs. #}\n{%- if not execute -%}\n    {{ return('') }}\n{% endif %}\n\n-- setup\n{%- do dbt_utils._is_relation(model, 'test_equality') -%}\n\n{#-\nIf the compare_cols arg is provided, we can run this test without querying the\ninformation schema\u00a0\u2014 this allows the model to be an ephemeral model\n-#}\n\n{%- if not compare_columns -%}\n    {%- do dbt_utils._is_ephemeral(model, 'test_equality') -%}\n    {%- set compare_columns = adapter.get_columns_in_relation(model) | map(attribute='quoted') -%}\n{%- endif -%}\n\n{% set compare_cols_csv = compare_columns | join(', ') %}\n\nwith a as (\n\n    select * from {{ model }}\n\n),\n\nb as (\n\n    select * from {{ compare_model }}\n\n),\n\na_minus_b as (\n\n    select {{compare_cols_csv}} from a\n    {{ dbt.except() }}\n    select {{compare_cols_csv}} from b\n\n),\n\nb_minus_a as (\n\n    select {{compare_cols_csv}} from b\n    {{ dbt.except() }}\n    select {{compare_cols_csv}} from a\n\n),\n\nunioned as (\n\n    select 'a_minus_b' as which_diff, a_minus_b.* from a_minus_b\n    union all\n    select 'b_minus_a' as which_diff, b_minus_a.* from b_minus_a\n\n)\n\nselect * from unioned\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils._is_relation", "macro.dbt_utils._is_ephemeral", "macro.dbt.except"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720537837.0133848, "supported_languages": null}, "macro.dbt_utils.test_equal_rowcount": {"name": "test_equal_rowcount", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\generic_tests\\equal_rowcount.sql", "original_file_path": "macros\\generic_tests\\equal_rowcount.sql", "unique_id": "macro.dbt_utils.test_equal_rowcount", "macro_sql": "{% test equal_rowcount(model, compare_model, group_by_columns = []) %}\n  {{ return(adapter.dispatch('test_equal_rowcount', 'dbt_utils')(model, compare_model, group_by_columns)) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_equal_rowcount"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720537837.0133848, "supported_languages": null}, "macro.dbt_utils.default__test_equal_rowcount": {"name": "default__test_equal_rowcount", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\generic_tests\\equal_rowcount.sql", "original_file_path": "macros\\generic_tests\\equal_rowcount.sql", "unique_id": "macro.dbt_utils.default__test_equal_rowcount", "macro_sql": "{% macro default__test_equal_rowcount(model, compare_model, group_by_columns) %}\n\n{#-- Needs to be set at parse time, before we return '' below --#}\n{{ config(fail_calc = 'sum(coalesce(diff_count, 0))') }}\n\n{#-- Prevent querying of db in parsing mode. This works because this macro does not create any new refs. #}\n{%- if not execute -%}\n    {{ return('') }}\n{% endif %}\n\n{% if group_by_columns|length() > 0 %}\n  {% set select_gb_cols = group_by_columns|join(', ') + ', ' %}\n  {% set join_gb_cols %}\n    {% for c in group_by_columns %}\n      and a.{{c}} = b.{{c}}\n    {% endfor %}\n  {% endset %}\n  {% set groupby_gb_cols = 'group by ' + group_by_columns|join(',') %}\n{% endif %}\n\n{#-- We must add a fake join key in case additional grouping variables are not provided --#}\n{#-- Redshift does not allow for dynamically created join conditions (e.g. full join on 1 = 1 --#}\n{#-- The same logic is used in fewer_rows_than. In case of changes, maintain consistent logic --#}\n{% set group_by_columns = ['id_dbtutils_test_equal_rowcount'] + group_by_columns %}\n{% set groupby_gb_cols = 'group by ' + group_by_columns|join(',') %}\n\nwith a as (\n\n    select \n      {{select_gb_cols}}\n      1 as id_dbtutils_test_equal_rowcount,\n      count(*) as count_a \n    from {{ model }}\n    {{groupby_gb_cols}}\n\n\n),\nb as (\n\n    select \n      {{select_gb_cols}}\n      1 as id_dbtutils_test_equal_rowcount,\n      count(*) as count_b \n    from {{ compare_model }}\n    {{groupby_gb_cols}}\n\n),\nfinal as (\n\n    select\n    \n        {% for c in group_by_columns -%}\n          a.{{c}} as {{c}}_a,\n          b.{{c}} as {{c}}_b,\n        {% endfor %}\n\n        count_a,\n        count_b,\n        abs(count_a - count_b) as diff_count\n\n    from a\n    full join b\n    on\n    a.id_dbtutils_test_equal_rowcount = b.id_dbtutils_test_equal_rowcount\n    {{join_gb_cols}}\n\n\n)\n\nselect * from final\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720537837.0133848, "supported_languages": null}, "macro.dbt_utils.test_expression_is_true": {"name": "test_expression_is_true", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\generic_tests\\expression_is_true.sql", "original_file_path": "macros\\generic_tests\\expression_is_true.sql", "unique_id": "macro.dbt_utils.test_expression_is_true", "macro_sql": "{% test expression_is_true(model, expression, column_name=None) %}\n  {{ return(adapter.dispatch('test_expression_is_true', 'dbt_utils')(model, expression, column_name)) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_expression_is_true"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720537837.0133848, "supported_languages": null}, "macro.dbt_utils.default__test_expression_is_true": {"name": "default__test_expression_is_true", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\generic_tests\\expression_is_true.sql", "original_file_path": "macros\\generic_tests\\expression_is_true.sql", "unique_id": "macro.dbt_utils.default__test_expression_is_true", "macro_sql": "{% macro default__test_expression_is_true(model, expression, column_name) %}\n\n{% set column_list = '*' if should_store_failures() else \"1\" %}\n\nselect\n    {{ column_list }}\nfrom {{ model }}\n{% if column_name is none %}\nwhere not({{ expression }})\n{%- else %}\nwhere not({{ column_name }} {{ expression }})\n{%- endif %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.should_store_failures"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720537837.0133848, "supported_languages": null}, "macro.dbt_utils.test_fewer_rows_than": {"name": "test_fewer_rows_than", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\generic_tests\\fewer_rows_than.sql", "original_file_path": "macros\\generic_tests\\fewer_rows_than.sql", "unique_id": "macro.dbt_utils.test_fewer_rows_than", "macro_sql": "{% test fewer_rows_than(model, compare_model, group_by_columns = []) %}\n  {{ return(adapter.dispatch('test_fewer_rows_than', 'dbt_utils')(model, compare_model, group_by_columns)) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_fewer_rows_than"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720537837.0234573, "supported_languages": null}, "macro.dbt_utils.default__test_fewer_rows_than": {"name": "default__test_fewer_rows_than", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\generic_tests\\fewer_rows_than.sql", "original_file_path": "macros\\generic_tests\\fewer_rows_than.sql", "unique_id": "macro.dbt_utils.default__test_fewer_rows_than", "macro_sql": "{% macro default__test_fewer_rows_than(model, compare_model, group_by_columns) %}\n\n{{ config(fail_calc = 'sum(coalesce(row_count_delta, 0))') }}\n\n{% if group_by_columns|length() > 0 %}\n  {% set select_gb_cols = group_by_columns|join(' ,') + ', ' %}\n  {% set join_gb_cols %}\n    {% for c in group_by_columns %}\n      and a.{{c}} = b.{{c}}\n    {% endfor %}\n  {% endset %}\n  {% set groupby_gb_cols = 'group by ' + group_by_columns|join(',') %}\n{% endif %}\n\n{#-- We must add a fake join key in case additional grouping variables are not provided --#}\n{#-- Redshift does not allow for dynamically created join conditions (e.g. full join on 1 = 1 --#}\n{#-- The same logic is used in equal_rowcount. In case of changes, maintain consistent logic --#}\n{% set group_by_columns = ['id_dbtutils_test_fewer_rows_than'] + group_by_columns %}\n{% set groupby_gb_cols = 'group by ' + group_by_columns|join(',') %}\n\n\nwith a as (\n\n    select \n      {{select_gb_cols}}\n      1 as id_dbtutils_test_fewer_rows_than,\n      count(*) as count_our_model \n    from {{ model }}\n    {{ groupby_gb_cols }}\n\n),\nb as (\n\n    select \n      {{select_gb_cols}}\n      1 as id_dbtutils_test_fewer_rows_than,\n      count(*) as count_comparison_model \n    from {{ compare_model }}\n    {{ groupby_gb_cols }}\n\n),\ncounts as (\n\n    select\n\n        {% for c in group_by_columns -%}\n          a.{{c}} as {{c}}_a,\n          b.{{c}} as {{c}}_b,\n        {% endfor %}\n\n        count_our_model,\n        count_comparison_model\n    from a\n    full join b on \n    a.id_dbtutils_test_fewer_rows_than = b.id_dbtutils_test_fewer_rows_than\n    {{ join_gb_cols }}\n\n),\nfinal as (\n\n    select *,\n        case\n            -- fail the test if we have more rows than the reference model and return the row count delta\n            when count_our_model > count_comparison_model then (count_our_model - count_comparison_model)\n            -- fail the test if they are the same number\n            when count_our_model = count_comparison_model then 1\n            -- pass the test if the delta is positive (i.e. return the number 0)\n            else 0\n    end as row_count_delta\n    from counts\n\n)\n\nselect * from final\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720537837.0280454, "supported_languages": null}, "macro.dbt_utils.test_mutually_exclusive_ranges": {"name": "test_mutually_exclusive_ranges", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\generic_tests\\mutually_exclusive_ranges.sql", "original_file_path": "macros\\generic_tests\\mutually_exclusive_ranges.sql", "unique_id": "macro.dbt_utils.test_mutually_exclusive_ranges", "macro_sql": "{% test mutually_exclusive_ranges(model, lower_bound_column, upper_bound_column, partition_by=None, gaps='allowed', zero_length_range_allowed=False) %}\n  {{ return(adapter.dispatch('test_mutually_exclusive_ranges', 'dbt_utils')(model, lower_bound_column, upper_bound_column, partition_by, gaps, zero_length_range_allowed)) }}\n{% endtest %}", "depends_on": {"macros": ["macro.tsql_utils.sqlserver__test_mutually_exclusive_ranges"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720537837.0280454, "supported_languages": null}, "macro.dbt_utils.default__test_mutually_exclusive_ranges": {"name": "default__test_mutually_exclusive_ranges", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\generic_tests\\mutually_exclusive_ranges.sql", "original_file_path": "macros\\generic_tests\\mutually_exclusive_ranges.sql", "unique_id": "macro.dbt_utils.default__test_mutually_exclusive_ranges", "macro_sql": "{% macro default__test_mutually_exclusive_ranges(model, lower_bound_column, upper_bound_column, partition_by=None, gaps='allowed', zero_length_range_allowed=False) %}\n{% if gaps == 'not_allowed' %}\n    {% set allow_gaps_operator='=' %}\n    {% set allow_gaps_operator_in_words='equal_to' %}\n{% elif gaps == 'allowed' %}\n    {% set allow_gaps_operator='<=' %}\n    {% set allow_gaps_operator_in_words='less_than_or_equal_to' %}\n{% elif gaps == 'required' %}\n    {% set allow_gaps_operator='<' %}\n    {% set allow_gaps_operator_in_words='less_than' %}\n{% else %}\n    {{ exceptions.raise_compiler_error(\n        \"`gaps` argument for mutually_exclusive_ranges test must be one of ['not_allowed', 'allowed', 'required'] Got: '\" ~ gaps ~\"'.'\"\n    ) }}\n{% endif %}\n{% if not zero_length_range_allowed %}\n    {% set allow_zero_length_operator='<' %}\n    {% set allow_zero_length_operator_in_words='less_than' %}\n{% elif zero_length_range_allowed %}\n    {% set allow_zero_length_operator='<=' %}\n    {% set allow_zero_length_operator_in_words='less_than_or_equal_to' %}\n{% else %}\n    {{ exceptions.raise_compiler_error(\n        \"`zero_length_range_allowed` argument for mutually_exclusive_ranges test must be one of [true, false] Got: '\" ~ zero_length_range_allowed ~\"'.'\"\n    ) }}\n{% endif %}\n\n{% set partition_clause=\"partition by \" ~ partition_by if partition_by else '' %}\n\nwith window_functions as (\n\n    select\n        {% if partition_by %}\n        {{ partition_by }} as partition_by_col,\n        {% endif %}\n        {{ lower_bound_column }} as lower_bound,\n        {{ upper_bound_column }} as upper_bound,\n\n        lead({{ lower_bound_column }}) over (\n            {{ partition_clause }}\n            order by {{ lower_bound_column }}, {{ upper_bound_column }}\n        ) as next_lower_bound,\n\n        row_number() over (\n            {{ partition_clause }}\n            order by {{ lower_bound_column }} desc, {{ upper_bound_column }} desc\n        ) = 1 as is_last_record\n\n    from {{ model }}\n\n),\n\ncalc as (\n    -- We want to return records where one of our assumptions fails, so we'll use\n    -- the `not` function with `and` statements so we can write our assumptions more cleanly\n    select\n        *,\n\n        -- For each record: lower_bound should be < upper_bound.\n        -- Coalesce it to return an error on the null case (implicit assumption\n        -- these columns are not_null)\n        coalesce(\n            lower_bound {{ allow_zero_length_operator }} upper_bound,\n            false\n        ) as lower_bound_{{ allow_zero_length_operator_in_words }}_upper_bound,\n\n        -- For each record: upper_bound {{ allow_gaps_operator }} the next lower_bound.\n        -- Coalesce it to handle null cases for the last record.\n        coalesce(\n            upper_bound {{ allow_gaps_operator }} next_lower_bound,\n            is_last_record,\n            false\n        ) as upper_bound_{{ allow_gaps_operator_in_words }}_next_lower_bound\n\n    from window_functions\n\n),\n\nvalidation_errors as (\n\n    select\n        *\n    from calc\n\n    where not(\n        -- THE FOLLOWING SHOULD BE TRUE --\n        lower_bound_{{ allow_zero_length_operator_in_words }}_upper_bound\n        and upper_bound_{{ allow_gaps_operator_in_words }}_next_lower_bound\n    )\n)\n\nselect * from validation_errors\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720537837.0430667, "supported_languages": null}, "macro.dbt_utils.test_not_accepted_values": {"name": "test_not_accepted_values", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\generic_tests\\not_accepted_values.sql", "original_file_path": "macros\\generic_tests\\not_accepted_values.sql", "unique_id": "macro.dbt_utils.test_not_accepted_values", "macro_sql": "{% test not_accepted_values(model, column_name, values, quote=True) %}\n  {{ return(adapter.dispatch('test_not_accepted_values', 'dbt_utils')(model, column_name, values, quote)) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_not_accepted_values"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720537837.0430667, "supported_languages": null}, "macro.dbt_utils.default__test_not_accepted_values": {"name": "default__test_not_accepted_values", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\generic_tests\\not_accepted_values.sql", "original_file_path": "macros\\generic_tests\\not_accepted_values.sql", "unique_id": "macro.dbt_utils.default__test_not_accepted_values", "macro_sql": "{% macro default__test_not_accepted_values(model, column_name, values, quote=True) %}\nwith all_values as (\n\n    select distinct\n        {{ column_name }} as value_field\n\n    from {{ model }}\n\n),\n\nvalidation_errors as (\n\n    select\n        value_field\n\n    from all_values\n    where value_field in (\n        {% for value in values -%}\n            {% if quote -%}\n            '{{ value }}'\n            {%- else -%}\n            {{ value }}\n            {%- endif -%}\n            {%- if not loop.last -%},{%- endif %}\n        {%- endfor %}\n        )\n\n)\n\nselect *\nfrom validation_errors\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720537837.0430667, "supported_languages": null}, "macro.dbt_utils.test_not_constant": {"name": "test_not_constant", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\generic_tests\\not_constant.sql", "original_file_path": "macros\\generic_tests\\not_constant.sql", "unique_id": "macro.dbt_utils.test_not_constant", "macro_sql": "{% test not_constant(model, column_name, group_by_columns = []) %}\n  {{ return(adapter.dispatch('test_not_constant', 'dbt_utils')(model, column_name, group_by_columns)) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_not_constant"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720537837.0430667, "supported_languages": null}, "macro.dbt_utils.default__test_not_constant": {"name": "default__test_not_constant", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\generic_tests\\not_constant.sql", "original_file_path": "macros\\generic_tests\\not_constant.sql", "unique_id": "macro.dbt_utils.default__test_not_constant", "macro_sql": "{% macro default__test_not_constant(model, column_name, group_by_columns) %}\n\n{% if group_by_columns|length() > 0 %}\n  {% set select_gb_cols = group_by_columns|join(' ,') + ', ' %}\n  {% set groupby_gb_cols = 'group by ' + group_by_columns|join(',') %}\n{% endif %}\n\n\nselect\n    {# In TSQL, subquery aggregate columns need aliases #}\n    {# thus: a filler col name, 'filler_column' #}\n    {{select_gb_cols}}\n    count(distinct {{ column_name }}) as filler_column\n\nfrom {{ model }}\n\n  {{groupby_gb_cols}}\n\nhaving count(distinct {{ column_name }}) = 1\n\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720537837.0430667, "supported_languages": null}, "macro.dbt_utils.test_not_empty_string": {"name": "test_not_empty_string", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\generic_tests\\not_empty_string.sql", "original_file_path": "macros\\generic_tests\\not_empty_string.sql", "unique_id": "macro.dbt_utils.test_not_empty_string", "macro_sql": "{% test not_empty_string(model, column_name, trim_whitespace=true) %}\n\n  {{ return(adapter.dispatch('test_not_empty_string', 'dbt_utils')(model, column_name, trim_whitespace)) }}\n\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_not_empty_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720537837.0430667, "supported_languages": null}, "macro.dbt_utils.default__test_not_empty_string": {"name": "default__test_not_empty_string", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\generic_tests\\not_empty_string.sql", "original_file_path": "macros\\generic_tests\\not_empty_string.sql", "unique_id": "macro.dbt_utils.default__test_not_empty_string", "macro_sql": "{% macro default__test_not_empty_string(model, column_name, trim_whitespace=true) %}\n\n    with\n    \n    all_values as (\n\n        select \n\n\n            {% if trim_whitespace == true -%}\n\n                trim({{ column_name }}) as {{ column_name }}\n\n            {%- else -%}\n\n                {{ column_name }}\n\n            {%- endif %}\n            \n        from {{ model }}\n\n    ),\n\n    errors as (\n\n        select * from all_values\n        where {{ column_name }} = ''\n\n    )\n\n    select * from errors\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720537837.0430667, "supported_languages": null}, "macro.dbt_utils.test_not_null_proportion": {"name": "test_not_null_proportion", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\generic_tests\\not_null_proportion.sql", "original_file_path": "macros\\generic_tests\\not_null_proportion.sql", "unique_id": "macro.dbt_utils.test_not_null_proportion", "macro_sql": "{% macro test_not_null_proportion(model, group_by_columns = []) %}\n  {{ return(adapter.dispatch('test_not_null_proportion', 'dbt_utils')(model, group_by_columns, **kwargs)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_not_null_proportion"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720537837.0430667, "supported_languages": null}, "macro.dbt_utils.default__test_not_null_proportion": {"name": "default__test_not_null_proportion", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\generic_tests\\not_null_proportion.sql", "original_file_path": "macros\\generic_tests\\not_null_proportion.sql", "unique_id": "macro.dbt_utils.default__test_not_null_proportion", "macro_sql": "{% macro default__test_not_null_proportion(model, group_by_columns) %}\n\n{% set column_name = kwargs.get('column_name', kwargs.get('arg')) %}\n{% set at_least = kwargs.get('at_least', kwargs.get('arg')) %}\n{% set at_most = kwargs.get('at_most', kwargs.get('arg', 1)) %}\n\n{% if group_by_columns|length() > 0 %}\n  {% set select_gb_cols = group_by_columns|join(' ,') + ', ' %}\n  {% set groupby_gb_cols = 'group by ' + group_by_columns|join(',') %}\n{% endif %}\n\nwith validation as (\n  select\n    {{select_gb_cols}}\n    sum(case when {{ column_name }} is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion\n  from {{ model }}\n  {{groupby_gb_cols}}\n),\nvalidation_errors as (\n  select\n    {{select_gb_cols}}\n    not_null_proportion\n  from validation\n  where not_null_proportion < {{ at_least }} or not_null_proportion > {{ at_most }}\n)\nselect\n  *\nfrom validation_errors\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720537837.0430667, "supported_languages": null}, "macro.dbt_utils.test_recency": {"name": "test_recency", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\generic_tests\\recency.sql", "original_file_path": "macros\\generic_tests\\recency.sql", "unique_id": "macro.dbt_utils.test_recency", "macro_sql": "{% test recency(model, field, datepart, interval, ignore_time_component=False, group_by_columns = []) %}\n  {{ return(adapter.dispatch('test_recency', 'dbt_utils')(model, field, datepart, interval, ignore_time_component, group_by_columns)) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_recency"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720537837.0430667, "supported_languages": null}, "macro.dbt_utils.default__test_recency": {"name": "default__test_recency", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\generic_tests\\recency.sql", "original_file_path": "macros\\generic_tests\\recency.sql", "unique_id": "macro.dbt_utils.default__test_recency", "macro_sql": "{% macro default__test_recency(model, field, datepart, interval, ignore_time_component, group_by_columns) %}\n\n{% set threshold = 'cast(' ~ dbt.dateadd(datepart, interval * -1, dbt.current_timestamp()) ~ ' as ' ~ ('date' if ignore_time_component else dbt.type_timestamp()) ~ ')'  %}\n\n{% if group_by_columns|length() > 0 %}\n  {% set select_gb_cols = group_by_columns|join(' ,') + ', ' %}\n  {% set groupby_gb_cols = 'group by ' + group_by_columns|join(',') %}\n{% endif %}\n\n\nwith recency as (\n\n    select \n\n      {{ select_gb_cols }}\n      {% if ignore_time_component %}\n        cast(max({{ field }}) as date) as most_recent\n      {%- else %}\n        max({{ field }}) as most_recent\n      {%- endif %}\n\n    from {{ model }}\n\n    {{ groupby_gb_cols }}\n\n)\n\nselect\n\n    {{ select_gb_cols }}\n    most_recent,\n    {{ threshold }} as threshold\n\nfrom recency\nwhere most_recent < {{ threshold }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.dateadd", "macro.dbt.current_timestamp", "macro.dbt.type_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720537837.0580807, "supported_languages": null}, "macro.dbt_utils.test_relationships_where": {"name": "test_relationships_where", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\generic_tests\\relationships_where.sql", "original_file_path": "macros\\generic_tests\\relationships_where.sql", "unique_id": "macro.dbt_utils.test_relationships_where", "macro_sql": "{% test relationships_where(model, column_name, to, field, from_condition=\"1=1\", to_condition=\"1=1\") %}\n  {{ return(adapter.dispatch('test_relationships_where', 'dbt_utils')(model, column_name, to, field, from_condition, to_condition)) }}\n{% endtest %}", "depends_on": {"macros": ["macro.tsql_utils.sqlserver__test_relationships_where"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720537837.0580807, "supported_languages": null}, "macro.dbt_utils.default__test_relationships_where": {"name": "default__test_relationships_where", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\generic_tests\\relationships_where.sql", "original_file_path": "macros\\generic_tests\\relationships_where.sql", "unique_id": "macro.dbt_utils.default__test_relationships_where", "macro_sql": "{% macro default__test_relationships_where(model, column_name, to, field, from_condition=\"1=1\", to_condition=\"1=1\") %}\n\n{# T-SQL has no boolean data type so we use 1=1 which returns TRUE #}\n{# ref https://stackoverflow.com/a/7170753/3842610 #}\n\nwith left_table as (\n\n  select\n    {{column_name}} as id\n\n  from {{model}}\n\n  where {{column_name}} is not null\n    and {{from_condition}}\n\n),\n\nright_table as (\n\n  select\n    {{field}} as id\n\n  from {{to}}\n\n  where {{field}} is not null\n    and {{to_condition}}\n\n),\n\nexceptions as (\n\n  select\n    left_table.id,\n    right_table.id as right_id\n\n  from left_table\n\n  left join right_table\n         on left_table.id = right_table.id\n\n  where right_table.id is null\n\n)\n\nselect * from exceptions\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720537837.0580807, "supported_languages": null}, "macro.dbt_utils.test_sequential_values": {"name": "test_sequential_values", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\generic_tests\\sequential_values.sql", "original_file_path": "macros\\generic_tests\\sequential_values.sql", "unique_id": "macro.dbt_utils.test_sequential_values", "macro_sql": "{% test sequential_values(model, column_name, interval=1, datepart=None, group_by_columns = []) %}\n\n  {{ return(adapter.dispatch('test_sequential_values', 'dbt_utils')(model, column_name, interval, datepart, group_by_columns)) }}\n\n{% endtest %}", "depends_on": {"macros": ["macro.tsql_utils.sqlserver__test_sequential_values"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720537837.0580807, "supported_languages": null}, "macro.dbt_utils.default__test_sequential_values": {"name": "default__test_sequential_values", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\generic_tests\\sequential_values.sql", "original_file_path": "macros\\generic_tests\\sequential_values.sql", "unique_id": "macro.dbt_utils.default__test_sequential_values", "macro_sql": "{% macro default__test_sequential_values(model, column_name, interval=1, datepart=None, group_by_columns = []) %}\n\n{% set previous_column_name = \"previous_\" ~ dbt_utils.slugify(column_name) %}\n\n{% if group_by_columns|length() > 0 %}\n  {% set select_gb_cols = group_by_columns|join(',') + ', ' %}\n  {% set partition_gb_cols = 'partition by ' + group_by_columns|join(',') %}\n{% endif %}\n\nwith windowed as (\n\n    select\n        {{ select_gb_cols }}\n        {{ column_name }},\n        lag({{ column_name }}) over (\n            {{partition_gb_cols}}\n            order by {{ column_name }}\n        ) as {{ previous_column_name }}\n    from {{ model }}\n),\n\nvalidation_errors as (\n    select\n        *\n    from windowed\n    {% if datepart %}\n    where not(cast({{ column_name }} as {{ dbt.type_timestamp() }})= cast({{ dbt.dateadd(datepart, interval, previous_column_name) }} as {{ dbt.type_timestamp() }}))\n    {% else %}\n    where not({{ column_name }} = {{ previous_column_name }} + {{ interval }})\n    {% endif %}\n)\n\nselect *\nfrom validation_errors\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.slugify", "macro.dbt.type_timestamp", "macro.dbt.dateadd"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720537837.0580807, "supported_languages": null}, "macro.dbt_utils.test_unique_combination_of_columns": {"name": "test_unique_combination_of_columns", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\generic_tests\\unique_combination_of_columns.sql", "original_file_path": "macros\\generic_tests\\unique_combination_of_columns.sql", "unique_id": "macro.dbt_utils.test_unique_combination_of_columns", "macro_sql": "{% test unique_combination_of_columns(model, combination_of_columns, quote_columns=false) %}\n  {{ return(adapter.dispatch('test_unique_combination_of_columns', 'dbt_utils')(model, combination_of_columns, quote_columns)) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_unique_combination_of_columns"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720537837.0580807, "supported_languages": null}, "macro.dbt_utils.default__test_unique_combination_of_columns": {"name": "default__test_unique_combination_of_columns", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\generic_tests\\unique_combination_of_columns.sql", "original_file_path": "macros\\generic_tests\\unique_combination_of_columns.sql", "unique_id": "macro.dbt_utils.default__test_unique_combination_of_columns", "macro_sql": "{% macro default__test_unique_combination_of_columns(model, combination_of_columns, quote_columns=false) %}\n\n{% if not quote_columns %}\n    {%- set column_list=combination_of_columns %}\n{% elif quote_columns %}\n    {%- set column_list=[] %}\n        {% for column in combination_of_columns -%}\n            {% set column_list = column_list.append( adapter.quote(column) ) %}\n        {%- endfor %}\n{% else %}\n    {{ exceptions.raise_compiler_error(\n        \"`quote_columns` argument for unique_combination_of_columns test must be one of [True, False] Got: '\" ~ quote ~\"'.'\"\n    ) }}\n{% endif %}\n\n{%- set columns_csv=column_list | join(', ') %}\n\n\nwith validation_errors as (\n\n    select\n        {{ columns_csv }}\n    from {{ model }}\n    group by {{ columns_csv }}\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720537837.072647, "supported_languages": null}, "macro.dbt_utils.log_info": {"name": "log_info", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\jinja_helpers\\log_info.sql", "original_file_path": "macros\\jinja_helpers\\log_info.sql", "unique_id": "macro.dbt_utils.log_info", "macro_sql": "{% macro log_info(message) %}\n    {{ return(adapter.dispatch('log_info', 'dbt_utils')(message)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__log_info"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720537837.072647, "supported_languages": null}, "macro.dbt_utils.default__log_info": {"name": "default__log_info", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\jinja_helpers\\log_info.sql", "original_file_path": "macros\\jinja_helpers\\log_info.sql", "unique_id": "macro.dbt_utils.default__log_info", "macro_sql": "{% macro default__log_info(message) %}\n    {{ log(dbt_utils.pretty_log_format(message), info=True) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.pretty_log_format"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720537837.072647, "supported_languages": null}, "macro.dbt_utils.pretty_log_format": {"name": "pretty_log_format", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\jinja_helpers\\pretty_log_format.sql", "original_file_path": "macros\\jinja_helpers\\pretty_log_format.sql", "unique_id": "macro.dbt_utils.pretty_log_format", "macro_sql": "{% macro pretty_log_format(message) %}\n    {{ return(adapter.dispatch('pretty_log_format', 'dbt_utils')(message)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__pretty_log_format"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720537837.072647, "supported_languages": null}, "macro.dbt_utils.default__pretty_log_format": {"name": "default__pretty_log_format", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\jinja_helpers\\pretty_log_format.sql", "original_file_path": "macros\\jinja_helpers\\pretty_log_format.sql", "unique_id": "macro.dbt_utils.default__pretty_log_format", "macro_sql": "{% macro default__pretty_log_format(message) %}\n    {{ return( dbt_utils.pretty_time() ~ ' + ' ~ message) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.pretty_time"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720537837.072647, "supported_languages": null}, "macro.dbt_utils.pretty_time": {"name": "pretty_time", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\jinja_helpers\\pretty_time.sql", "original_file_path": "macros\\jinja_helpers\\pretty_time.sql", "unique_id": "macro.dbt_utils.pretty_time", "macro_sql": "{% macro pretty_time(format='%H:%M:%S') %}\n    {{ return(adapter.dispatch('pretty_time', 'dbt_utils')(format)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__pretty_time"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720537837.072647, "supported_languages": null}, "macro.dbt_utils.default__pretty_time": {"name": "default__pretty_time", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\jinja_helpers\\pretty_time.sql", "original_file_path": "macros\\jinja_helpers\\pretty_time.sql", "unique_id": "macro.dbt_utils.default__pretty_time", "macro_sql": "{% macro default__pretty_time(format='%H:%M:%S') %}\n    {{ return(modules.datetime.datetime.now().strftime(format)) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720537837.072647, "supported_languages": null}, "macro.dbt_utils.slugify": {"name": "slugify", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\jinja_helpers\\slugify.sql", "original_file_path": "macros\\jinja_helpers\\slugify.sql", "unique_id": "macro.dbt_utils.slugify", "macro_sql": "{% macro slugify(string) %}\n\n{#- Lower case the string -#}\n{% set string = string | lower %}\n{#- Replace spaces and dashes with underscores -#}\n{% set string = modules.re.sub('[ -]+', '_', string) %}\n{#- Only take letters, numbers, and underscores -#}\n{% set string = modules.re.sub('[^a-z0-9_]+', '', string) %}\n{#- Prepends \"_\" if string begins with a number -#}\n{% set string = modules.re.sub('^[0-9]', '_' + string[0], string) %}\n\n{{ return(string) }}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720537837.0786579, "supported_languages": null}, "macro.dbt_utils._is_ephemeral": {"name": "_is_ephemeral", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\jinja_helpers\\_is_ephemeral.sql", "original_file_path": "macros\\jinja_helpers\\_is_ephemeral.sql", "unique_id": "macro.dbt_utils._is_ephemeral", "macro_sql": "{% macro _is_ephemeral(obj, macro) %}\n    {%- if obj.is_cte -%}\n        {% set ephemeral_prefix = api.Relation.add_ephemeral_prefix('') %}\n        {% if obj.name.startswith(ephemeral_prefix) %}\n            {% set model_name = obj.name[(ephemeral_prefix|length):] %}\n        {% else %}\n            {% set model_name = obj.name %}\n        {%- endif -%}\n        {% set error_message %}\nThe `{{ macro }}` macro cannot be used with ephemeral models, as it relies on the information schema.\n\n`{{ model_name }}` is an ephemeral model. Consider making it a view or table instead.\n        {% endset %}\n        {%- do exceptions.raise_compiler_error(error_message) -%}\n    {%- endif -%}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720537837.0786579, "supported_languages": null}, "macro.dbt_utils._is_relation": {"name": "_is_relation", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\jinja_helpers\\_is_relation.sql", "original_file_path": "macros\\jinja_helpers\\_is_relation.sql", "unique_id": "macro.dbt_utils._is_relation", "macro_sql": "{% macro _is_relation(obj, macro) %}\n    {%- if not (obj is mapping and obj.get('metadata', {}).get('type', '').endswith('Relation')) -%}\n        {%- do exceptions.raise_compiler_error(\"Macro \" ~ macro ~ \" expected a Relation but received the value: \" ~ obj) -%}\n    {%- endif -%}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720537837.0831826, "supported_languages": null}, "macro.dbt_utils.get_intervals_between": {"name": "get_intervals_between", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\sql\\date_spine.sql", "original_file_path": "macros\\sql\\date_spine.sql", "unique_id": "macro.dbt_utils.get_intervals_between", "macro_sql": "{% macro get_intervals_between(start_date, end_date, datepart) -%}\n    {{ return(adapter.dispatch('get_intervals_between', 'dbt_utils')(start_date, end_date, datepart)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__get_intervals_between"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720537837.0831826, "supported_languages": null}, "macro.dbt_utils.default__get_intervals_between": {"name": "default__get_intervals_between", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\sql\\date_spine.sql", "original_file_path": "macros\\sql\\date_spine.sql", "unique_id": "macro.dbt_utils.default__get_intervals_between", "macro_sql": "{% macro default__get_intervals_between(start_date, end_date, datepart) -%}\n    {%- call statement('get_intervals_between', fetch_result=True) %}\n\n        select {{ dbt.datediff(start_date, end_date, datepart) }}\n\n    {%- endcall -%}\n\n    {%- set value_list = load_result('get_intervals_between') -%}\n\n    {%- if value_list and value_list['data'] -%}\n        {%- set values = value_list['data'] | map(attribute=0) | list %}\n        {{ return(values[0]) }}\n    {%- else -%}\n        {{ return(1) }}\n    {%- endif -%}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt.datediff"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720537837.0876927, "supported_languages": null}, "macro.dbt_utils.date_spine": {"name": "date_spine", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\sql\\date_spine.sql", "original_file_path": "macros\\sql\\date_spine.sql", "unique_id": "macro.dbt_utils.date_spine", "macro_sql": "{% macro date_spine(datepart, start_date, end_date) %}\n    {{ return(adapter.dispatch('date_spine', 'dbt_utils')(datepart, start_date, end_date)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.tsql_utils.sqlserver__date_spine"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720537837.0876927, "supported_languages": null}, "macro.dbt_utils.default__date_spine": {"name": "default__date_spine", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\sql\\date_spine.sql", "original_file_path": "macros\\sql\\date_spine.sql", "unique_id": "macro.dbt_utils.default__date_spine", "macro_sql": "{% macro default__date_spine(datepart, start_date, end_date) %}\n\n\n{# call as follows:\n\ndate_spine(\n    \"day\",\n    \"to_date('01/01/2016', 'mm/dd/yyyy')\",\n    \"dbt.dateadd(week, 1, current_date)\"\n) #}\n\n\nwith rawdata as (\n\n    {{dbt_utils.generate_series(\n        dbt_utils.get_intervals_between(start_date, end_date, datepart)\n    )}}\n\n),\n\nall_periods as (\n\n    select (\n        {{\n            dbt.dateadd(\n                datepart,\n                \"row_number() over (order by 1) - 1\",\n                start_date\n            )\n        }}\n    ) as date_{{datepart}}\n    from rawdata\n\n),\n\nfiltered as (\n\n    select *\n    from all_periods\n    where date_{{datepart}} <= {{ end_date }}\n\n)\n\nselect * from filtered\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.generate_series", "macro.dbt_utils.get_intervals_between", "macro.dbt.dateadd"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720537837.0876927, "supported_languages": null}, "macro.dbt_utils.deduplicate": {"name": "deduplicate", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\sql\\deduplicate.sql", "original_file_path": "macros\\sql\\deduplicate.sql", "unique_id": "macro.dbt_utils.deduplicate", "macro_sql": "{%- macro deduplicate(relation, partition_by, order_by) -%}\n    {{ return(adapter.dispatch('deduplicate', 'dbt_utils')(relation, partition_by, order_by)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.tsql_utils.sqlserver__deduplicate"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720537837.0876927, "supported_languages": null}, "macro.dbt_utils.default__deduplicate": {"name": "default__deduplicate", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\sql\\deduplicate.sql", "original_file_path": "macros\\sql\\deduplicate.sql", "unique_id": "macro.dbt_utils.default__deduplicate", "macro_sql": "\n\n{%- macro default__deduplicate(relation, partition_by, order_by) -%}\n\n    with row_numbered as (\n        select\n            _inner.*,\n            row_number() over (\n                partition by {{ partition_by }}\n                order by {{ order_by }}\n            ) as rn\n        from {{ relation }} as _inner\n    )\n\n    select\n        distinct data.*\n    from {{ relation }} as data\n    {#\n    -- Not all DBs will support natural joins but the ones that do include:\n    -- Oracle, MySQL, SQLite, Redshift, Teradata, Materialize, Databricks\n    -- Apache Spark, SingleStore, Vertica\n    -- Those that do not appear to support natural joins include:\n    -- SQLServer, Trino, Presto, Rockset, Athena\n    #}\n    natural join row_numbered\n    where row_numbered.rn = 1\n\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720537837.0876927, "supported_languages": null}, "macro.dbt_utils.redshift__deduplicate": {"name": "redshift__deduplicate", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\sql\\deduplicate.sql", "original_file_path": "macros\\sql\\deduplicate.sql", "unique_id": "macro.dbt_utils.redshift__deduplicate", "macro_sql": "{% macro redshift__deduplicate(relation, partition_by, order_by) -%}\n\n    {{ return(dbt_utils.default__deduplicate(relation, partition_by, order_by=order_by)) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__deduplicate"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720537837.0876927, "supported_languages": null}, "macro.dbt_utils.postgres__deduplicate": {"name": "postgres__deduplicate", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\sql\\deduplicate.sql", "original_file_path": "macros\\sql\\deduplicate.sql", "unique_id": "macro.dbt_utils.postgres__deduplicate", "macro_sql": "\n{%- macro postgres__deduplicate(relation, partition_by, order_by) -%}\n\n    select\n        distinct on ({{ partition_by }}) *\n    from {{ relation }}\n    order by {{ partition_by }}{{ ',' ~ order_by }}\n\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720537837.0876927, "supported_languages": null}, "macro.dbt_utils.snowflake__deduplicate": {"name": "snowflake__deduplicate", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\sql\\deduplicate.sql", "original_file_path": "macros\\sql\\deduplicate.sql", "unique_id": "macro.dbt_utils.snowflake__deduplicate", "macro_sql": "\n{%- macro snowflake__deduplicate(relation, partition_by, order_by) -%}\n\n    select *\n    from {{ relation }}\n    qualify\n        row_number() over (\n            partition by {{ partition_by }}\n            order by {{ order_by }}\n        ) = 1\n\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720537837.0876927, "supported_languages": null}, "macro.dbt_utils.bigquery__deduplicate": {"name": "bigquery__deduplicate", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\sql\\deduplicate.sql", "original_file_path": "macros\\sql\\deduplicate.sql", "unique_id": "macro.dbt_utils.bigquery__deduplicate", "macro_sql": "\n{%- macro bigquery__deduplicate(relation, partition_by, order_by) -%}\n\n    select unique.*\n    from (\n        select\n            array_agg (\n                original\n                order by {{ order_by }}\n                limit 1\n            )[offset(0)] unique\n        from {{ relation }} original\n        group by {{ partition_by }}\n    )\n\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720537837.0876927, "supported_languages": null}, "macro.dbt_utils.get_powers_of_two": {"name": "get_powers_of_two", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\sql\\generate_series.sql", "original_file_path": "macros\\sql\\generate_series.sql", "unique_id": "macro.dbt_utils.get_powers_of_two", "macro_sql": "{% macro get_powers_of_two(upper_bound) %}\n    {{ return(adapter.dispatch('get_powers_of_two', 'dbt_utils')(upper_bound)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__get_powers_of_two"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720537837.0876927, "supported_languages": null}, "macro.dbt_utils.default__get_powers_of_two": {"name": "default__get_powers_of_two", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\sql\\generate_series.sql", "original_file_path": "macros\\sql\\generate_series.sql", "unique_id": "macro.dbt_utils.default__get_powers_of_two", "macro_sql": "{% macro default__get_powers_of_two(upper_bound) %}\n\n    {% if upper_bound <= 0 %}\n    {{ exceptions.raise_compiler_error(\"upper bound must be positive\") }}\n    {% endif %}\n\n    {% for _ in range(1, 100) %}\n       {% if upper_bound <= 2 ** loop.index %}{{ return(loop.index) }}{% endif %}\n    {% endfor %}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720537837.0876927, "supported_languages": null}, "macro.dbt_utils.generate_series": {"name": "generate_series", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\sql\\generate_series.sql", "original_file_path": "macros\\sql\\generate_series.sql", "unique_id": "macro.dbt_utils.generate_series", "macro_sql": "{% macro generate_series(upper_bound) %}\n    {{ return(adapter.dispatch('generate_series', 'dbt_utils')(upper_bound)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.tsql_utils.sqlserver__generate_series"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720537837.0876927, "supported_languages": null}, "macro.dbt_utils.default__generate_series": {"name": "default__generate_series", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\sql\\generate_series.sql", "original_file_path": "macros\\sql\\generate_series.sql", "unique_id": "macro.dbt_utils.default__generate_series", "macro_sql": "{% macro default__generate_series(upper_bound) %}\n\n    {% set n = dbt_utils.get_powers_of_two(upper_bound) %}\n\n    with p as (\n        select 0 as generated_number union all select 1\n    ), unioned as (\n\n    select\n\n    {% for i in range(n) %}\n    p{{i}}.generated_number * power(2, {{i}})\n    {% if not loop.last %} + {% endif %}\n    {% endfor %}\n    + 1\n    as generated_number\n\n    from\n\n    {% for i in range(n) %}\n    p as p{{i}}\n    {% if not loop.last %} cross join {% endif %}\n    {% endfor %}\n\n    )\n\n    select *\n    from unioned\n    where generated_number <= {{upper_bound}}\n    order by generated_number\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.get_powers_of_two"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720537837.0876927, "supported_languages": null}, "macro.dbt_utils.generate_surrogate_key": {"name": "generate_surrogate_key", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\sql\\generate_surrogate_key.sql", "original_file_path": "macros\\sql\\generate_surrogate_key.sql", "unique_id": "macro.dbt_utils.generate_surrogate_key", "macro_sql": "{%- macro generate_surrogate_key(field_list) -%}\n    {{ return(adapter.dispatch('generate_surrogate_key', 'dbt_utils')(field_list)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__generate_surrogate_key"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720537837.0876927, "supported_languages": null}, "macro.dbt_utils.default__generate_surrogate_key": {"name": "default__generate_surrogate_key", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\sql\\generate_surrogate_key.sql", "original_file_path": "macros\\sql\\generate_surrogate_key.sql", "unique_id": "macro.dbt_utils.default__generate_surrogate_key", "macro_sql": "\n\n{%- macro default__generate_surrogate_key(field_list) -%}\n\n{% if var('surrogate_key_treat_nulls_as_empty_strings', False) %}\n    {% set default_null_value = \"\" %}\n{% else %}\n    {% set default_null_value = '_dbt_utils_surrogate_key_null_'%}\n{% endif %}\n\n{%- set fields = [] -%}\n\n{%- for field in field_list -%}\n\n    {%- do fields.append(\n        \"coalesce(cast(\" ~ field ~ \" as \" ~ dbt.type_string() ~ \"), '\" ~ default_null_value  ~\"')\"\n    ) -%}\n\n    {%- if not loop.last %}\n        {%- do fields.append(\"'-'\") -%}\n    {%- endif -%}\n\n{%- endfor -%}\n\n{{ dbt.hash(dbt.concat(fields)) }}\n\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt.type_string", "macro.dbt.hash", "macro.dbt.concat"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720537837.1027057, "supported_languages": null}, "macro.dbt_utils.get_column_values": {"name": "get_column_values", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\sql\\get_column_values.sql", "original_file_path": "macros\\sql\\get_column_values.sql", "unique_id": "macro.dbt_utils.get_column_values", "macro_sql": "{% macro get_column_values(table, column, order_by='count(*) desc', max_records=none, default=none, where=none) -%}\n    {{ return(adapter.dispatch('get_column_values', 'dbt_utils')(table, column, order_by, max_records, default, where)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__get_column_values"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720537837.1057203, "supported_languages": null}, "macro.dbt_utils.default__get_column_values": {"name": "default__get_column_values", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\sql\\get_column_values.sql", "original_file_path": "macros\\sql\\get_column_values.sql", "unique_id": "macro.dbt_utils.default__get_column_values", "macro_sql": "{% macro default__get_column_values(table, column, order_by='count(*) desc', max_records=none, default=none, where=none) -%}\n    {#-- Prevent querying of db in parsing mode. This works because this macro does not create any new refs. #}\n    {%- if not execute -%}\n        {% set default = [] if not default %}\n        {{ return(default) }}\n    {% endif %}\n\n    {%- do dbt_utils._is_ephemeral(table, 'get_column_values') -%}\n\n    {# Not all relations are tables. Renaming for internal clarity without breaking functionality for anyone using named arguments #}\n    {# TODO: Change the method signature in a future 0.x.0 release #}\n    {%- set target_relation = table -%}\n\n    {# adapter.load_relation is a convenience wrapper to avoid building a Relation when we already have one #}\n    {% set relation_exists = (load_relation(target_relation)) is not none %}\n\n    {%- call statement('get_column_values', fetch_result=true) %}\n\n        {%- if not relation_exists and default is none -%}\n\n          {{ exceptions.raise_compiler_error(\"In get_column_values(): relation \" ~ target_relation ~ \" does not exist and no default value was provided.\") }}\n\n        {%- elif not relation_exists and default is not none -%}\n\n          {{ log(\"Relation \" ~ target_relation ~ \" does not exist. Returning the default value: \" ~ default) }}\n\n          {{ return(default) }}\n\n        {%- else -%}\n\n\n            select\n                {{ column }} as value\n\n            from {{ target_relation }}\n\n            {% if where is not none %}\n            where {{ where }}\n            {% endif %}\n\n            group by {{ column }}\n            order by {{ order_by }}\n\n            {% if max_records is not none %}\n            limit {{ max_records }}\n            {% endif %}\n\n        {% endif %}\n\n    {%- endcall -%}\n\n    {%- set value_list = load_result('get_column_values') -%}\n\n    {%- if value_list and value_list['data'] -%}\n        {%- set values = value_list['data'] | map(attribute=0) | list %}\n        {{ return(values) }}\n    {%- else -%}\n        {{ return(default) }}\n    {%- endif -%}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_utils._is_ephemeral", "macro.dbt.load_relation", "macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720537837.1057203, "supported_languages": null}, "macro.dbt_utils.get_filtered_columns_in_relation": {"name": "get_filtered_columns_in_relation", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\sql\\get_filtered_columns_in_relation.sql", "original_file_path": "macros\\sql\\get_filtered_columns_in_relation.sql", "unique_id": "macro.dbt_utils.get_filtered_columns_in_relation", "macro_sql": "{% macro get_filtered_columns_in_relation(from, except=[]) -%}\n    {{ return(adapter.dispatch('get_filtered_columns_in_relation', 'dbt_utils')(from, except)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__get_filtered_columns_in_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720537837.1057203, "supported_languages": null}, "macro.dbt_utils.default__get_filtered_columns_in_relation": {"name": "default__get_filtered_columns_in_relation", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\sql\\get_filtered_columns_in_relation.sql", "original_file_path": "macros\\sql\\get_filtered_columns_in_relation.sql", "unique_id": "macro.dbt_utils.default__get_filtered_columns_in_relation", "macro_sql": "{% macro default__get_filtered_columns_in_relation(from, except=[]) -%}\n    {%- do dbt_utils._is_relation(from, 'get_filtered_columns_in_relation') -%}\n    {%- do dbt_utils._is_ephemeral(from, 'get_filtered_columns_in_relation') -%}\n\n    {# -- Prevent querying of db in parsing mode. This works because this macro does not create any new refs. #}\n    {%- if not execute -%}\n        {{ return('') }}\n    {% endif %}\n\n    {%- set include_cols = [] %}\n    {%- set cols = adapter.get_columns_in_relation(from) -%}\n    {%- set except = except | map(\"lower\") | list %}\n    {%- for col in cols -%}\n        {%- if col.column|lower not in except -%}\n            {% do include_cols.append(col.column) %}\n        {%- endif %}\n    {%- endfor %}\n\n    {{ return(include_cols) }}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_utils._is_relation", "macro.dbt_utils._is_ephemeral"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720537837.1057203, "supported_languages": null}, "macro.dbt_utils.get_query_results_as_dict": {"name": "get_query_results_as_dict", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\sql\\get_query_results_as_dict.sql", "original_file_path": "macros\\sql\\get_query_results_as_dict.sql", "unique_id": "macro.dbt_utils.get_query_results_as_dict", "macro_sql": "{% macro get_query_results_as_dict(query) %}\n    {{ return(adapter.dispatch('get_query_results_as_dict', 'dbt_utils')(query)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__get_query_results_as_dict"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720537837.1177313, "supported_languages": null}, "macro.dbt_utils.default__get_query_results_as_dict": {"name": "default__get_query_results_as_dict", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\sql\\get_query_results_as_dict.sql", "original_file_path": "macros\\sql\\get_query_results_as_dict.sql", "unique_id": "macro.dbt_utils.default__get_query_results_as_dict", "macro_sql": "{% macro default__get_query_results_as_dict(query) %}\n\n{# This macro returns a dictionary of the form {column_name: (tuple_of_results)} #}\n\n    {%- call statement('get_query_results', fetch_result=True,auto_begin=false) -%}\n\n        {{ query }}\n\n    {%- endcall -%}\n\n    {% set sql_results={} %}\n\n    {%- if execute -%}\n        {% set sql_results_table = load_result('get_query_results').table.columns %}\n        {% for column_name, column in sql_results_table.items() %}\n            {% do sql_results.update({column_name: column.values()}) %}\n        {% endfor %}\n    {%- endif -%}\n\n    {{ return(sql_results) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720537837.1182907, "supported_languages": null}, "macro.dbt_utils.get_relations_by_pattern": {"name": "get_relations_by_pattern", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\sql\\get_relations_by_pattern.sql", "original_file_path": "macros\\sql\\get_relations_by_pattern.sql", "unique_id": "macro.dbt_utils.get_relations_by_pattern", "macro_sql": "{% macro get_relations_by_pattern(schema_pattern, table_pattern, exclude='', database=target.database) %}\n    {{ return(adapter.dispatch('get_relations_by_pattern', 'dbt_utils')(schema_pattern, table_pattern, exclude, database)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__get_relations_by_pattern"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720537837.1182907, "supported_languages": null}, "macro.dbt_utils.default__get_relations_by_pattern": {"name": "default__get_relations_by_pattern", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\sql\\get_relations_by_pattern.sql", "original_file_path": "macros\\sql\\get_relations_by_pattern.sql", "unique_id": "macro.dbt_utils.default__get_relations_by_pattern", "macro_sql": "{% macro default__get_relations_by_pattern(schema_pattern, table_pattern, exclude='', database=target.database) %}\n\n    {%- call statement('get_tables', fetch_result=True) %}\n\n      {{ dbt_utils.get_tables_by_pattern_sql(schema_pattern, table_pattern, exclude, database) }}\n\n    {%- endcall -%}\n\n    {%- set table_list = load_result('get_tables') -%}\n\n    {%- if table_list and table_list['table'] -%}\n        {%- set tbl_relations = [] -%}\n        {%- for row in table_list['table'] -%}\n            {%- set tbl_relation = api.Relation.create(\n                database=database,\n                schema=row.table_schema,\n                identifier=row.table_name,\n                type=row.table_type\n            ) -%}\n            {%- do tbl_relations.append(tbl_relation) -%}\n        {%- endfor -%}\n\n        {{ return(tbl_relations) }}\n    {%- else -%}\n        {{ return([]) }}\n    {%- endif -%}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt_utils.get_tables_by_pattern_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720537837.1182907, "supported_languages": null}, "macro.dbt_utils.get_relations_by_prefix": {"name": "get_relations_by_prefix", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\sql\\get_relations_by_prefix.sql", "original_file_path": "macros\\sql\\get_relations_by_prefix.sql", "unique_id": "macro.dbt_utils.get_relations_by_prefix", "macro_sql": "{% macro get_relations_by_prefix(schema, prefix, exclude='', database=target.database) %}\n    {{ return(adapter.dispatch('get_relations_by_prefix', 'dbt_utils')(schema, prefix, exclude, database)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__get_relations_by_prefix"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720537837.1182907, "supported_languages": null}, "macro.dbt_utils.default__get_relations_by_prefix": {"name": "default__get_relations_by_prefix", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\sql\\get_relations_by_prefix.sql", "original_file_path": "macros\\sql\\get_relations_by_prefix.sql", "unique_id": "macro.dbt_utils.default__get_relations_by_prefix", "macro_sql": "{% macro default__get_relations_by_prefix(schema, prefix, exclude='', database=target.database) %}\n\n    {%- call statement('get_tables', fetch_result=True) %}\n\n      {{ dbt_utils.get_tables_by_prefix_sql(schema, prefix, exclude, database) }}\n\n    {%- endcall -%}\n\n    {%- set table_list = load_result('get_tables') -%}\n\n    {%- if table_list and table_list['table'] -%}\n        {%- set tbl_relations = [] -%}\n        {%- for row in table_list['table'] -%}\n            {%- set tbl_relation = api.Relation.create(\n                database=database,\n                schema=row.table_schema,\n                identifier=row.table_name,\n                type=row.table_type\n            ) -%}\n            {%- do tbl_relations.append(tbl_relation) -%}\n        {%- endfor -%}\n\n        {{ return(tbl_relations) }}\n    {%- else -%}\n        {{ return([]) }}\n    {%- endif -%}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt_utils.get_tables_by_prefix_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720537837.128302, "supported_languages": null}, "macro.dbt_utils.get_single_value": {"name": "get_single_value", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\sql\\get_single_value.sql", "original_file_path": "macros\\sql\\get_single_value.sql", "unique_id": "macro.dbt_utils.get_single_value", "macro_sql": "{% macro get_single_value(query, default=none) %}\n    {{ return(adapter.dispatch('get_single_value', 'dbt_utils')(query, default)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__get_single_value"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720537837.128302, "supported_languages": null}, "macro.dbt_utils.default__get_single_value": {"name": "default__get_single_value", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\sql\\get_single_value.sql", "original_file_path": "macros\\sql\\get_single_value.sql", "unique_id": "macro.dbt_utils.default__get_single_value", "macro_sql": "{% macro default__get_single_value(query, default) %}\n\n{# This macro returns the (0, 0) record in a query, i.e. the first row of the first column #}\n\n    {%- call statement('get_query_result', fetch_result=True, auto_begin=false) -%}\n\n        {{ query }}\n\n    {%- endcall -%}\n\n    {%- if execute -%}\n\n        {% set r = load_result('get_query_result').table.columns[0].values() %}\n        {% if r | length == 0 %}\n            {% do print('Query `' ~ query ~ '` returned no rows. Using the default value: ' ~ default) %}\n            {% set sql_result = default %}\n        {% else %}\n            {% set sql_result = r[0] %}\n        {% endif %}\n        \n    {%- else -%}\n    \n        {% set sql_result = default %}\n    \n    {%- endif -%}\n\n    {% do return(sql_result) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720537837.128302, "supported_languages": null}, "macro.dbt_utils.get_tables_by_pattern_sql": {"name": "get_tables_by_pattern_sql", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\sql\\get_tables_by_pattern_sql.sql", "original_file_path": "macros\\sql\\get_tables_by_pattern_sql.sql", "unique_id": "macro.dbt_utils.get_tables_by_pattern_sql", "macro_sql": "{% macro get_tables_by_pattern_sql(schema_pattern, table_pattern, exclude='', database=target.database) %}\n    {{ return(adapter.dispatch('get_tables_by_pattern_sql', 'dbt_utils')\n        (schema_pattern, table_pattern, exclude, database)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.tsql_utils.sqlserver__get_tables_by_pattern_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720537837.132811, "supported_languages": null}, "macro.dbt_utils.default__get_tables_by_pattern_sql": {"name": "default__get_tables_by_pattern_sql", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\sql\\get_tables_by_pattern_sql.sql", "original_file_path": "macros\\sql\\get_tables_by_pattern_sql.sql", "unique_id": "macro.dbt_utils.default__get_tables_by_pattern_sql", "macro_sql": "{% macro default__get_tables_by_pattern_sql(schema_pattern, table_pattern, exclude='', database=target.database) %}\n\n        select distinct\n            table_schema as {{ adapter.quote('table_schema') }},\n            table_name as {{ adapter.quote('table_name') }},\n            {{ dbt_utils.get_table_types_sql() }}\n        from {{ database }}.information_schema.tables\n        where table_schema ilike '{{ schema_pattern }}'\n        and table_name ilike '{{ table_pattern }}'\n        and table_name not ilike '{{ exclude }}'\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.get_table_types_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720537837.132811, "supported_languages": null}, "macro.dbt_utils.bigquery__get_tables_by_pattern_sql": {"name": "bigquery__get_tables_by_pattern_sql", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\sql\\get_tables_by_pattern_sql.sql", "original_file_path": "macros\\sql\\get_tables_by_pattern_sql.sql", "unique_id": "macro.dbt_utils.bigquery__get_tables_by_pattern_sql", "macro_sql": "{% macro bigquery__get_tables_by_pattern_sql(schema_pattern, table_pattern, exclude='', database=target.database) %}\n\n    {% if '%' in schema_pattern %}\n        {% set schemata=dbt_utils._bigquery__get_matching_schemata(schema_pattern, database) %}\n    {% else %}\n        {% set schemata=[schema_pattern] %}\n    {% endif %}\n\n    {% set sql %}\n        {% for schema in schemata %}\n            select distinct\n                table_schema,\n                table_name,\n                {{ dbt_utils.get_table_types_sql() }}\n\n            from {{ adapter.quote(database) }}.{{ schema }}.INFORMATION_SCHEMA.TABLES\n            where lower(table_name) like lower ('{{ table_pattern }}')\n                and lower(table_name) not like lower ('{{ exclude }}')\n\n            {% if not loop.last %} union all {% endif %}\n\n        {% endfor %}\n    {% endset %}\n\n    {{ return(sql) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils._bigquery__get_matching_schemata", "macro.dbt_utils.get_table_types_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720537837.132811, "supported_languages": null}, "macro.dbt_utils._bigquery__get_matching_schemata": {"name": "_bigquery__get_matching_schemata", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\sql\\get_tables_by_pattern_sql.sql", "original_file_path": "macros\\sql\\get_tables_by_pattern_sql.sql", "unique_id": "macro.dbt_utils._bigquery__get_matching_schemata", "macro_sql": "{% macro _bigquery__get_matching_schemata(schema_pattern, database) %}\n    {% if execute %}\n\n        {% set sql %}\n        select schema_name from {{ adapter.quote(database) }}.INFORMATION_SCHEMA.SCHEMATA\n        where lower(schema_name) like lower('{{ schema_pattern }}')\n        {% endset %}\n\n        {% set results=run_query(sql) %}\n\n        {% set schemata=results.columns['schema_name'].values() %}\n\n        {{ return(schemata) }}\n\n    {% else %}\n\n        {{ return([]) }}\n\n    {% endif %}\n\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720537837.132811, "supported_languages": null}, "macro.dbt_utils.get_tables_by_prefix_sql": {"name": "get_tables_by_prefix_sql", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\sql\\get_tables_by_prefix_sql.sql", "original_file_path": "macros\\sql\\get_tables_by_prefix_sql.sql", "unique_id": "macro.dbt_utils.get_tables_by_prefix_sql", "macro_sql": "{% macro get_tables_by_prefix_sql(schema, prefix, exclude='', database=target.database) %}\n    {{ return(adapter.dispatch('get_tables_by_prefix_sql', 'dbt_utils')(schema, prefix, exclude, database)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__get_tables_by_prefix_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720537837.132811, "supported_languages": null}, "macro.dbt_utils.default__get_tables_by_prefix_sql": {"name": "default__get_tables_by_prefix_sql", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\sql\\get_tables_by_prefix_sql.sql", "original_file_path": "macros\\sql\\get_tables_by_prefix_sql.sql", "unique_id": "macro.dbt_utils.default__get_tables_by_prefix_sql", "macro_sql": "{% macro default__get_tables_by_prefix_sql(schema, prefix, exclude='', database=target.database) %}\n\n    {{ dbt_utils.get_tables_by_pattern_sql(\n        schema_pattern = schema,\n        table_pattern = prefix ~ '%',\n        exclude = exclude,\n        database = database\n    ) }}\n    \n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.get_tables_by_pattern_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720537837.132811, "supported_languages": null}, "macro.dbt_utils.get_table_types_sql": {"name": "get_table_types_sql", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\sql\\get_table_types_sql.sql", "original_file_path": "macros\\sql\\get_table_types_sql.sql", "unique_id": "macro.dbt_utils.get_table_types_sql", "macro_sql": "{%- macro get_table_types_sql() -%}\n  {{ return(adapter.dispatch('get_table_types_sql', 'dbt_utils')()) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt_utils.default__get_table_types_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720537837.132811, "supported_languages": null}, "macro.dbt_utils.default__get_table_types_sql": {"name": "default__get_table_types_sql", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\sql\\get_table_types_sql.sql", "original_file_path": "macros\\sql\\get_table_types_sql.sql", "unique_id": "macro.dbt_utils.default__get_table_types_sql", "macro_sql": "{% macro default__get_table_types_sql() %}\n            case table_type\n                when 'BASE TABLE' then 'table'\n                when 'EXTERNAL TABLE' then 'external'\n                when 'MATERIALIZED VIEW' then 'materializedview'\n                else lower(table_type)\n            end as {{ adapter.quote('table_type') }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720537837.132811, "supported_languages": null}, "macro.dbt_utils.postgres__get_table_types_sql": {"name": "postgres__get_table_types_sql", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\sql\\get_table_types_sql.sql", "original_file_path": "macros\\sql\\get_table_types_sql.sql", "unique_id": "macro.dbt_utils.postgres__get_table_types_sql", "macro_sql": "{% macro postgres__get_table_types_sql() %}\n            case table_type\n                when 'BASE TABLE' then 'table'\n                when 'FOREIGN' then 'external'\n                when 'MATERIALIZED VIEW' then 'materializedview'\n                else lower(table_type)\n            end as {{ adapter.quote('table_type') }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720537837.132811, "supported_languages": null}, "macro.dbt_utils.group_by": {"name": "group_by", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\sql\\groupby.sql", "original_file_path": "macros\\sql\\groupby.sql", "unique_id": "macro.dbt_utils.group_by", "macro_sql": "{%- macro group_by(n) -%}\n    {{ return(adapter.dispatch('group_by', 'dbt_utils')(n)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__group_by"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720537837.132811, "supported_languages": null}, "macro.dbt_utils.default__group_by": {"name": "default__group_by", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\sql\\groupby.sql", "original_file_path": "macros\\sql\\groupby.sql", "unique_id": "macro.dbt_utils.default__group_by", "macro_sql": "\n\n{%- macro default__group_by(n) -%}\n\n  group by {% for i in range(1, n + 1) -%}\n      {{ i }}{{ ',' if not loop.last }}   \n   {%- endfor -%}\n\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720537837.132811, "supported_languages": null}, "macro.dbt_utils.degrees_to_radians": {"name": "degrees_to_radians", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\sql\\haversine_distance.sql", "original_file_path": "macros\\sql\\haversine_distance.sql", "unique_id": "macro.dbt_utils.degrees_to_radians", "macro_sql": "{% macro degrees_to_radians(degrees) -%}\n    acos(-1) * {{degrees}} / 180\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720537837.1478264, "supported_languages": null}, "macro.dbt_utils.haversine_distance": {"name": "haversine_distance", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\sql\\haversine_distance.sql", "original_file_path": "macros\\sql\\haversine_distance.sql", "unique_id": "macro.dbt_utils.haversine_distance", "macro_sql": "{% macro haversine_distance(lat1, lon1, lat2, lon2, unit='mi') -%}\n    {{ return(adapter.dispatch('haversine_distance', 'dbt_utils')(lat1,lon1,lat2,lon2,unit)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__haversine_distance"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720537837.1478264, "supported_languages": null}, "macro.dbt_utils.default__haversine_distance": {"name": "default__haversine_distance", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\sql\\haversine_distance.sql", "original_file_path": "macros\\sql\\haversine_distance.sql", "unique_id": "macro.dbt_utils.default__haversine_distance", "macro_sql": "{% macro default__haversine_distance(lat1, lon1, lat2, lon2, unit='mi') -%}\n{%- if unit == 'mi' %}\n    {% set conversion_rate = 1 %}\n{% elif unit == 'km' %}\n    {% set conversion_rate = 1.60934 %}\n{% else %}\n    {{ exceptions.raise_compiler_error(\"unit input must be one of 'mi' or 'km'. Got \" ~ unit) }}\n{% endif %}\n\n    2 * 3961 * asin(sqrt(power((sin(radians(({{ lat2 }} - {{ lat1 }}) / 2))), 2) +\n    cos(radians({{lat1}})) * cos(radians({{lat2}})) *\n    power((sin(radians(({{ lon2 }} - {{ lon1 }}) / 2))), 2))) * {{ conversion_rate }}\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720537837.1478264, "supported_languages": null}, "macro.dbt_utils.bigquery__haversine_distance": {"name": "bigquery__haversine_distance", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\sql\\haversine_distance.sql", "original_file_path": "macros\\sql\\haversine_distance.sql", "unique_id": "macro.dbt_utils.bigquery__haversine_distance", "macro_sql": "{% macro bigquery__haversine_distance(lat1, lon1, lat2, lon2, unit='mi') -%}\n{% set radians_lat1 = dbt_utils.degrees_to_radians(lat1) %}\n{% set radians_lat2 = dbt_utils.degrees_to_radians(lat2) %}\n{% set radians_lon1 = dbt_utils.degrees_to_radians(lon1) %}\n{% set radians_lon2 = dbt_utils.degrees_to_radians(lon2) %}\n{%- if unit == 'mi' %}\n    {% set conversion_rate = 1 %}\n{% elif unit == 'km' %}\n    {% set conversion_rate = 1.60934 %}\n{% else %}\n    {{ exceptions.raise_compiler_error(\"unit input must be one of 'mi' or 'km'. Got \" ~ unit) }}\n{% endif %}\n    2 * 3961 * asin(sqrt(power(sin(({{ radians_lat2 }} - {{ radians_lat1 }}) / 2), 2) +\n    cos({{ radians_lat1 }}) * cos({{ radians_lat2 }}) *\n    power(sin(({{ radians_lon2 }} - {{ radians_lon1 }}) / 2), 2))) * {{ conversion_rate }}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.degrees_to_radians"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720537837.1478264, "supported_languages": null}, "macro.dbt_utils.nullcheck": {"name": "nullcheck", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\sql\\nullcheck.sql", "original_file_path": "macros\\sql\\nullcheck.sql", "unique_id": "macro.dbt_utils.nullcheck", "macro_sql": "{% macro nullcheck(cols) %}\n    {{ return(adapter.dispatch('nullcheck', 'dbt_utils')(cols)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__nullcheck"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720537837.1478264, "supported_languages": null}, "macro.dbt_utils.default__nullcheck": {"name": "default__nullcheck", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\sql\\nullcheck.sql", "original_file_path": "macros\\sql\\nullcheck.sql", "unique_id": "macro.dbt_utils.default__nullcheck", "macro_sql": "{% macro default__nullcheck(cols) %}\n{%- for col in cols %}\n\n    {% if col.is_string() -%}\n\n    nullif({{col.name}},'') as {{col.name}}\n\n    {%- else -%}\n\n    {{col.name}}\n\n    {%- endif -%}\n\n{%- if not loop.last -%} , {%- endif -%}\n\n{%- endfor -%}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720537837.1478264, "supported_languages": null}, "macro.dbt_utils.nullcheck_table": {"name": "nullcheck_table", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\sql\\nullcheck_table.sql", "original_file_path": "macros\\sql\\nullcheck_table.sql", "unique_id": "macro.dbt_utils.nullcheck_table", "macro_sql": "{% macro nullcheck_table(relation) %}\n    {{ return(adapter.dispatch('nullcheck_table', 'dbt_utils')(relation)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__nullcheck_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720537837.1478264, "supported_languages": null}, "macro.dbt_utils.default__nullcheck_table": {"name": "default__nullcheck_table", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\sql\\nullcheck_table.sql", "original_file_path": "macros\\sql\\nullcheck_table.sql", "unique_id": "macro.dbt_utils.default__nullcheck_table", "macro_sql": "{% macro default__nullcheck_table(relation) %}\n\n  {%- do dbt_utils._is_relation(relation, 'nullcheck_table') -%}\n  {%- do dbt_utils._is_ephemeral(relation, 'nullcheck_table') -%}\n  {% set cols = adapter.get_columns_in_relation(relation) %}\n\n  select {{ dbt_utils.nullcheck(cols) }}\n  from {{relation}}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils._is_relation", "macro.dbt_utils._is_ephemeral", "macro.dbt_utils.nullcheck"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720537837.1478264, "supported_languages": null}, "macro.dbt_utils.pivot": {"name": "pivot", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\sql\\pivot.sql", "original_file_path": "macros\\sql\\pivot.sql", "unique_id": "macro.dbt_utils.pivot", "macro_sql": "{% macro pivot(column,\n               values,\n               alias=True,\n               agg='sum',\n               cmp='=',\n               prefix='',\n               suffix='',\n               then_value=1,\n               else_value=0,\n               quote_identifiers=True,\n               distinct=False) %}\n    {{ return(adapter.dispatch('pivot', 'dbt_utils')(column, values, alias, agg, cmp, prefix, suffix, then_value, else_value, quote_identifiers, distinct)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__pivot"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720537837.1478264, "supported_languages": null}, "macro.dbt_utils.default__pivot": {"name": "default__pivot", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\sql\\pivot.sql", "original_file_path": "macros\\sql\\pivot.sql", "unique_id": "macro.dbt_utils.default__pivot", "macro_sql": "{% macro default__pivot(column,\n               values,\n               alias=True,\n               agg='sum',\n               cmp='=',\n               prefix='',\n               suffix='',\n               then_value=1,\n               else_value=0,\n               quote_identifiers=True,\n               distinct=False) %}\n  {% for value in values %}\n    {{ agg }}(\n      {% if distinct %} distinct {% endif %}\n      case\n      when {{ column }} {{ cmp }} '{{ dbt.escape_single_quotes(value) }}'\n        then {{ then_value }}\n      else {{ else_value }}\n      end\n    )\n    {% if alias %}\n      {% if quote_identifiers %}\n            as {{ adapter.quote(prefix ~ value ~ suffix) }}\n      {% else %}\n        as {{ dbt_utils.slugify(prefix ~ value ~ suffix) }}\n      {% endif %}\n    {% endif %}\n    {% if not loop.last %},{% endif %}\n  {% endfor %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.escape_single_quotes", "macro.dbt_utils.slugify"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720537837.1628377, "supported_languages": null}, "macro.dbt_utils.safe_add": {"name": "safe_add", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\sql\\safe_add.sql", "original_file_path": "macros\\sql\\safe_add.sql", "unique_id": "macro.dbt_utils.safe_add", "macro_sql": "{%- macro safe_add(field_list) -%}\n    {{ return(adapter.dispatch('safe_add', 'dbt_utils')(field_list)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__safe_add"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720537837.1628377, "supported_languages": null}, "macro.dbt_utils.default__safe_add": {"name": "default__safe_add", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\sql\\safe_add.sql", "original_file_path": "macros\\sql\\safe_add.sql", "unique_id": "macro.dbt_utils.default__safe_add", "macro_sql": "\n\n{%- macro default__safe_add(field_list) -%}\n\n{%- if field_list is not iterable or field_list is string or field_list is mapping -%}\n\n{%- set error_message = '\nWarning: the `safe_add` macro now takes a single list argument instead of \\\nstring arguments. The {}.{} model triggered this warning. \\\n'.format(model.package_name, model.name) -%}\n\n{%- do exceptions.warn(error_message) -%}\n\n{%- endif -%}\n\n{% set fields = [] %}\n\n{%- for field in field_list -%}\n\n    {% do fields.append(\"coalesce(\" ~ field ~ \", 0)\") %}\n\n{%- endfor -%}\n\n{{ fields|join(' +\\n  ') }}\n\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720537837.1628377, "supported_languages": null}, "macro.dbt_utils.safe_divide": {"name": "safe_divide", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\sql\\safe_divide.sql", "original_file_path": "macros\\sql\\safe_divide.sql", "unique_id": "macro.dbt_utils.safe_divide", "macro_sql": "{% macro safe_divide(numerator, denominator) -%}\n  {{ return(adapter.dispatch('safe_divide', 'dbt_utils')(numerator, denominator)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__safe_divide"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720537837.1628377, "supported_languages": null}, "macro.dbt_utils.default__safe_divide": {"name": "default__safe_divide", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\sql\\safe_divide.sql", "original_file_path": "macros\\sql\\safe_divide.sql", "unique_id": "macro.dbt_utils.default__safe_divide", "macro_sql": "{% macro default__safe_divide(numerator, denominator) %}\n    ( {{ numerator }} ) / nullif( ( {{ denominator }} ), 0)\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720537837.1628377, "supported_languages": null}, "macro.dbt_utils.star": {"name": "star", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\sql\\star.sql", "original_file_path": "macros\\sql\\star.sql", "unique_id": "macro.dbt_utils.star", "macro_sql": "{% macro star(from, relation_alias=False, except=[], prefix='', suffix='', quote_identifiers=True) -%}\r\n    {{ return(adapter.dispatch('star', 'dbt_utils')(from, relation_alias, except, prefix, suffix, quote_identifiers)) }}\r\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__star"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720537837.1628377, "supported_languages": null}, "macro.dbt_utils.default__star": {"name": "default__star", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\sql\\star.sql", "original_file_path": "macros\\sql\\star.sql", "unique_id": "macro.dbt_utils.default__star", "macro_sql": "{% macro default__star(from, relation_alias=False, except=[], prefix='', suffix='', quote_identifiers=True) -%}\r\n    {%- do dbt_utils._is_relation(from, 'star') -%}\r\n    {%- do dbt_utils._is_ephemeral(from, 'star') -%}\r\n\r\n    {#-- Prevent querying of db in parsing mode. This works because this macro does not create any new refs. #}\r\n    {%- if not execute -%}\r\n        {% do return('*') %}\r\n    {%- endif -%}\r\n\r\n    {% set cols = dbt_utils.get_filtered_columns_in_relation(from, except) %}\r\n\r\n    {%- if cols|length <= 0 -%}\r\n        {% if flags.WHICH == 'compile' %}\r\n            {% set response %}\r\n*\r\n/* No columns were returned. Maybe the relation doesn't exist yet \r\nor all columns were excluded. This star is only output during  \r\ndbt compile, and exists to keep SQLFluff happy. */\r\n            {% endset %}\r\n            {% do return(response) %}\r\n        {% else %}\r\n            {% do return(\"/* no columns returned from star() macro */\") %}\r\n        {% endif %}\r\n    {%- else -%}\r\n        {%- for col in cols %}\r\n            {%- if relation_alias %}{{ relation_alias }}.{% else %}{%- endif -%}\r\n                {%- if quote_identifiers -%}\r\n                    {{ adapter.quote(col)|trim }} {%- if prefix!='' or suffix!='' %} as {{ adapter.quote(prefix ~ col ~ suffix)|trim }} {%- endif -%}\r\n                {%- else -%}\r\n                    {{ col|trim }} {%- if prefix!='' or suffix!='' %} as {{ (prefix ~ col ~ suffix)|trim }} {%- endif -%}\r\n                {% endif %}\r\n            {%- if not loop.last %},{{ '\\n  ' }}{%- endif -%}\r\n        {%- endfor -%}\r\n    {% endif %}\r\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_utils._is_relation", "macro.dbt_utils._is_ephemeral", "macro.dbt_utils.get_filtered_columns_in_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720537837.1628377, "supported_languages": null}, "macro.dbt_utils.surrogate_key": {"name": "surrogate_key", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\sql\\surrogate_key.sql", "original_file_path": "macros\\sql\\surrogate_key.sql", "unique_id": "macro.dbt_utils.surrogate_key", "macro_sql": "{%- macro surrogate_key(field_list) -%}\n    {% set frustrating_jinja_feature = varargs %}\n    {{ return(adapter.dispatch('surrogate_key', 'dbt_utils')(field_list, *varargs)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__surrogate_key"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720537837.1628377, "supported_languages": null}, "macro.dbt_utils.default__surrogate_key": {"name": "default__surrogate_key", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\sql\\surrogate_key.sql", "original_file_path": "macros\\sql\\surrogate_key.sql", "unique_id": "macro.dbt_utils.default__surrogate_key", "macro_sql": "\n\n{%- macro default__surrogate_key(field_list) -%}\n\n{%- set error_message = '\nWarning: `dbt_utils.surrogate_key` has been replaced by \\\n`dbt_utils.generate_surrogate_key`. The new macro treats null values \\\ndifferently to empty strings. To restore the behaviour of the original \\\nmacro, add a global variable in dbt_project.yml called \\\n`surrogate_key_treat_nulls_as_empty_strings` to your \\\ndbt_project.yml file with a value of True. \\\nThe {}.{} model triggered this warning. \\\n'.format(model.package_name, model.name) -%}\n\n{%- do exceptions.raise_compiler_error(error_message) -%}\n\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720537837.1778958, "supported_languages": null}, "macro.dbt_utils.union_relations": {"name": "union_relations", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\sql\\union.sql", "original_file_path": "macros\\sql\\union.sql", "unique_id": "macro.dbt_utils.union_relations", "macro_sql": "{%- macro union_relations(relations, column_override=none, include=[], exclude=[], source_column_name='_dbt_source_relation', where=none) -%}\n    {{ return(adapter.dispatch('union_relations', 'dbt_utils')(relations, column_override, include, exclude, source_column_name, where)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__union_relations"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720537837.178908, "supported_languages": null}, "macro.dbt_utils.default__union_relations": {"name": "default__union_relations", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\sql\\union.sql", "original_file_path": "macros\\sql\\union.sql", "unique_id": "macro.dbt_utils.default__union_relations", "macro_sql": "\n\n{%- macro default__union_relations(relations, column_override=none, include=[], exclude=[], source_column_name='_dbt_source_relation', where=none) -%}\n\n    {%- if exclude and include -%}\n        {{ exceptions.raise_compiler_error(\"Both an exclude and include list were provided to the `union` macro. Only one is allowed\") }}\n    {%- endif -%}\n\n    {#-- Prevent querying of db in parsing mode. This works because this macro does not create any new refs. -#}\n    {%- if not execute %}\n        {{ return('') }}\n    {% endif -%}\n\n    {%- set column_override = column_override if column_override is not none else {} -%}\n\n    {%- set relation_columns = {} -%}\n    {%- set column_superset = {} -%}\n    {%- set all_excludes = [] -%}\n    {%- set all_includes = [] -%}\n\n    {%- if exclude -%}\n        {%- for exc in exclude -%}\n            {%- do all_excludes.append(exc | lower) -%}\n        {%- endfor -%}\n    {%- endif -%}\n\n    {%- if include -%}\n        {%- for inc in include -%}\n            {%- do all_includes.append(inc | lower) -%}\n        {%- endfor -%}\n    {%- endif -%}\n\n    {%- for relation in relations -%}\n\n        {%- do relation_columns.update({relation: []}) -%}\n\n        {%- do dbt_utils._is_relation(relation, 'union_relations') -%}\n        {%- do dbt_utils._is_ephemeral(relation, 'union_relations') -%}\n        {%- set cols = adapter.get_columns_in_relation(relation) -%}\n        {%- for col in cols -%}\n\n        {#- If an exclude list was provided and the column is in the list, do nothing -#}\n        {%- if exclude and col.column | lower in all_excludes -%}\n\n        {#- If an include list was provided and the column is not in the list, do nothing -#}\n        {%- elif include and col.column | lower not in all_includes -%}\n\n        {#- Otherwise add the column to the column superset -#}\n        {%- else -%}\n\n            {#- update the list of columns in this relation -#}\n            {%- do relation_columns[relation].append(col.column) -%}\n\n            {%- if col.column in column_superset -%}\n\n                {%- set stored = column_superset[col.column] -%}\n                {%- if col.is_string() and stored.is_string() and col.string_size() > stored.string_size() -%}\n\n                    {%- do column_superset.update({col.column: col}) -%}\n\n                {%- endif %}\n\n            {%- else -%}\n\n                {%- do column_superset.update({col.column: col}) -%}\n\n            {%- endif -%}\n\n        {%- endif -%}\n\n        {%- endfor -%}\n    {%- endfor -%}\n\n    {%- set ordered_column_names = column_superset.keys() -%}\n    {%- set dbt_command = flags.WHICH -%}\n\n\n    {% if dbt_command in ['run', 'build'] %}\n    {% if (include | length > 0 or exclude | length > 0) and not column_superset.keys() %}\n        {%- set relations_string -%}\n            {%- for relation in relations -%}\n                {{ relation.name }}\n            {%- if not loop.last %}, {% endif -%}\n            {%- endfor -%}\n        {%- endset -%}\n\n        {%- set error_message -%}\n            There were no columns found to union for relations {{ relations_string }}\n        {%- endset -%}\n\n        {{ exceptions.raise_compiler_error(error_message) }}\n    {%- endif -%}\n    {%- endif -%}\n\n    {%- for relation in relations %}\n\n        (\n            select\n\n                {%- if source_column_name is not none %}\n                cast({{ dbt.string_literal(relation) }} as {{ dbt.type_string() }}) as {{ source_column_name }},\n                {%- endif %}\n\n                {% for col_name in ordered_column_names -%}\n\n                    {%- set col = column_superset[col_name] %}\n                    {%- set col_type = column_override.get(col.column, col.data_type) %}\n                    {%- set col_name = adapter.quote(col_name) if col_name in relation_columns[relation] else 'null' %}\n                    cast({{ col_name }} as {{ col_type }}) as {{ col.quoted }} {% if not loop.last %},{% endif -%}\n\n                {%- endfor %}\n\n            from {{ relation }}\n\n            {% if where -%}\n            where {{ where }}\n            {%- endif %}\n        )\n\n        {% if not loop.last -%}\n            union all\n        {% endif -%}\n\n    {%- endfor -%}\n\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt_utils._is_relation", "macro.dbt_utils._is_ephemeral", "macro.dbt.string_literal", "macro.dbt.type_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720537837.193007, "supported_languages": null}, "macro.dbt_utils.unpivot": {"name": "unpivot", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\sql\\unpivot.sql", "original_file_path": "macros\\sql\\unpivot.sql", "unique_id": "macro.dbt_utils.unpivot", "macro_sql": "{% macro unpivot(relation=none, cast_to='varchar', exclude=none, remove=none, field_name='field_name', value_name='value') -%}\n    {{ return(adapter.dispatch('unpivot', 'dbt_utils')(relation, cast_to, exclude, remove, field_name, value_name)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__unpivot"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720537837.193007, "supported_languages": null}, "macro.dbt_utils.default__unpivot": {"name": "default__unpivot", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\sql\\unpivot.sql", "original_file_path": "macros\\sql\\unpivot.sql", "unique_id": "macro.dbt_utils.default__unpivot", "macro_sql": "{% macro default__unpivot(relation=none, cast_to='varchar', exclude=none, remove=none, field_name='field_name', value_name='value') -%}\n\n    {% if not relation %}\n        {{ exceptions.raise_compiler_error(\"Error: argument `relation` is required for `unpivot` macro.\") }}\n    {% endif %}\n\n  {%- set exclude = exclude if exclude is not none else [] %}\n  {%- set remove = remove if remove is not none else [] %}\n\n  {%- set include_cols = [] %}\n\n  {%- set table_columns = {} %}\n\n  {%- do table_columns.update({relation: []}) %}\n\n  {%- do dbt_utils._is_relation(relation, 'unpivot') -%}\n  {%- do dbt_utils._is_ephemeral(relation, 'unpivot') -%}\n  {%- set cols = adapter.get_columns_in_relation(relation) %}\n\n  {%- for col in cols -%}\n    {%- if col.column.lower() not in remove|map('lower') and col.column.lower() not in exclude|map('lower') -%}\n      {% do include_cols.append(col) %}\n    {%- endif %}\n  {%- endfor %}\n\n\n  {%- for col in include_cols -%}\n    select\n      {%- for exclude_col in exclude %}\n        {{ exclude_col }},\n      {%- endfor %}\n\n      cast('{{ col.column }}' as {{ dbt.type_string() }}) as {{ field_name }},\n      cast(  {% if col.data_type == 'boolean' %}\n           {{ dbt.cast_bool_to_text(col.column) }}\n             {% else %}\n           {{ col.column }}\n             {% endif %}\n           as {{ cast_to }}) as {{ value_name }}\n\n    from {{ relation }}\n\n    {% if not loop.last -%}\n      union all\n    {% endif -%}\n  {%- endfor -%}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_utils._is_relation", "macro.dbt_utils._is_ephemeral", "macro.dbt.type_string", "macro.dbt.cast_bool_to_text"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720537837.193007, "supported_languages": null}, "macro.dbt_utils.width_bucket": {"name": "width_bucket", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\sql\\width_bucket.sql", "original_file_path": "macros\\sql\\width_bucket.sql", "unique_id": "macro.dbt_utils.width_bucket", "macro_sql": "{% macro width_bucket(expr, min_value, max_value, num_buckets) %}\n  {{ return(adapter.dispatch('width_bucket', 'dbt_utils') (expr, min_value, max_value, num_buckets)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.tsql_utils.sqlserver__width_bucket"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720537837.193007, "supported_languages": null}, "macro.dbt_utils.default__width_bucket": {"name": "default__width_bucket", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\sql\\width_bucket.sql", "original_file_path": "macros\\sql\\width_bucket.sql", "unique_id": "macro.dbt_utils.default__width_bucket", "macro_sql": "{% macro default__width_bucket(expr, min_value, max_value, num_buckets) -%}\n\n    {% set bin_size -%}\n    (( {{ max_value }} - {{ min_value }} ) / {{ num_buckets }} )\n    {%- endset %}\n    (\n        -- to break ties when the amount is eaxtly at the bucket egde\n        case\n            when\n                mod(\n                    {{ dbt.safe_cast(expr, dbt.type_numeric() ) }},\n                    {{ dbt.safe_cast(bin_size, dbt.type_numeric() ) }}\n                ) = 0\n            then 1\n            else 0\n        end\n    ) +\n      -- Anything over max_value goes the N+1 bucket\n    least(\n        ceil(\n            ({{ expr }} - {{ min_value }})/{{ bin_size }}\n        ),\n        {{ num_buckets }} + 1\n    )\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.safe_cast", "macro.dbt.type_numeric"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720537837.2081099, "supported_languages": null}, "macro.dbt_utils.redshift__width_bucket": {"name": "redshift__width_bucket", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\sql\\width_bucket.sql", "original_file_path": "macros\\sql\\width_bucket.sql", "unique_id": "macro.dbt_utils.redshift__width_bucket", "macro_sql": "{% macro redshift__width_bucket(expr, min_value, max_value, num_buckets) -%}\n\n    {% set bin_size -%}\n    (( {{ max_value }} - {{ min_value }} ) / {{ num_buckets }} )\n    {%- endset %}\n    (\n        -- to break ties when the amount is exactly at the bucket edge\n        case\n            when\n                {{ dbt.safe_cast(expr, dbt.type_numeric() ) }} %\n                {{ dbt.safe_cast(bin_size, dbt.type_numeric() ) }}\n                 = 0\n            then 1\n            else 0\n        end\n    ) +\n      -- Anything over max_value goes the N+1 bucket\n    least(\n        ceil(\n            ({{ expr }} - {{ min_value }})/{{ bin_size }}\n        ),\n        {{ num_buckets }} + 1\n    )\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.safe_cast", "macro.dbt.type_numeric"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720537837.2081099, "supported_languages": null}, "macro.dbt_utils.snowflake__width_bucket": {"name": "snowflake__width_bucket", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\sql\\width_bucket.sql", "original_file_path": "macros\\sql\\width_bucket.sql", "unique_id": "macro.dbt_utils.snowflake__width_bucket", "macro_sql": "{% macro snowflake__width_bucket(expr, min_value, max_value, num_buckets) %}\n    width_bucket({{ expr }}, {{ min_value }}, {{ max_value }}, {{ num_buckets }} )\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720537837.2081099, "supported_languages": null}, "macro.dbt_utils.get_url_host": {"name": "get_url_host", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\web\\get_url_host.sql", "original_file_path": "macros\\web\\get_url_host.sql", "unique_id": "macro.dbt_utils.get_url_host", "macro_sql": "{% macro get_url_host(field) -%}\n    {{ return(adapter.dispatch('get_url_host', 'dbt_utils')(field)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__get_url_host"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720537837.2081099, "supported_languages": null}, "macro.dbt_utils.default__get_url_host": {"name": "default__get_url_host", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\web\\get_url_host.sql", "original_file_path": "macros\\web\\get_url_host.sql", "unique_id": "macro.dbt_utils.default__get_url_host", "macro_sql": "{% macro default__get_url_host(field) -%}\n\n{%- set parsed =\n    dbt.split_part(\n        dbt.split_part(\n            dbt.replace(\n                dbt.replace(\n                    dbt.replace(field, \"'android-app://'\", \"''\"\n                    ), \"'http://'\", \"''\"\n                ), \"'https://'\", \"''\"\n            ), \"'/'\", 1\n        ), \"'?'\", 1\n    )\n\n-%}\n\n\n    {{ dbt.safe_cast(\n        parsed,\n        dbt.type_string()\n        )}}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.split_part", "macro.dbt.replace", "macro.dbt.safe_cast", "macro.dbt.type_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720537837.2081099, "supported_languages": null}, "macro.dbt_utils.get_url_parameter": {"name": "get_url_parameter", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\web\\get_url_parameter.sql", "original_file_path": "macros\\web\\get_url_parameter.sql", "unique_id": "macro.dbt_utils.get_url_parameter", "macro_sql": "{% macro get_url_parameter(field, url_parameter) -%}\n    {{ return(adapter.dispatch('get_url_parameter', 'dbt_utils')(field, url_parameter)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__get_url_parameter"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720537837.2081099, "supported_languages": null}, "macro.dbt_utils.default__get_url_parameter": {"name": "default__get_url_parameter", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\web\\get_url_parameter.sql", "original_file_path": "macros\\web\\get_url_parameter.sql", "unique_id": "macro.dbt_utils.default__get_url_parameter", "macro_sql": "{% macro default__get_url_parameter(field, url_parameter) -%}\n\n{%- set formatted_url_parameter = \"'\" + url_parameter + \"='\" -%}\n\n{%- set split = dbt.split_part(dbt.split_part(field, formatted_url_parameter, 2), \"'&'\", 1) -%}\n\nnullif({{ split }},'')\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.split_part"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720537837.2081099, "supported_languages": null}, "macro.dbt_utils.get_url_path": {"name": "get_url_path", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\web\\get_url_path.sql", "original_file_path": "macros\\web\\get_url_path.sql", "unique_id": "macro.dbt_utils.get_url_path", "macro_sql": "{% macro get_url_path(field) -%}\n    {{ return(adapter.dispatch('get_url_path', 'dbt_utils')(field)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__get_url_path"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720537837.2081099, "supported_languages": null}, "macro.dbt_utils.default__get_url_path": {"name": "default__get_url_path", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros\\web\\get_url_path.sql", "original_file_path": "macros\\web\\get_url_path.sql", "unique_id": "macro.dbt_utils.default__get_url_path", "macro_sql": "{% macro default__get_url_path(field) -%}\n\n    {%- set stripped_url =\n        dbt.replace(\n            dbt.replace(field, \"'http://'\", \"''\"), \"'https://'\", \"''\")\n    -%}\n\n    {%- set first_slash_pos -%}\n        coalesce(\n            nullif({{ dbt.position(\"'/'\", stripped_url) }}, 0),\n            {{ dbt.position(\"'?'\", stripped_url) }} - 1\n            )\n    {%- endset -%}\n\n    {%- set parsed_path =\n        dbt.split_part(\n            dbt.right(\n                stripped_url,\n                dbt.length(stripped_url) ~ \"-\" ~ first_slash_pos\n                ),\n            \"'?'\", 1\n            )\n    -%}\n\n    {{ dbt.safe_cast(\n        parsed_path,\n        dbt.type_string()\n    )}}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.replace", "macro.dbt.position", "macro.dbt.split_part", "macro.dbt.right", "macro.dbt.length", "macro.dbt.safe_cast", "macro.dbt.type_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720537837.2081099, "supported_languages": null}, "macro.tsql_utils.sqlserver__compare_column_values": {"name": "sqlserver__compare_column_values", "resource_type": "macro", "package_name": "tsql_utils", "path": "macros\\dbt_audit_helper\\compare_column_values.sql", "original_file_path": "macros\\dbt_audit_helper\\compare_column_values.sql", "unique_id": "macro.tsql_utils.sqlserver__compare_column_values", "macro_sql": "{% macro sqlserver__compare_column_values(a_query, b_query, primary_key, column_to_compare) -%}\nwith a_query as (\n    {{ a_query }}\n),\n\nb_query as (\n    {{ b_query }}\n),\n\njoined as (\n    select\n        coalesce(a_query.{{ primary_key }}, b_query.{{ primary_key }}) as {{ primary_key }},\n        a_query.{{ column_to_compare }} as a_query_value,\n        b_query.{{ column_to_compare }} as b_query_value,\n        case\n            when a_query.{{ column_to_compare }} = b_query.{{ column_to_compare }} then 'perfect match'\n            when a_query.{{ column_to_compare }} is null and b_query.{{ column_to_compare }} is null then 'both are null'\n            when a_query.{{ primary_key }} is null then 'missing from a'\n            when b_query.{{ primary_key }} is null then 'missing from b'\n            when a_query.{{ column_to_compare }} is null then 'value is null in a only'\n            when b_query.{{ column_to_compare }} is null then 'value is null in b only'\n            when a_query.{{ column_to_compare }} != b_query.{{ column_to_compare }} then 'values do not match'\n            else 'unknown' -- this should never happen\n        end as match_status,\n        case\n            when a_query.{{ column_to_compare }} = b_query.{{ column_to_compare }} then 0\n            when a_query.{{ column_to_compare }} is null and b_query.{{ column_to_compare }} is null then 1\n            when a_query.{{ primary_key }} is null then 2\n            when b_query.{{ primary_key }} is null then 3\n            when a_query.{{ column_to_compare }} is null then 4\n            when b_query.{{ column_to_compare }} is null then 5\n            when a_query.{{ column_to_compare }} != b_query.{{ column_to_compare }} then 6\n            else 7 -- this should never happen\n        end as match_order\n\n    from a_query\n\n    full outer join b_query on a_query.{{ primary_key }} = b_query.{{ primary_key }}\n),\n\naggregated as (\n    select\n        match_status,\n        match_order,\n        count(*) as count_records\n    from joined\n\n    group by match_status, match_order\n)\n\nselect\n    match_status,\n    count_records,\n    round(100.0 * count_records / sum(count_records) over (), 2) as percent_of_total\n\nfrom aggregated\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720537837.223761, "supported_languages": null}, "macro.tsql_utils.sqlserver__compare_queries": {"name": "sqlserver__compare_queries", "resource_type": "macro", "package_name": "tsql_utils", "path": "macros\\dbt_audit_helper\\compare_queries.sql", "original_file_path": "macros\\dbt_audit_helper\\compare_queries.sql", "unique_id": "macro.tsql_utils.sqlserver__compare_queries", "macro_sql": "{% macro sqlserver__compare_queries(a_query, b_query, primary_key=None, summarize=true) %}\n\nwith a as (\n\n    {{ a_query }}\n\n),\n\nb as (\n\n    {{ b_query }}\n\n),\n\na_intersect_b as (\n\n    select * from a\n    {{ dbt.intersect() }}\n    select * from b\n\n),\n\na_except_b as (\n\n    select * from a\n    {{ dbt.except() }}\n    select * from b\n\n),\n\nb_except_a as (\n\n    select * from b\n    {{ dbt.except() }}\n    select * from a\n\n),\n\nall_records as (\n\n    select\n        *,\n        1 as in_a,\n        1 as in_b\n    from a_intersect_b\n\n    union all\n\n    select\n        *,\n        1 as in_a,\n        0 as in_b\n    from a_except_b\n\n    union all\n\n    select\n        *,\n        0 as in_a,\n        1 as in_b\n    from b_except_a\n\n),\n\n{%- if summarize %}\n\nsummary_stats as (\n    select\n        in_a,\n        in_b,\n        count(*) as count\n    from all_records\n    group by in_a, in_b\n),\n\nfinal as (\n\n    select\n    *,\n    round(100.0 * count / sum(count) over (), 2) as percent_of_total\n\n    from summary_stats\n)\n\n{%- else %}\n\nfinal as (\n\n    select *\n    from all_records\n    where not (in_a = 1 and in_b = 1)\n\n)\n\n{%- endif %}\n\nselect *\nfrom final\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.intersect", "macro.dbt.except"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720537837.223761, "supported_languages": null}, "macro.tsql_utils.sqlserver__compare_relations": {"name": "sqlserver__compare_relations", "resource_type": "macro", "package_name": "tsql_utils", "path": "macros\\dbt_audit_helper\\compare_relations.sql", "original_file_path": "macros\\dbt_audit_helper\\compare_relations.sql", "unique_id": "macro.tsql_utils.sqlserver__compare_relations", "macro_sql": "{% macro sqlserver__compare_relations(a_relation, b_relation, exclude_columns=[], primary_key=None, summarize=true) %}\n\n{%- set a_columns = adapter.get_columns_in_relation(a_relation) -%}\n\n{% set check_columns=audit_helper.pop_columns(a_columns, exclude_columns) %}\n\n{% set check_cols_csv = check_columns | map(attribute='quoted') | join(', ') %}\n\n{% set a_query %}\nselect\n    {{ check_cols_csv }}\n\nfrom {{ a_relation }}\n{% endset %}\n\n{% set b_query %}\nselect\n    {{ check_cols_csv }}\n\nfrom {{ b_relation }}\n{% endset %}\n\n{{ tsql_utils.sqlserver__compare_queries(a_query, b_query, primary_key, summarize) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.tsql_utils.sqlserver__compare_queries"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720537837.223761, "supported_languages": null}, "macro.tsql_utils.sqlserver__compare_relation_columns": {"name": "sqlserver__compare_relation_columns", "resource_type": "macro", "package_name": "tsql_utils", "path": "macros\\dbt_audit_helper\\compare_relation_columns.sql", "original_file_path": "macros\\dbt_audit_helper\\compare_relation_columns.sql", "unique_id": "macro.tsql_utils.sqlserver__compare_relation_columns", "macro_sql": "{% macro sqlserver__compare_relation_columns(a_relation, b_relation) %}\n\nwith a_cols as (\n    {{ tsql_utils.sqlserver__get_columns_in_relation_sql(a_relation) }}\n),\n\nb_cols as (\n    {{ tsql_utils.sqlserver__get_columns_in_relation_sql(b_relation) }}\n)\n\nselect\n    column_name,\n    a_cols.ordinal_position as a_ordinal_position,\n    b_cols.ordinal_position as b_ordinal_position,\n    a_cols.data_type as a_data_type,\n    b_cols.data_type as b_data_type,\n    coalesce(a_cols.ordinal_position = b_cols.ordinal_position, false) as has_ordinal_position_match,\n    coalesce(a_cols.data_type = b_cols.data_type, false) as has_data_type_match\nfrom a_cols\nfull outer join b_cols using (column_name)\n\n{% endmacro %}", "depends_on": {"macros": ["macro.tsql_utils.sqlserver__get_columns_in_relation_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720537837.223761, "supported_languages": null}, "macro.tsql_utils.sqlserver__get_columns_in_relation_sql": {"name": "sqlserver__get_columns_in_relation_sql", "resource_type": "macro", "package_name": "tsql_utils", "path": "macros\\dbt_audit_helper\\compare_relation_columns.sql", "original_file_path": "macros\\dbt_audit_helper\\compare_relation_columns.sql", "unique_id": "macro.tsql_utils.sqlserver__get_columns_in_relation_sql", "macro_sql": "{% macro sqlserver__get_columns_in_relation_sql(relation) %}\n  SELECT\n            column_name,\n            data_type,\n            character_maximum_length,\n            numeric_precision,\n            numeric_scale\n        FROM\n            (select\n                ordinal_position,\n                column_name,\n                data_type,\n                character_maximum_length,\n                numeric_precision,\n                numeric_scale\n            from INFORMATION_SCHEMA.COLUMNS\n            where table_name = '{{ relation.identifier }}'\n              and table_schema = '{{ relation.schema }}'\n            UNION ALL\n            select\n                ordinal_position,\n                column_name collate database_default,\n                data_type collate database_default,\n                character_maximum_length,\n                numeric_precision,\n                numeric_scale\n            from tempdb.INFORMATION_SCHEMA.COLUMNS\n            where table_name like '{{ relation.identifier }}%') cols\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720537837.223761, "supported_languages": null}, "macro.tsql_utils.sqlserver__convert_timezone": {"name": "sqlserver__convert_timezone", "resource_type": "macro", "package_name": "tsql_utils", "path": "macros\\dbt_date\\calendar_date\\convert_timezones.sql", "original_file_path": "macros\\dbt_date\\calendar_date\\convert_timezones.sql", "unique_id": "macro.tsql_utils.sqlserver__convert_timezone", "macro_sql": "{% macro sqlserver__convert_timezone(column, target_tz, source_tz) -%}\n    CAST({{ column }} as {{ dbt_utils.type_timestamp() }}) AT TIME ZONE '{{ source_tz }}' AT TIME ZONE '{{ target_tz }}'\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt_expectations.type_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720537837.223761, "supported_languages": null}, "macro.tsql_utils.sqlserver__date_part": {"name": "sqlserver__date_part", "resource_type": "macro", "package_name": "tsql_utils", "path": "macros\\dbt_date\\calendar_date\\date_part.sql", "original_file_path": "macros\\dbt_date\\calendar_date\\date_part.sql", "unique_id": "macro.tsql_utils.sqlserver__date_part", "macro_sql": "{% macro sqlserver__date_part(datepart, date) -%}\n    datepart({{ datepart }}, {{ date }})\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720537837.223761, "supported_languages": null}, "macro.tsql_utils.sqlserver__day_name": {"name": "sqlserver__day_name", "resource_type": "macro", "package_name": "tsql_utils", "path": "macros\\dbt_date\\calendar_date\\day_name.sql", "original_file_path": "macros\\dbt_date\\calendar_date\\day_name.sql", "unique_id": "macro.tsql_utils.sqlserver__day_name", "macro_sql": "{%- macro sqlserver__day_name(date, short) -%}\n{%- set f = 'ddd' if short else 'dddd' -%}\n    format({{ date }}, '{{ f }}')\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720537837.2338402, "supported_languages": null}, "macro.tsql_utils.sqlserver__day_of_week": {"name": "sqlserver__day_of_week", "resource_type": "macro", "package_name": "tsql_utils", "path": "macros\\dbt_date\\calendar_date\\day_of_week.sql", "original_file_path": "macros\\dbt_date\\calendar_date\\day_of_week.sql", "unique_id": "macro.tsql_utils.sqlserver__day_of_week", "macro_sql": "{%- macro sqlserver__day_of_week(date, isoweek) -%}\n\n    {%- set dow = dbt_date.date_part('weekday', date) -%}\n\n    {%- if isoweek -%}\n    case\n        -- Shift start of week from Sunday (1) to Monday (2)\n        when {{ dow }} = 1 then 7\n        else {{ dow }} - 1\n    end\n    {%- else -%}\n    {{ dow }}\n    {%- endif -%}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_date.date_part"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720537837.2338402, "supported_languages": null}, "macro.tsql_utils.sqlserver__from_unixtimestamp": {"name": "sqlserver__from_unixtimestamp", "resource_type": "macro", "package_name": "tsql_utils", "path": "macros\\dbt_date\\calendar_date\\from_unixtimestamp.sql", "original_file_path": "macros\\dbt_date\\calendar_date\\from_unixtimestamp.sql", "unique_id": "macro.tsql_utils.sqlserver__from_unixtimestamp", "macro_sql": "{%- macro sqlserver__from_unixtimestamp(epochs, format) -%}\n    \n    {%- if format == \"seconds\" -%}\n    {%- set scale = \"S\" -%}\n    {%- elif format == \"milliseconds\" -%}\n    {%- set scale = \"ms\" -%}\n    {%- elif format == \"microseconds\" -%}\n    {%- set scale = \"mcs\" -%}\n    {%- elif format == \"nanoseconds\" -%}\n    {%- set scale = \"ns\" -%}\n    {%- else -%}\n    {{ exceptions.raise_compiler_error(\n        \"value \" ~ format ~ \" for `format` for from_unixtimestamp is not supported.\"\n        ) \n    }}\n    {% endif -%}\n\n    {%- if format == \"nanoseconds\" -%}\n        dateadd(ns, {{ epochs }} % 1000000000, dateadd(s,{{ epochs }} / 1000000000,cast('1970-01-01' as datetime2(7))) )\n    {%- else -%}\n        dateadd({{ scale }}, {{ epochs }}, '1970-01-01')\n    {% endif -%}\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720537837.2384088, "supported_languages": null}, "macro.tsql_utils.sqlserver__iso_week_of_year": {"name": "sqlserver__iso_week_of_year", "resource_type": "macro", "package_name": "tsql_utils", "path": "macros\\dbt_date\\calendar_date\\iso_week_of_year.sql", "original_file_path": "macros\\dbt_date\\calendar_date\\iso_week_of_year.sql", "unique_id": "macro.tsql_utils.sqlserver__iso_week_of_year", "macro_sql": "{%- macro sqlserver__iso_week_of_year(date) -%}\ncast({{ dbt_date.date_part('iso_week', date) }} as {{ dbt_utils.type_int() }}) \n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_date.date_part", "macro.dbt.type_int"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720537837.2384088, "supported_languages": null}, "macro.tsql_utils.sqlserver__iso_week_start": {"name": "sqlserver__iso_week_start", "resource_type": "macro", "package_name": "tsql_utils", "path": "macros\\dbt_date\\calendar_date\\iso_week_start.sql", "original_file_path": "macros\\dbt_date\\calendar_date\\iso_week_start.sql", "unique_id": "macro.tsql_utils.sqlserver__iso_week_start", "macro_sql": "{%- macro sqlserver__iso_week_start(date) -%}\n    cast(dateadd(week, datediff(week, 0, dateadd(day, -1, {{date}})), 0) as date)\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720537837.2384088, "supported_languages": null}, "macro.tsql_utils.sqlserver__month_name": {"name": "sqlserver__month_name", "resource_type": "macro", "package_name": "tsql_utils", "path": "macros\\dbt_date\\calendar_date\\month_name.sql", "original_file_path": "macros\\dbt_date\\calendar_date\\month_name.sql", "unique_id": "macro.tsql_utils.sqlserver__month_name", "macro_sql": "{%- macro sqlserver__month_name(date, short) -%}\n{%- set f = 'MMM' if short else 'MMMM' -%}\n    format({{ date }}, '{{ f }}')\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720537837.2384088, "supported_languages": null}, "macro.tsql_utils.sqlserver__to_unixtimestamp": {"name": "sqlserver__to_unixtimestamp", "resource_type": "macro", "package_name": "tsql_utils", "path": "macros\\dbt_date\\calendar_date\\to_unixtimestamp.sql", "original_file_path": "macros\\dbt_date\\calendar_date\\to_unixtimestamp.sql", "unique_id": "macro.tsql_utils.sqlserver__to_unixtimestamp", "macro_sql": "{%- macro sqlserver__to_unixtimestamp(timestamp) -%}\n    DATEDIFF(s, '1970-01-01 00:00:00', {{ timestamp }})\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720537837.2384088, "supported_languages": null}, "macro.tsql_utils.sqlserver__week_end": {"name": "sqlserver__week_end", "resource_type": "macro", "package_name": "tsql_utils", "path": "macros\\dbt_date\\calendar_date\\week_end.sql", "original_file_path": "macros\\dbt_date\\calendar_date\\week_end.sql", "unique_id": "macro.tsql_utils.sqlserver__week_end", "macro_sql": "{%- macro sqlserver__week_end(date) -%}\n{%- set dt = dbt_date.week_start(date) -%}\n{{ dbt_date.n_days_away(6, dt) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_date.week_start", "macro.dbt_date.n_days_away"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720537837.2384088, "supported_languages": null}, "macro.tsql_utils.sqlserver__week_of_year": {"name": "sqlserver__week_of_year", "resource_type": "macro", "package_name": "tsql_utils", "path": "macros\\dbt_date\\calendar_date\\week_of_year.sql", "original_file_path": "macros\\dbt_date\\calendar_date\\week_of_year.sql", "unique_id": "macro.tsql_utils.sqlserver__week_of_year", "macro_sql": "{%- macro sqlserver__week_of_year(date) -%}\ncast({{ dbt_date.date_part('week', date)}} as {{ dbt_utils.type_int() }})\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_date.date_part", "macro.dbt.type_int"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720537837.2384088, "supported_languages": null}, "macro.tsql_utils.sqlserver__week_start": {"name": "sqlserver__week_start", "resource_type": "macro", "package_name": "tsql_utils", "path": "macros\\dbt_date\\calendar_date\\week_start.sql", "original_file_path": "macros\\dbt_date\\calendar_date\\week_start.sql", "unique_id": "macro.tsql_utils.sqlserver__week_start", "macro_sql": "{%- macro sqlserver__week_start(date) -%}\n-- Sunday as week start date\ncast({{ dbt_utils.dateadd('day', -1, dbt_utils.date_trunc('week', dbt_utils.dateadd('day', 1, date))) }} as date)\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.dateadd", "macro.dbt.date_trunc"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720537837.2384088, "supported_languages": null}, "macro.tsql_utils.sqlserver__log_natural": {"name": "sqlserver__log_natural", "resource_type": "macro", "package_name": "tsql_utils", "path": "macros\\dbt_expectations\\math\\log_natural.sql", "original_file_path": "macros\\dbt_expectations\\math\\log_natural.sql", "unique_id": "macro.tsql_utils.sqlserver__log_natural", "macro_sql": "{% macro sqlserver__log_natural(x) %}\n\n    log({{ x }})\n\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720537837.2384088, "supported_languages": null}, "macro.tsql_utils.sqlserver__test_expect_column_most_common_value_to_be_in_set": {"name": "sqlserver__test_expect_column_most_common_value_to_be_in_set", "resource_type": "macro", "package_name": "tsql_utils", "path": "macros\\dbt_expectations\\schema_tests\\aggregate_functions\\expect_column_most_common_value_to_be_in_set.sql", "original_file_path": "macros\\dbt_expectations\\schema_tests\\aggregate_functions\\expect_column_most_common_value_to_be_in_set.sql", "unique_id": "macro.tsql_utils.sqlserver__test_expect_column_most_common_value_to_be_in_set", "macro_sql": "{% macro sqlserver__test_expect_column_most_common_value_to_be_in_set(model, column_name,\n                                                            value_set,\n                                                            top_n,\n                                                            quote_values=False,\n                                                            data_type=\"decimal\",\n                                                            row_condition=None\n                                                            ) -%}\n\nwith value_counts as (\n\n    select\n        {% if quote_values -%}\n        {{ column_name }}\n        {%- else -%}\n        cast({{ column_name }} as {{ data_type }})\n        {%- endif %} as value_field,\n        count(*) as value_count\n\n    from {{ model }}\n    {% if row_condition %}\n    where {{ row_condition }}\n    {% endif %}\n\n    group by {% if quote_values -%}\n                {{ column_name }}\n            {%- else -%}\n                cast({{ column_name }} as {{ data_type }})\n            {%- endif %}\n\n),\nvalue_counts_ranked as (\n\n    select\n        *,\n        row_number() over(order by value_count desc) as value_count_rank\n    from\n        value_counts\n\n),\nvalue_count_top_n as (\n\n    select\n        value_field\n    from\n        value_counts_ranked\n    where\n        value_count_rank = {{ top_n }}\n\n),\nset_values as (\n\n    {% for value in value_set -%}\n    select\n        {% if quote_values -%}\n        '{{ value }}'\n        {%- else -%}\n        cast({{ value }} as {{ data_type }})\n        {%- endif %} as value_field\n    {% if not loop.last %}union all{% endif %}\n    {% endfor %}\n\n),\nunique_set_values as (\n\n    select distinct value_field\n    from\n        set_values\n\n),\nvalidation_errors as (\n    -- values from the model that are not in the set\n    select\n        value_field\n    from\n        value_count_top_n\n    where\n        value_field not in (select value_field from unique_set_values)\n\n)\n\nselect *\nfrom validation_errors\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720537837.2384088, "supported_languages": null}, "macro.tsql_utils.sqlserver__test_expect_column_stdev_to_be_between": {"name": "sqlserver__test_expect_column_stdev_to_be_between", "resource_type": "macro", "package_name": "tsql_utils", "path": "macros\\dbt_expectations\\schema_tests\\aggregate_functions\\expect_column_stdev_to_be_between.sql", "original_file_path": "macros\\dbt_expectations\\schema_tests\\aggregate_functions\\expect_column_stdev_to_be_between.sql", "unique_id": "macro.tsql_utils.sqlserver__test_expect_column_stdev_to_be_between", "macro_sql": "{% macro sqlserver__test_expect_column_stdev_to_be_between(model, column_name,\n                                                    min_value,\n                                                    max_value,\n                                                    group_by,\n                                                    row_condition=None,\n                                                    strictly=False\n                                                    ) -%}\n{% set expression %}\nstdev({{ column_name }})\n{% endset %}\n{{ dbt_expectations.expression_between(model,\n                                        expression=expression,\n                                        min_value=min_value,\n                                        max_value=max_value,\n                                        group_by_columns=group_by,\n                                        row_condition=row_condition,\n                                        strictly=strictly\n                                        ) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_expectations.expression_between"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720537837.2384088, "supported_languages": null}, "macro.tsql_utils._get_metric_expression": {"name": "_get_metric_expression", "resource_type": "macro", "package_name": "tsql_utils", "path": "macros\\dbt_expectations\\schema_tests\\distributional\\expect_column_values_to_be_within_n_moving_stdevs.sql", "original_file_path": "macros\\dbt_expectations\\schema_tests\\distributional\\expect_column_values_to_be_within_n_moving_stdevs.sql", "unique_id": "macro.tsql_utils._get_metric_expression", "macro_sql": "{%- macro _get_metric_expression(metric_column, take_logs) -%}\n\n{%- if take_logs %}\n{%- set expr = \"nullif(\" ~ metric_column ~ \", 0)\" -%}\ncoalesce({{ dbt_expectations.log_natural(expr) }}, 0)\n{%- else -%}\ncoalesce({{ metric_column }}, 0)\n{%- endif %}\n\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": ["macro.dbt_expectations.log_natural"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720537837.2534835, "supported_languages": null}, "macro.tsql_utils.sqlserver__test_expect_column_values_to_be_within_n_moving_stdevs": {"name": "sqlserver__test_expect_column_values_to_be_within_n_moving_stdevs", "resource_type": "macro", "package_name": "tsql_utils", "path": "macros\\dbt_expectations\\schema_tests\\distributional\\expect_column_values_to_be_within_n_moving_stdevs.sql", "original_file_path": "macros\\dbt_expectations\\schema_tests\\distributional\\expect_column_values_to_be_within_n_moving_stdevs.sql", "unique_id": "macro.tsql_utils.sqlserver__test_expect_column_values_to_be_within_n_moving_stdevs", "macro_sql": "{% macro sqlserver__test_expect_column_values_to_be_within_n_moving_stdevs(model,\n                                  column_name,\n                                  date_column_name,\n                                  group_by,\n                                  period,\n                                  lookback_periods,\n                                  trend_periods,\n                                  test_periods,\n                                  sigma_threshold,\n                                  sigma_threshold_upper,\n                                  sigma_threshold_lower,\n                                  take_diffs,\n                                  take_logs\n                                ) %}\n\n{%- set sigma_threshold_upper = sigma_threshold_upper if sigma_threshold_upper else sigma_threshold -%}\n{%- set sigma_threshold_lower = sigma_threshold_lower if sigma_threshold_lower else -1 * sigma_threshold -%}\n{%- set partition_by = \"partition by \" ~ (group_by | join(\",\")) if group_by -%}\n{%- set group_by_length = (group_by | length ) if group_by else 0 -%}\n\n{# TODO: adapt to new group_by arg #}\n\nwith grouped_metric_values as (\n\n        select\n            {{ dbt_utils.date_trunc(period, date_column_name) }} as metric_period,\n            {{ group_by | join(\",\") ~ \",\" if group_by }}\n            sum({{ column_name }}) as agg_metric_value\n        from\n            {{ model }}\n        group by\n            {{ dbt_utils.date_trunc(period, date_column_name) }}\n            {% if group_by %}\n                , {{ group_by | join(\",\") }}\n            {% endif %}\n\n),\n\ngrouped_metric_values_with_priors as (\n\n    select\n        *,\n        lag(agg_metric_value, {{ lookback_periods }}) over({{ partition_by }} order by metric_period) as prior_agg_metric_value\n    from\n        grouped_metric_values d\n\n),\n\n{%- if take_diffs %}\n\nmetric_values as (\n\n    select\n        *,\n        {{ dbt_expectations._get_metric_expression(\"agg_metric_value\", take_logs) }}\n        -\n        {{ dbt_expectations._get_metric_expression(\"prior_agg_metric_value\", take_logs) }}\n        as metric_test_value\n    from\n        grouped_metric_values_with_priors d\n),\n\n{%- else %}\n\nmetric_values as (\n    select\n        *,\n        {{ dbt_expectations._get_metric_expression(\"agg_metric_value\", take_logs) }}\n    from\n        grouped_metric_values\n),\n{%- endif %}\n\nmetric_moving_calcs as (\n\n    select\n        *,\n        avg(metric_test_value)\n            over({{ partition_by }} order by metric_period rows\n                    between {{ trend_periods }} preceding and 1 preceding) as metric_test_rolling_average,\n        stdev(metric_test_value)\n            over({{ partition_by }} order by metric_period rows\n                    between {{ trend_periods }} preceding and 1 preceding) as metric_test_rolling_stddev\n    from\n        metric_values\n\n),\nmetric_sigma as (\n\n    select\n        *,\n        (metric_test_value - metric_test_rolling_average) as metric_test_delta,\n        (metric_test_value - metric_test_rolling_average)/nullif(metric_test_rolling_stddev, 0) as metric_test_sigma\n    from\n        metric_moving_calcs\n\n)\nselect\n    count(*) as count\nfrom\n    metric_sigma\nwhere\n\n    metric_period >= cast(\n            {{ dbt_utils.dateadd(period, -test_periods, dbt_utils.date_trunc(period, dbt_date.now())) }}\n            as {{ dbt_utils.type_timestamp() }})\n    and\n    metric_period < {{ dbt_utils.date_trunc(period, dbt_date.now()) }}\n    and\n\n    not (\n        metric_test_sigma >= {{ sigma_threshold_lower }} and\n        metric_test_sigma <= {{ sigma_threshold_upper }}\n    )\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt.date_trunc", "macro.dbt_expectations._get_metric_expression", "macro.dbt.dateadd", "macro.dbt_date.now", "macro.dbt_expectations.type_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720537837.2534835, "supported_languages": null}, "macro.tsql_utils.sqlserver__test_expect_column_values_to_be_within_n_stdevs": {"name": "sqlserver__test_expect_column_values_to_be_within_n_stdevs", "resource_type": "macro", "package_name": "tsql_utils", "path": "macros\\dbt_expectations\\schema_tests\\distributional\\expect_column_values_to_be_within_n_stdevs.sql", "original_file_path": "macros\\dbt_expectations\\schema_tests\\distributional\\expect_column_values_to_be_within_n_stdevs.sql", "unique_id": "macro.tsql_utils.sqlserver__test_expect_column_values_to_be_within_n_stdevs", "macro_sql": "{% macro sqlserver__test_expect_column_values_to_be_within_n_stdevs(model,\n                                  column_name,\n                                  group_by,\n                                  sigma_threshold\n                                ) %}\nwith metric_values as (\n\n    {% if group_by -%}\n    select\n        {{ group_by }} as metric_date,\n        sum({{ column_name }}) as {{ column_name }}\n    from\n        {{ model }}\n    group by\n        {{ group_by }}\n    {%- else -%}\n    select\n        {{ column_name }} as {{ column_name }}\n    from\n        {{ model }}\n    {%- endif %}\n\n),\nmetric_values_with_statistics as (\n\n    select\n        *,\n        avg({{ column_name }}) over() as {{ column_name }}_average,\n        stdev({{ column_name }}) over() as {{ column_name }}_stddev\n    from\n        metric_values\n\n),\nmetric_values_z_scores as (\n\n    select\n        *,\n        ({{ column_name }} - {{ column_name }}_average)/{{ column_name }}_stddev as {{ column_name }}_sigma\n    from\n        metric_values_with_statistics\n\n)\nselect\n    count(*) as error_count\nfrom\n    metric_values_z_scores\nwhere\n    abs({{ column_name }}_sigma) > {{ sigma_threshold }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720537837.2534835, "supported_languages": null}, "macro.tsql_utils.sqlserver__test_expect_select_column_values_to_be_unique_within_record": {"name": "sqlserver__test_expect_select_column_values_to_be_unique_within_record", "resource_type": "macro", "package_name": "tsql_utils", "path": "macros\\dbt_expectations\\schema_tests\\multi-column\\expect_select_column_values_to_be_unique_within_record.sql", "original_file_path": "macros\\dbt_expectations\\schema_tests\\multi-column\\expect_select_column_values_to_be_unique_within_record.sql", "unique_id": "macro.tsql_utils.sqlserver__test_expect_select_column_values_to_be_unique_within_record", "macro_sql": "{% macro sqlserver__test_expect_select_column_values_to_be_unique_within_record(model,\n                                                    column_list,\n                                                    quote_columns,\n                                                    ignore_row_if,\n                                                    row_condition\n                                                    ) %}\n\n{% if not quote_columns %}\n    {%- set columns=column_list %}\n{% elif quote_columns %}\n    {%- set columns=[] %}\n        {% for column in column_list -%}\n            {% set columns = columns.append( adapter.quote(column) ) %}\n        {%- endfor %}\n{% else %}\n    {{ exceptions.raise_compiler_error(\n        \"`quote_columns` argument for unique_combination_of_columns test must be one of [True, False] Got: '\" ~ quote_columns ~\"'.'\"\n    ) }}\n{% endif %}\n\nwith column_values as (\n\n    select\n        row_number() over(order by (SELECT 'does order really matter here?')) as row_index,\n        {% for column in columns -%}\n        {{ column }}{% if not loop.last %},{% endif %}\n        {%- endfor %}\n    from {{ model }}\n    where 1=1\n    {% if row_condition %}\n        and {{ row_condition }}\n    {% endif %}\n    {% if ignore_row_if == \"all_values_are_missing\" %}\n        and\n        (\n            {% for column in columns -%}\n            {{ column }} is not null{% if not loop.last %} and {% endif %}\n            {%- endfor %}\n        )\n    {% elif ignore_row_if == \"any_value_is_missing\" %}\n        and\n        (\n            {% for column in columns -%}\n            {{ column }} is not null{% if not loop.last %} or {% endif %}\n            {%- endfor %}\n        )\n    {% endif %}\n\n),\nunpivot_columns as (\n\n    {% for column in columns %}\n    select row_index, '{{ column }}' as column_name, {{ column }} as column_value from column_values\n    {% if not loop.last %}union all{% endif %}\n    {% endfor %}\n),\nvalidation_errors as (\n\n    select\n        row_index,\n        count(distinct column_value) as column_values\n    from unpivot_columns\n    group by row_index\n    having count(distinct column_value) < {{ columns | length }}\n\n)\nselect *\nfrom validation_errors\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720537837.2705276, "supported_languages": null}, "macro.tsql_utils.sqlserver__test_expect_grouped_row_values_to_have_recent_data": {"name": "sqlserver__test_expect_grouped_row_values_to_have_recent_data", "resource_type": "macro", "package_name": "tsql_utils", "path": "macros\\dbt_expectations\\schema_tests\\table_shape\\expect_grouped_row_values_to_have_recent_data.sql", "original_file_path": "macros\\dbt_expectations\\schema_tests\\table_shape\\expect_grouped_row_values_to_have_recent_data.sql", "unique_id": "macro.tsql_utils.sqlserver__test_expect_grouped_row_values_to_have_recent_data", "macro_sql": "{% macro sqlserver__test_expect_grouped_row_values_to_have_recent_data(model, group_by, timestamp_column, datepart, interval, row_condition=None) %}\nwith latest_grouped_timestamps as (\n\n    select\n        {%- for g in group_by %}\n        {{ g }},\n        {%- endfor %}\n        max(1) as join_key,\n        max({{ timestamp_column }}) as latest_timestamp_column\n    from\n        {{ model }}\n    where\n        -- to exclude erroneous future dates\n        cast({{ timestamp_column }} as {{ type_timestamp() }}) <= {{ dbt_date.now() }}\n        {% if row_condition %}\n        and {{ row_condition }}\n        {% endif %}\n    group by\n        {%- for g in group_by %}\n            {{g}}{%- if not loop.last %}, {%- endif %}\n        {%- endfor %}\n\n),\ntotal_row_counts as (\n\n    select\n        max(1) as join_key,\n        count(*) as row_count\n    from\n        latest_grouped_timestamps\n\n),\noutdated_grouped_timestamps as (\n\n    select *\n    from\n        latest_grouped_timestamps\n    where\n        -- are the max timestamps per group older than the specified cutoff?\n        latest_timestamp_column <\n            cast(\n                {{ dateadd(datepart, interval * -1, dbt_date.now()) }}\n                as {{ type_timestamp() }}\n            )\n\n),\nvalidation_errors as (\n\n    select\n        r.row_count,\n        t.*\n    from\n        total_row_counts r\n        left join\n        outdated_grouped_timestamps t\n        on r.join_key = t.join_key\n    where\n        -- fail if either no rows were returned due to row_condition,\n        -- or the recency test returned failed rows\n        r.row_count = 0\n        or\n        t.join_key is not null\n\n)\nselect * from validation_errors\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_expectations.type_timestamp", "macro.dbt_date.now", "macro.dbt.dateadd"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720537837.2729554, "supported_languages": null}, "macro.tsql_utils.sqlserver__get_select": {"name": "sqlserver__get_select", "resource_type": "macro", "package_name": "tsql_utils", "path": "macros\\dbt_expectations\\schema_tests\\_generalized\\equal_expression.sql", "original_file_path": "macros\\dbt_expectations\\schema_tests\\_generalized\\equal_expression.sql", "unique_id": "macro.tsql_utils.sqlserver__get_select", "macro_sql": "{%- macro sqlserver__get_select(model, expression, row_condition, group_by) %}\n    select\n        {# {%- if group_by %} #}\n            {% for g in group_by or [] -%}\n                {{ g }} as col_{{ loop.index }},\n            {% endfor -%}\n        {# {% endif %} #}\n        {{ expression }} as expression\n    from\n        {{ model }}\n    {%- if row_condition %}\n    where\n        {{ row_condition }}\n    {% endif %}\n    {%- if group_by %}\n        {%- if group_by|length > 1 or group_by[0] != \"'col'\" %}\n        group by\n            {% for g in group_by -%}\n                {{ g }}{% if not loop.last %},{% endif %}\n            {% endfor %}\n        {% endif %}\n    {% endif %}\n{% endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720537837.2790241, "supported_languages": null}, "macro.tsql_utils.sqlserver__test_equal_expression": {"name": "sqlserver__test_equal_expression", "resource_type": "macro", "package_name": "tsql_utils", "path": "macros\\dbt_expectations\\schema_tests\\_generalized\\equal_expression.sql", "original_file_path": "macros\\dbt_expectations\\schema_tests\\_generalized\\equal_expression.sql", "unique_id": "macro.tsql_utils.sqlserver__test_equal_expression", "macro_sql": "{%- macro sqlserver__test_equal_expression(model, expression,\n                                compare_model,\n                                compare_expression,\n                                group_by,\n                                compare_group_by,\n                                row_condition,\n                                compare_row_condition,\n                                tolerance,\n                                tolerance_percent,\n                                return_difference) -%}\n\n    {%- set compare_model = model if not compare_model else compare_model -%}\n    {%- set compare_expression = expression if not compare_expression else compare_expression -%}\n    {%- set compare_row_condition = row_condition if not compare_row_condition else compare_row_condition -%}\n    {%- set compare_group_by = group_by if not compare_group_by else compare_group_by -%}\n\n    {%- set n_cols = group_by|length if group_by else 0 %}\n    with a as (\n        {{ dbt_expectations.get_select(model, expression, row_condition, group_by) }}\n    ),\n    b as (\n        {{ dbt_expectations.get_select(compare_model, compare_expression, compare_row_condition, compare_group_by) }}\n    ),\n    final as (\n\n        select\n            {% for i in range(1, n_cols + 1) -%}\n            coalesce(a.col_{{ i }}, b.col_{{ i }}) as col_{{ i }},\n            {% endfor %}\n            a.expression,\n            b.expression as compare_expression,\n            abs(coalesce(a.expression, 0) - coalesce(b.expression, 0)) as expression_difference,\n            abs(coalesce(a.expression, 0) - coalesce(b.expression, 0))/\n                nullif(a.expression, 0) as expression_difference_percent\n        from\n            {% if n_cols > 0 %}\n                a\n                full outer join\n                b on\n                {% for i in range(1, n_cols + 1) -%}\n                    a.col_{{ i }} = b.col_{{ i }} {% if not loop.last %}and{% endif %}\n                {% endfor -%}\n            {% else %}\n                a cross join b\n            {% endif %}\n    )\n    -- DEBUG:\n    -- select * from final\n    select\n        {% if return_difference %}\n        coalesce(sum(expression_difference), 0)\n        {% else %}\n        count(*)\n        {% endif %}\n    from final\n    where\n        {% if tolerance_percent %}\n        expression_difference_percent > {{ tolerance_percent }}\n        {% else %}\n        expression_difference > {{ tolerance }}\n        {% endif %}\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt_expectations.get_select"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720537837.2790241, "supported_languages": null}, "macro.tsql_utils.sqlserver__expression_is_true": {"name": "sqlserver__expression_is_true", "resource_type": "macro", "package_name": "tsql_utils", "path": "macros\\dbt_expectations\\schema_tests\\_generalized\\expression_is_true.sql", "original_file_path": "macros\\dbt_expectations\\schema_tests\\_generalized\\expression_is_true.sql", "unique_id": "macro.tsql_utils.sqlserver__expression_is_true", "macro_sql": "{% macro sqlserver__expression_is_true(model, expression, test_condition, group_by_columns, row_condition) %}\n\n{% if test_condition == \"= true\" %}\n  {% set test_condition = \"= 1\" %}\n{% endif %}\n\n\nwith grouped_expression as (\n\n    select\n        {% if group_by_columns %}\n        {% for group_by_column in group_by_columns -%}\n        {{ group_by_column }} as col_{{ loop.index }},\n        {% endfor -%}\n        {% endif %}\n        case when {{ expression }} then 1 else 0 end as expression\n    from {{ model }}\n     {%- if row_condition %}\n    where\n        {{ row_condition }}\n    {% endif %}\n    {% if group_by_columns %}\n    group by\n    {% for group_by_column in group_by_columns -%}\n        {{ group_by_column }}{% if not loop.last %},{% endif %}\n    {% endfor %}\n    {% endif %}\n\n),\nvalidation_errors as (\n\n    select\n        *\n    from\n        grouped_expression\n    where\n        not(expression {{ test_condition }})\n\n)\n\nselect *\nfrom validation_errors\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720537837.2876687, "supported_languages": null}, "macro.tsql_utils.sqlserver__width_bucket": {"name": "sqlserver__width_bucket", "resource_type": "macro", "package_name": "tsql_utils", "path": "macros\\dbt_utils\\cross_db_utils\\width_bucket.sql", "original_file_path": "macros\\dbt_utils\\cross_db_utils\\width_bucket.sql", "unique_id": "macro.tsql_utils.sqlserver__width_bucket", "macro_sql": "{% macro sqlserver__width_bucket(expr, min_value, max_value, num_buckets) -%}\r\n\r\n    {% set bin_size -%}\r\n    (( {{ max_value }} - {{ min_value }} ) / {{ num_buckets }} )\r\n    {%- endset %}\r\n    (\r\n        -- to break ties when the amount is exactly at the bucket edge\r\n        case\r\n            when\r\n                {{ dbt_utils.safe_cast(expr, dbt_utils.type_numeric() ) }} %\r\n                {{ dbt_utils.safe_cast(bin_size, dbt_utils.type_numeric() ) }}\r\n                 = 0\r\n            then 1\r\n            else 0\r\n        end\r\n    ) +\r\n      -- Anything over max_value goes the N+1 bucket\r\n    {%- set ceil_val -%}\r\n    CEILING(({{ expr }} - {{ min_value }})/{{ bin_size }})\r\n    {%- endset %}\r\n    (case when {{ ceil_val }} > ({{ num_buckets }} + 1)\r\n        then {{ num_buckets }} + 1\r\n        else {{ ceil_val }}\r\n    end)\r\n   \r\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.safe_cast", "macro.dbt.type_numeric"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720537837.2876687, "supported_languages": null}, "macro.tsql_utils.sqlserver__date_spine_sql": {"name": "sqlserver__date_spine_sql", "resource_type": "macro", "package_name": "tsql_utils", "path": "macros\\dbt_utils\\datetime\\date_spine.sql", "original_file_path": "macros\\dbt_utils\\datetime\\date_spine.sql", "unique_id": "macro.tsql_utils.sqlserver__date_spine_sql", "macro_sql": "{% macro sqlserver__date_spine_sql(datepart, start_date, end_date) %}\n\n\n    with\n\n    l0 as (\n\n        select c\n        from (select 1 union all select 1) as d(c)\n\n    ),\n    l1 as (\n\n        select\n            1 as c\n        from l0 as a\n        cross join l0 as b\n\n    ),\n\n    l2 as (\n\n        select 1 as c\n        from l1 as a\n        cross join l1 as b\n    ),\n\n    l3 as (\n\n        select 1 as c\n        from l2 as a\n        cross join l2 as b\n    ),\n\n    l4 as (\n\n        select 1 as c\n        from l3 as a\n        cross join l3 as b\n    ),\n\n    l5 as (\n\n        select 1 as c\n        from l4 as a\n        cross join l4 as b\n    ),\n\n    nums as (\n\n        select row_number() over (order by (select null)) as rownum\n        from l5\n    ),\n\n    rawdata as (\n\n        select top ({{dbt_utils.datediff(start_date, end_date, datepart)}}) rownum -1 as n\n        from nums\n        order by rownum\n    ),\n\n    all_periods as (\n\n        select (\n            {{\n                dbt_utils.dateadd(\n                    datepart,\n                    'n',\n                    start_date\n                )\n            }}\n        ) as date_{{datepart}}\n        from rawdata\n    ),\n\n    filtered as (\n\n        select *\n        from all_periods\n        where date_{{datepart}} <= {{ end_date }}\n\n    )\n\n    select * from filtered\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.datediff", "macro.dbt.dateadd"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720537837.2876687, "supported_languages": null}, "macro.tsql_utils.sqlserver__date_spine": {"name": "sqlserver__date_spine", "resource_type": "macro", "package_name": "tsql_utils", "path": "macros\\dbt_utils\\datetime\\date_spine.sql", "original_file_path": "macros\\dbt_utils\\datetime\\date_spine.sql", "unique_id": "macro.tsql_utils.sqlserver__date_spine", "macro_sql": "{% macro sqlserver__date_spine(datepart, start_date, end_date) -%}\n\n    {% set date_spine_query %}\n\n        {{tsql_utils.sqlserver__date_spine_sql(datepart, start_date, end_date)}} order by 1\n\n    {% endset %}\n\n\n    {% set results = run_query(date_spine_query) %}\n\n    {% if execute %}\n\n    {% set results_list = results.columns[0].values() %}\n    \n    {% else %}\n\n    {% set results_list = [] %}\n\n    {% endif %}\n\n    {%- for date_field in results_list %}\n        select '{{ date_field }}' as date_{{datepart}} {{ 'union all ' if not loop.last else '' }}\n    {% endfor -%}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.tsql_utils.sqlserver__date_spine_sql", "macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720537837.2876687, "supported_languages": null}, "macro.tsql_utils.sqlserver__drop_old_relations": {"name": "sqlserver__drop_old_relations", "resource_type": "macro", "package_name": "tsql_utils", "path": "macros\\dbt_utils\\schema_cleanup\\drop_old_relations.sql", "original_file_path": "macros\\dbt_utils\\schema_cleanup\\drop_old_relations.sql", "unique_id": "macro.tsql_utils.sqlserver__drop_old_relations", "macro_sql": "{% macro sqlserver__drop_old_relations(dry_run='false') %}\n    {% if execute %}\n        {% set current_models = [] %}\n        {% for node in graph.nodes.values()|selectattr(\"resource_type\", \"in\", [\"model\", \"seed\", \"snapshot\"])%}\n            {% do current_models.append(node.name) %}\n        {% endfor %}\n    {% endif %}\n    {% set cleanup_query %}\n        with models_to_drop as (\n            select\n            case \n                when table_type = 'BASE TABLE' then 'TABLE'\n                when table_type = 'VIEW' then 'VIEW'\n            end as relation_type,\n            CASE \n                WHEN table_type = 'VIEW' THEN concat_ws('.', table_schema, table_name) \n                    ELSE concat_ws('.', table_catalog, table_schema, table_name) \n                END as relation_name\n            from\n                \"{{ target.database }}\".information_schema.tables -- Added quotes for any whitespace in target db\n            where\n                table_schema like '{{ target.schema }}%'\n                and table_name not in (\n                    {%- for model in current_models -%}\n                        '{{ model.upper() }}'\n                        {%- if not loop.last -%}\n                            ,\n                        {% endif %}\n                    {%- endfor -%})\n                )\n        select \n            CONCAT( 'drop ' , relation_type , ' ' , relation_name , ';' ) as drop_commands\n        from \n            models_to_drop\n        where\n            -- intentionally exclude unhandled table_types, including 'external table`\n            CONCAT( 'drop ' , relation_type , ' ' , relation_name , ';' ) is not null\n    {% endset %}\n\n    {% do log(cleanup_query, info=True) %}\n    {% set drop_commands = run_query(cleanup_query).columns[0].values() %}\n\n    {% do log('dry_run: ' + dry_run|string, info=True) %}\n\n    {% if drop_commands %}\n        {% for drop_command in drop_commands %}\n            {% do log(drop_command, info=True) %}\n            {% if dry_run == 'false' %}\n                {% do run_query(drop_command) %}\n            {% endif %}\n        {% endfor %}\n    {% else %}\n        {% do log('No relations to clean.', info=True) %}\n    {% endif %}\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720537837.2977397, "supported_languages": null}, "macro.tsql_utils.sqlserver__drop_schemas_by_prefixes": {"name": "sqlserver__drop_schemas_by_prefixes", "resource_type": "macro", "package_name": "tsql_utils", "path": "macros\\dbt_utils\\schema_cleanup\\drop_schemas_by_prefixes.sql", "original_file_path": "macros\\dbt_utils\\schema_cleanup\\drop_schemas_by_prefixes.sql", "unique_id": "macro.tsql_utils.sqlserver__drop_schemas_by_prefixes", "macro_sql": "{% macro sqlserver__drop_schemas_by_prefixes(prefixes) %}\n    {# Ensure input is a list to iterate later #}\n    {% set prefix_list = [prefixes] if prefixes is string else prefixes %}\n\n    {% for prefix in prefix_list %}\n        {# Fetch all schemas that use the current prefix #}\n        {% do log('Fetching schemas for ' + prefix + '...', info=True) %}\n        {% set schemas_table %}\n            select name\n            from sys.schemas\n            where name LIKE '{{prefix}}%'\n        {% endset %}\n        {% set schema_names = run_query(schemas_table).columns[0].values() %}\n\n        {# Test if results are empty #}\n        {% if schema_names is none or schema_names|length == 0 %}\n            {% do log('None found.', info=True) %}\n        {% else %}\n            {# Drop each found schema #}\n            {% for schema_name in schema_names %}\n                {% do log('Dropping schema ' + schema_name, info=True) %}\n                {% do sqlserver__drop_schema_by_name(schema_name) %}\n            {% endfor %}\n        {% endif %}\n    {% endfor %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_query", "macro.tsql_utils.sqlserver__drop_schema_by_name"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720537837.302758, "supported_languages": null}, "macro.tsql_utils.sqlserver__drop_schema_by_name": {"name": "sqlserver__drop_schema_by_name", "resource_type": "macro", "package_name": "tsql_utils", "path": "macros\\dbt_utils\\schema_cleanup\\drop_schema_by_name.sql", "original_file_path": "macros\\dbt_utils\\schema_cleanup\\drop_schema_by_name.sql", "unique_id": "macro.tsql_utils.sqlserver__drop_schema_by_name", "macro_sql": "{% macro sqlserver__drop_schema_by_name(schema_name) %}\n    {% set relation = api.Relation.create(database=target.database, schema=schema_name) %}\n    {% do drop_schema(relation) %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.drop_schema"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720537837.302758, "supported_languages": null}, "macro.tsql_utils.sqlserver__test_mutually_exclusive_ranges": {"name": "sqlserver__test_mutually_exclusive_ranges", "resource_type": "macro", "package_name": "tsql_utils", "path": "macros\\dbt_utils\\schema_tests\\mutually_exclusive_ranges.sql", "original_file_path": "macros\\dbt_utils\\schema_tests\\mutually_exclusive_ranges.sql", "unique_id": "macro.tsql_utils.sqlserver__test_mutually_exclusive_ranges", "macro_sql": "{% macro sqlserver__test_mutually_exclusive_ranges(model, lower_bound_column, upper_bound_column, partition_by=None, gaps='allowed', zero_length_range_allowed=False) %}\n\n{% if gaps == 'not_allowed' %}\n    {% set allow_gaps_operator='=' %}\n    {% set allow_gaps_operator_in_words='equal_to' %}\n{% elif gaps == 'allowed' %}\n    {% set allow_gaps_operator='<=' %}\n    {% set allow_gaps_operator_in_words='less_than_or_equal_to' %}\n{% elif gaps == 'required' %}\n    {% set allow_gaps_operator='<' %}\n    {% set allow_gaps_operator_in_words='less_than' %}\n{% else %}\n    {{ exceptions.raise_compiler_error(\n        \"`gaps` argument for mutually_exclusive_ranges test must be one of ['not_allowed', 'allowed', 'required'] Got: '\" ~ gaps ~\"'.'\"\n    ) }}\n{% endif %}\n{% if not zero_length_range_allowed %}\n    {% set allow_zero_length_operator='<' %}\n    {% set allow_zero_length_operator_in_words='less_than' %}\n{% elif zero_length_range_allowed %}\n    {% set allow_zero_length_operator='<=' %}\n    {% set allow_zero_length_operator_in_words='less_than_or_equal_to' %}\n{% else %}\n    {{ exceptions.raise_compiler_error(\n        \"`zero_length_range_allowed` argument for mutually_exclusive_ranges test must be one of [true, false] Got: '\" ~ zero_length_range_allowed ~\"'.'\"\n    ) }}\n{% endif %}\n\n{% set partition_clause=\"partition by \" ~ partition_by if partition_by else '' %}\n\nwith window_functions as (\n\n    select\n        {% if partition_by %}\n        {{ partition_by }},\n        {% endif %}\n        {{ lower_bound_column }} as lower_bound,\n        {{ upper_bound_column }} as upper_bound,\n\n        lead({{ lower_bound_column }}) over (\n            {{ partition_clause }}\n            order by {{ lower_bound_column }}\n        ) as next_lower_bound,\n\n        case when\n            row_number() over (\n                {{ partition_clause }}\n                order by {{ lower_bound_column }} desc\n            ) = 1\n        then 1 else 0 end as is_last_record\n    from {{ model }}\n\n),\n\ncalc as (\n    -- We want to return records where one of our assumptions fails, so we'll use\n    -- the `not` function with `and` statements so we can write our assumptions nore cleanly\n    select\n        *,\n\n        --TODO turn thesse into null ifs or case whens...\n\n        -- For each record: lower_bound should be < upper_bound.\n        -- Coalesce it to return an error on the null case (implicit assumption\n        -- these columns are not_null)\n        coalesce(\n            lower_bound {{ allow_zero_length_operator }} upper_bound,\n            false\n        ) as lower_bound_{{ allow_zero_length_operator_in_words }}_upper_bound,\n\n        -- For each record: upper_bound {{ allow_gaps_operator }} the next lower_bound.\n        -- Coalesce it to handle null cases for the last record.\n        coalesce(\n            upper_bound {{ allow_gaps_operator }} next_lower_bound,\n            is_last_record,\n            false\n        ) as upper_bound_{{ allow_gaps_operator_in_words }}_next_lower_bound\n\n    from window_functions\n\n),\n\nvalidation_errors as (\n\n    select\n        *\n    from calc\n\n    where not(\n        -- THE FOLLOWING SHOULD BE TRUE --\n        lower_bound_{{ allow_zero_length_operator_in_words }}_upper_bound\n        and upper_bound_{{ allow_gaps_operator_in_words }}_next_lower_bound\n    )\n)\n\nselect *\nfrom validation_errors\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720537837.3177786, "supported_languages": null}, "macro.tsql_utils.sqlserver__test_relationships_where": {"name": "sqlserver__test_relationships_where", "resource_type": "macro", "package_name": "tsql_utils", "path": "macros\\dbt_utils\\schema_tests\\relationships_where.sql", "original_file_path": "macros\\dbt_utils\\schema_tests\\relationships_where.sql", "unique_id": "macro.tsql_utils.sqlserver__test_relationships_where", "macro_sql": "{% macro sqlserver__test_relationships_where(model, column_name, to, field, from_condition, to_condition) %}\n\n  {# override dbt-utils' integration tests args default see: #}\n  {# https://github.com/fishtown-analytics/dbt-utils/blob/bbba960726667abc66b42624f0d36bbb62c37593/integration_tests/models/schema_tests/schema.yml#L67-L75 #}\n  {# TSQL has non-ANSI not-equal sign #}\n  {% if from_condition == 'id <> 4' %}\n      {% set where = 'id != 4' %}\n  {% endif %}\n\n  {{ return(dbt_utils.default__test_relationships_where(model, column_name, to, field, from_condition, to_condition)) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_relationships_where"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720537837.3177786, "supported_languages": null}, "macro.tsql_utils.sqlserver__test_sequential_values": {"name": "sqlserver__test_sequential_values", "resource_type": "macro", "package_name": "tsql_utils", "path": "macros\\dbt_utils\\schema_tests\\sequential_values.sql", "original_file_path": "macros\\dbt_utils\\schema_tests\\sequential_values.sql", "unique_id": "macro.tsql_utils.sqlserver__test_sequential_values", "macro_sql": "{% macro sqlserver__test_sequential_values(model, column_name, interval=1, datepart=None) %}\n\n    select\n        *\n    from (\n        select\n        {{ column_name }},\n        lag({{ column_name }}) over (\n            order by {{ column_name }}\n        ) as previous_{{ column_name }}\n        from {{ model }}\n    ) required_alias_for_tsql\n    {% if datepart %}\n    where not(cast({{ column_name }} as {{ dbt_utils.type_timestamp() }})= cast({{ dbt_utils.dateadd(datepart, interval, 'previous_' + column_name) }} as {{ dbt_utils.type_timestamp() }}))\n    {% else %}\n    where not({{ column_name }} = previous_{{ column_name }} + {{ interval }})\n    {% endif %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_expectations.type_timestamp", "macro.dbt.dateadd"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720537837.3177786, "supported_languages": null}, "macro.tsql_utils.sqlserver__test_not_null_where": {"name": "sqlserver__test_not_null_where", "resource_type": "macro", "package_name": "tsql_utils", "path": "macros\\dbt_utils\\schema_tests\\test_not_null_where.sql", "original_file_path": "macros\\dbt_utils\\schema_tests\\test_not_null_where.sql", "unique_id": "macro.tsql_utils.sqlserver__test_not_null_where", "macro_sql": "{% macro sqlserver__test_not_null_where(model, column_name) %}\n\n  {% set where = kwargs.get('where', kwargs.get('arg')) %}\n  {# override dbt-utils' integration tests args default see: #}\n  {# https://github.com/fishtown-analytics/dbt-utils/blob/bbba960726667abc66b42624f0d36bbb62c37593/integration_tests/models/schema_tests/schema.yml#L53-L65 #}\n  {# TSQL has no bool type #}\n  {% if where == '_deleted = false' %}\n      {% set where = '_deleted = 0' %}\n  {% endif %}\n\n  {{ return(dbt_utils.default__test_not_null_where(model, column_name, **kwargs)) }}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720537837.3328958, "supported_languages": null}, "macro.tsql_utils.sqlserver__test_unique_where": {"name": "sqlserver__test_unique_where", "resource_type": "macro", "package_name": "tsql_utils", "path": "macros\\dbt_utils\\schema_tests\\test_unique_where.sql", "original_file_path": "macros\\dbt_utils\\schema_tests\\test_unique_where.sql", "unique_id": "macro.tsql_utils.sqlserver__test_unique_where", "macro_sql": "{% macro sqlserver__test_unique_where(model, column_name) %}\n  {% set where = kwargs.get('where', kwargs.get('arg')) %}\n  {# override dbt-utils' integration tests args default see: #}\n  {# https://github.com/fishtown-analytics/dbt-utils/blob/bbba960726667abc66b42624f0d36bbb62c37593/integration_tests/models/schema_tests/schema.yml#L53-L65 #}\n  {# TSQL has no bool type #}\n  {% if where == '_deleted = false' %}\n      {% set where = '_deleted = 0' %}\n  {% endif %}\n\n  {{ return(dbt_utils.default__test_unique_where(model, column_name=column_name)) }}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720537837.3328958, "supported_languages": null}, "macro.tsql_utils.sqlserver__deduplicate": {"name": "sqlserver__deduplicate", "resource_type": "macro", "package_name": "tsql_utils", "path": "macros\\dbt_utils\\sql\\deduplicate.sql", "original_file_path": "macros\\dbt_utils\\sql\\deduplicate.sql", "unique_id": "macro.tsql_utils.sqlserver__deduplicate", "macro_sql": "\n{%- macro sqlserver__deduplicate(relation, partition_by, order_by) -%}\n\n    select top 1 with ties\n        *\n    from {{ relation }}\n    order by row_number() over (\n        partition by {{ partition_by }}\n        order by {{ order_by }}\n    )\n\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720537837.3328958, "supported_languages": null}, "macro.tsql_utils.sqlserver__generate_series": {"name": "sqlserver__generate_series", "resource_type": "macro", "package_name": "tsql_utils", "path": "macros\\dbt_utils\\sql\\generate_series.sql", "original_file_path": "macros\\dbt_utils\\sql\\generate_series.sql", "unique_id": "macro.tsql_utils.sqlserver__generate_series", "macro_sql": "{% macro sqlserver__generate_series(upper_bound) %}\n\n    {% set n = dbt_utils.get_powers_of_two(upper_bound) %}\n\n    with p as (\n        select 0 as generated_number union all select 1\n    ), unioned as (\n\n    select\n\n    {% for i in range(n) %}\n    p{{i}}.generated_number * power(2, {{i}})\n    {% if not loop.last %} + {% endif %}\n    {% endfor %}\n    + 1\n    as generated_number\n\n    from\n\n    {% for i in range(n) %}\n    p as p{{i}}\n    {% if not loop.last %} cross join {% endif %}\n    {% endfor %}\n\n    )\n\n    select *\n    from unioned\n    where generated_number <= {{upper_bound}}\n    {# in TSQL you can't have an order by in a view statement! #}\n    {# order by generated_number #}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.get_powers_of_two"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720537837.3328958, "supported_languages": null}, "macro.tsql_utils.sqlserver__get_tables_by_pattern_sql": {"name": "sqlserver__get_tables_by_pattern_sql", "resource_type": "macro", "package_name": "tsql_utils", "path": "macros\\dbt_utils\\sql\\get_tables_by_pattern_sql.sql", "original_file_path": "macros\\dbt_utils\\sql\\get_tables_by_pattern_sql.sql", "unique_id": "macro.tsql_utils.sqlserver__get_tables_by_pattern_sql", "macro_sql": "{% macro sqlserver__get_tables_by_pattern_sql(schema_pattern, table_pattern, exclude='', database=target.database) %}\n\n        SELECT DISTINCT\n            table_schema AS \"table_schema\",\n            table_name AS \"table_name\"\n        FROM {{database}}.information_schema.tables\n        WHERE table_schema LIKE '{{ schema_pattern }}'\n        AND table_name LIKE '{{ table_pattern }}'\n        AND table_name NOT LIKE '{{ exclude }}'\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720537837.3429081, "supported_languages": null}, "macro.tsql_utils.surrogate_key": {"name": "surrogate_key", "resource_type": "macro", "package_name": "tsql_utils", "path": "macros\\dbt_utils\\sql\\surrogate_key.sql", "original_file_path": "macros\\dbt_utils\\sql\\surrogate_key.sql", "unique_id": "macro.tsql_utils.surrogate_key", "macro_sql": "\n\n\n{%- macro surrogate_key(field_list, col_type=None, use_binary_hash=None) -%}\n\n    {%- if col_type == None -%}\n        {%- set col_type = var(\n            \"tsql_utils_surrogate_key_col_type\",\n            \"varchar(8000)\"\n        ) -%}\n    {%- endif -%}\n\n    {%- if use_binary_hash == None -%}\n        {%- set use_binary_hash = var(\n            \"tsql_utils_surrogate_key_use_binary_hash\",\n            False\n        ) -%}\n    {%- endif -%}\n\n    {%- if field_list is string -%}\n        {%- set field_list = [field_list] -%}\n    {%- endif -%}\n\n    {%- set fields = [] -%}\n\n    {%- for field in field_list -%}\n\n        {%- set _ = fields.append(\n            \"coalesce(cast(\" ~ field ~ \" as \" ~ col_type ~ \"), '')\"\n        ) -%}\n\n        {%- if not loop.last %}\n            {%- set _ = fields.append(\"'-'\") -%}\n        {%- endif -%}\n\n    {%- endfor -%}\n\n    {%- if use_binary_hash == True -%}\n        {%- set key = \"hashbytes('md5', \" ~ dbt_utils.concat(fields) ~ \")\" -%}\n    {%- else -%}\n        {%- set key = dbt_utils.hash(dbt_utils.concat(fields)) -%}\n    {%- endif -%}\n\n    {{ key }}\n\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.concat", "macro.dbt.hash"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720537837.347919, "supported_languages": null}, "macro.tsql_utils.cast_hash_to_str": {"name": "cast_hash_to_str", "resource_type": "macro", "package_name": "tsql_utils", "path": "macros\\dbt_utils\\sql\\surrogate_key.sql", "original_file_path": "macros\\dbt_utils\\sql\\surrogate_key.sql", "unique_id": "macro.tsql_utils.cast_hash_to_str", "macro_sql": "\n{%- macro cast_hash_to_str(col) -%}\n  convert(varchar(32), {{ col }}, 2)\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720537837.347919, "supported_languages": null}, "macro.tsql_utils.get_start_stop_dates": {"name": "get_start_stop_dates", "resource_type": "macro", "package_name": "tsql_utils", "path": "macros\\materializations\\insert_by_period_helpers.sql", "original_file_path": "macros\\materializations\\insert_by_period_helpers.sql", "unique_id": "macro.tsql_utils.get_start_stop_dates", "macro_sql": "{% macro get_start_stop_dates(timestamp_field, date_source_models) %}\n\n    {% if config.get('start_date', default=none) is not none %}\n\n        {%- set start_date = config.get('start_date') -%}\n        {%- set stop_date = config.get('stop_date', default=none) -%}\n\n        {% do return({'start_date': start_date,'stop_date': stop_date}) %}\n\n    {% elif date_source_models is not none %}\n\n        {% if date_source_models is string %}\n            {% set date_source_models = [date_source_models] %}\n        {% endif %}\n        {% set query_sql %}\n            WITH stage AS (\n            {% for source_model in date_source_models %}\n                SELECT {{ timestamp_field }} FROM {{ ref(source_model) }}\n                {% if not loop.last %} UNION ALL {% endif %}\n            {% endfor %})\n\n            SELECT MIN({{ timestamp_field }}) AS MIN, MAX({{ timestamp_field }}) AS MAX\n            FROM stage\n        {% endset %}\n\n        {% set min_max_dict = dbt_utils.get_query_results_as_dict(query_sql) %}\n\n        {% set start_date = min_max_dict['MIN'][0] | string %}\n        {% set stop_date = min_max_dict['MAX'][0] | string %}\n        {% set min_max_dates = {\"start_date\": start_date, \"stop_date\": stop_date} %}\n\n        {% do return(min_max_dates) %}\n\n    {% else %}\n        {%- if execute -%}\n            {{ exceptions.raise_compiler_error(\"Invalid 'insert_by_period' configuration. Must provide 'start_date' and 'stop_date' and/or 'date_source_models' options.\") }}\n        {%- endif -%}\n    {% endif %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.get_query_results_as_dict"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720537837.3789525, "supported_languages": null}, "macro.tsql_utils.check_placeholder": {"name": "check_placeholder", "resource_type": "macro", "package_name": "tsql_utils", "path": "macros\\materializations\\insert_by_period_helpers.sql", "original_file_path": "macros\\materializations\\insert_by_period_helpers.sql", "unique_id": "macro.tsql_utils.check_placeholder", "macro_sql": "{% macro check_placeholder(model_sql, placeholder='__PERIOD_FILTER__') %}\n\n    {%- if model_sql.find(placeholder) == -1 -%}\n        {%- set error_message -%}\n            Model '{{ model.unique_id }}' does not include the required string '__PERIOD_FILTER__' in its sql\n        {%- endset -%}\n        {{ exceptions.raise_compiler_error(error_message) }}\n    {%- endif -%}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720537837.3789525, "supported_languages": null}, "macro.tsql_utils.replace_placeholder_with_period_filter": {"name": "replace_placeholder_with_period_filter", "resource_type": "macro", "package_name": "tsql_utils", "path": "macros\\materializations\\insert_by_period_helpers.sql", "original_file_path": "macros\\materializations\\insert_by_period_helpers.sql", "unique_id": "macro.tsql_utils.replace_placeholder_with_period_filter", "macro_sql": "\n\n{%- macro replace_placeholder_with_period_filter(core_sql, timestamp_field, start_timestamp, stop_timestamp, offset, period) -%}\n\n    {%- set period_filter -%}\n\n            (CAST({{ timestamp_field }} AS DATE) >= DATEADD({{period}}, {{offset}}, CAST('{{ start_timestamp }}' AS DATE)) AND\n            CAST({{ timestamp_field }} AS DATE) < DATEADD({{period}}, {{offset}} + 1, CAST('{{ start_timestamp }}' AS DATE))) AND\n            (CAST({{ timestamp_field }} AS DATE) >= CAST('{{start_timestamp}}' AS DATE))\n    {%- endset -%}\n\n    {%- set filtered_sql = core_sql | replace(\"__PERIOD_FILTER__\", period_filter) -%}\n\n    {% do return(filtered_sql) %}\n\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720537837.3884926, "supported_languages": null}, "macro.tsql_utils.get_period_boundaries": {"name": "get_period_boundaries", "resource_type": "macro", "package_name": "tsql_utils", "path": "macros\\materializations\\insert_by_period_helpers.sql", "original_file_path": "macros\\materializations\\insert_by_period_helpers.sql", "unique_id": "macro.tsql_utils.get_period_boundaries", "macro_sql": "{% macro get_period_boundaries(target_schema, target_table, timestamp_field, start_date, stop_date, period) -%}\n\n    {% set period_boundary_sql -%}\n        with data as (\n            select\n                coalesce(max({{ timestamp_field }}), '{{ start_date }}') as start_timestamp,\n                coalesce({{ dbt_utils.dateadd('millisecond', 86399999, \"nullif('\" ~ stop_date | lower ~ \"','none')\") }},\n                         {{ dbt_utils.current_timestamp() }} ) as stop_timestamp\n            from {{ target_schema }}.{{ target_table }}\n        )\n        select\n            start_timestamp,\n            stop_timestamp,\n            {{ dbt_utils.datediff('start_timestamp',\n                                  'stop_timestamp',\n                                  period) }} + 1 as num_periods\n        from data\n    {%- endset %}\n\n    {% set period_boundaries_dict = dbt_utils.get_query_results_as_dict(period_boundary_sql) %}\n\n    {% set period_boundaries = {'start_timestamp': period_boundaries_dict['start_timestamp'][0] | string,\n                                'stop_timestamp': period_boundaries_dict['stop_timestamp'][0] | string,\n                                'num_periods': period_boundaries_dict['num_periods'][0] | int} %}\n\n    {% do return(period_boundaries) %}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.dateadd", "macro.dbt.current_timestamp", "macro.dbt.datediff", "macro.dbt_utils.get_query_results_as_dict"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720537837.3884926, "supported_languages": null}, "macro.tsql_utils.get_period_of_load": {"name": "get_period_of_load", "resource_type": "macro", "package_name": "tsql_utils", "path": "macros\\materializations\\insert_by_period_helpers.sql", "original_file_path": "macros\\materializations\\insert_by_period_helpers.sql", "unique_id": "macro.tsql_utils.get_period_of_load", "macro_sql": "\n\n{%- macro get_period_of_load(period, offset, start_timestamp) -%}\n\n    {% set period_of_load_sql -%}\n        SELECT DATEADD({{ period }}, {{ offset }}, CAST('{{start_timestamp}}' AS DATE)) AS period_of_load\n    {%- endset %}\n\n    {% set period_of_load_dict = dbt_utils.get_query_results_as_dict(period_of_load_sql) %}\n\n    {% set period_of_load = period_of_load_dict['period_of_load'][0] | string %}\n\n    {% do return(period_of_load) %}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt_utils.get_query_results_as_dict"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720537837.3884926, "supported_languages": null}, "macro.tsql_utils.get_period_filter_sql": {"name": "get_period_filter_sql", "resource_type": "macro", "package_name": "tsql_utils", "path": "macros\\materializations\\insert_by_period_helpers.sql", "original_file_path": "macros\\materializations\\insert_by_period_helpers.sql", "unique_id": "macro.tsql_utils.get_period_filter_sql", "macro_sql": "{%- macro get_period_filter_sql(target_cols_csv, base_sql, timestamp_field, period, start_timestamp, stop_timestamp, offset) -%}\n\n    {%- set filtered_sql = {'sql': base_sql} -%}\n\n    {%- do filtered_sql.update({'sql': tsql_utils.replace_placeholder_with_period_filter(filtered_sql.sql,\n                                                                                       timestamp_field,\n                                                                                       start_timestamp,\n                                                                                       stop_timestamp,\n                                                                                       offset, period)}) -%}\n    {{ filtered_sql.sql }}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.tsql_utils.replace_placeholder_with_period_filter"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720537837.3930573, "supported_languages": null}, "macro.tsql_utils.materialization_insert_by_period_sqlserver": {"name": "materialization_insert_by_period_sqlserver", "resource_type": "macro", "package_name": "tsql_utils", "path": "macros\\materializations\\insert_by_period_materialization.sql", "original_file_path": "macros\\materializations\\insert_by_period_materialization.sql", "unique_id": "macro.tsql_utils.materialization_insert_by_period_sqlserver", "macro_sql": "{% materialization insert_by_period, adapter = 'sqlserver' -%}\n\n    {%- set full_refresh_mode = flags.FULL_REFRESH -%}\n\n    {%- set target_relation = this -%}\n    {%- set existing_relation = load_relation(this) -%}\n    {%- set tmp_relation = make_temp_relation(this) -%}\n\n    {%- set target_relation = api.Relation.create(\n        database = target_relation.database,\n        schema = target_relation.schema,\n        identifier = target_relation.identifier,\n        type = 'table'\n    ) -%}\n\n\n\n    {%- set timestamp_field = config.require('timestamp_field') -%}\n    {%- set date_source_models = config.get('date_source_models', default=none) -%}\n    {%- set unique_key = config.get('unique_key', default=none) -%}\n\n    {%- set start_stop_dates = tsql_utils.get_start_stop_dates(timestamp_field, date_source_models) | as_native -%}\n\n    {%- set period = config.get('period', default='day') -%}\n\n    {%- set to_drop = [] -%}\n\n    {%- do tsql_utils.check_placeholder(sql) -%}\n\n    {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n    -- `BEGIN` happens here:\n    {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n    {% if existing_relation is none %}\n\n        {% set filtered_sql = tsql_utils.replace_placeholder_with_period_filter(sql, timestamp_field,\n                                                                       start_stop_dates.start_date,\n                                                                       start_stop_dates.stop_date,\n                                                                       0, period) %}\n        {% set build_sql = create_table_as(False, target_relation, filtered_sql) %}\n\n        {% do to_drop.append(tmp_relation) %}\n\n    {% elif existing_relation.is_view or full_refresh_mode %}\n        {#-- Make sure the backup doesn't exist so we don't encounter issues with the rename below #}\n        {% set backup_identifier = existing_relation.identifier ~ \"__dbt_backup\" %}\n        {% set backup_relation = existing_relation.incorporate(path={\"identifier\": backup_identifier}) %}\n\n        {% do adapter.drop_relation(backup_relation) %}\n        {% do adapter.rename_relation(target_relation, backup_relation) %}\n\n        {% set filtered_sql = tsql_utils.replace_placeholder_with_period_filter(sql, timestamp_field,\n                                                                       start_stop_dates.start_date,\n                                                                       start_stop_dates.stop_date,\n                                                                       0, period) %}\n        {% set build_sql = create_table_as(False, target_relation, filtered_sql) %}\n\n        {% do to_drop.append(tmp_relation) %}\n        {% do to_drop.append(backup_relation) %}\n    {% else %}\n\n        {% set period_boundaries = tsql_utils.get_period_boundaries(schema,\n                                                                  target_relation.name,\n                                                                  timestamp_field,\n                                                                  start_stop_dates.start_date,\n                                                                  start_stop_dates.stop_date,\n                                                                  period) %}\n\n        {% set target_columns = adapter.get_columns_in_relation(target_relation) %}\n        {%- set target_cols_csv = target_columns | map(attribute='quoted') | join(', ') -%}\n        {%- set loop_vars = {'sum_rows_inserted': 0} -%}\n\n        {% for i in range(1, period_boundaries.num_periods) -%}\n\n            {%- set iteration_number = i + 1 -%}\n            {%- set period_of_load = tsql_utils.get_period_of_load(period, i, period_boundaries.start_timestamp) -%}\n\n            {{ dbt_utils.log_info(\"Running for {} {} of {} ({}) [{}]\".format(period, iteration_number, period_boundaries.num_periods, period_of_load, model.unique_id)) }}\n\n            {%- set tmp_identifier = target_relation.identifier ~ '__dbt_incremental_period' ~ i ~ '_tmp' -%}\n            {%- set tmp_relation = api.Relation.create(\n                                               identifier=tmp_identifier,\n                                                database = target_relation.database,\n                                                schema = target_relation.schema, \n                                               type='table') -%}\n\n\n            {% set tmp_table_sql = tsql_utils.get_period_filter_sql(target_cols_csv, sql, timestamp_field, period,\n                                                                  period_boundaries.start_timestamp,\n                                                                  period_boundaries.stop_timestamp, i) %}\n\n            {% call statement() -%}\n                {{ create_table_as(True, tmp_relation, tmp_table_sql) }}\n            {%- endcall %}\n\n            {{ adapter.expand_target_column_types(from_relation=tmp_relation,\n                                                  to_relation=target_relation) }}\n\n            {%- set insert_query_name = 'main-' ~ i -%}\n            {% call statement(insert_query_name, fetch_result=True) -%}\n\n                {%- if unique_key is not none -%}\n                delete\n                from {{ target_relation }}\n                where ({{ unique_key }}) in (\n                    select ({{ unique_key }})\n                    from {{ tmp_relation }}\n                );\n                {%- endif %}    \n\n                insert into {{ target_relation }} ({{ target_cols_csv }})\n                (\n                    select {{ target_cols_csv }}\n                    from {{ tmp_relation.include(schema=True) }}\n                );\n            {%- endcall %}\n\n            {% set result = load_result(insert_query_name) %}\n\n            {% if 'response' in result.keys() %} {# added in v0.19.0 #}\n                {% set rows_inserted = result['response']['rows_affected'] %}\n            {% else %} {# older versions #}\n                {% set rows_inserted = result['status'].split(\" \")[2] | int %}\n            {% endif %}\n\n            {%- set sum_rows_inserted = loop_vars['sum_rows_inserted'] + rows_inserted -%}\n            {%- do loop_vars.update({'sum_rows_inserted': sum_rows_inserted}) %}\n\n            {{ dbt_utils.log_info(\"Ran for {} {} of {} ({}); {} records inserted [{}]\".format(period, iteration_number,\n                                                                                              period_boundaries.num_periods,\n                                                                                              period_of_load, rows_inserted,\n                                                                                              model.unique_id)) }}\n\n            {% do to_drop.append(tmp_relation) %}\n            {% do adapter.commit() %}\n\n        {% endfor %}\n\n        {% call noop_statement('main', \"INSERT {}\".format(loop_vars['sum_rows_inserted']) ) -%}\n            {{ tmp_table_sql }}\n        {%- endcall %}\n\n    {% endif %}\n\n    {% if build_sql is defined %}\n        {% call statement(\"main\", fetch_result=True) %}\n            {{ build_sql }}\n        {% endcall %}\n\n        {% set result = load_result('main') %}\n\n        {% if 'response' in result.keys() %} {# added in v0.19.0 #}\n            {% set rows_inserted = result['response']['rows_affected'] %}\n        {% else %} {# older versions #}\n            {% set rows_inserted = result['status'].split(\" \")[2] | int %}\n        {% endif %}\n\n        {% call noop_statement('main', \"BASE LOAD {}\".format(rows_inserted)) -%}\n            {{ build_sql }}\n        {%- endcall %}\n\n        {% do adapter.commit() %}\n    {% endif %}\n\n    {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n    {% for rel in to_drop %}\n        {% if rel.type is not none %}\n            {% do adapter.drop_relation(rel) %}\n        {% endif %}\n    {% endfor %}\n\n    {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n    {{ return({'relations': [target_relation]}) }}\n\n{%- endmaterialization %}", "depends_on": {"macros": ["macro.dbt.load_relation", "macro.dbt.make_temp_relation", "macro.tsql_utils.get_start_stop_dates", "macro.tsql_utils.check_placeholder", "macro.dbt.run_hooks", "macro.tsql_utils.replace_placeholder_with_period_filter", "macro.dbt.create_table_as", "macro.tsql_utils.get_period_boundaries", "macro.tsql_utils.get_period_of_load", "macro.dbt_utils.log_info", "macro.tsql_utils.get_period_filter_sql", "macro.dbt.statement", "macro.dbt.noop_statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720537837.4231164, "supported_languages": ["sql"]}, "macro.dbtProject_v2.test_IMO_mismatch_AUX": {"name": "test_IMO_mismatch_AUX", "resource_type": "macro", "package_name": "dbtProject_v2", "path": "tests\\generic\\IMO_mismatch_AUX.sql", "original_file_path": "tests\\generic\\IMO_mismatch_AUX.sql", "unique_id": "macro.dbtProject_v2.test_IMO_mismatch_AUX", "macro_sql": "{% test IMO_mismatch_AUX(model) %}\r\n\r\nWITH pt AS (\r\n    SELECT DISTINCT IMONUMBER AS IMO\r\n    FROM \"PANDT\".\"FPS\".\"dbo\".navis_db_ae_operation\r\n),\r\nrs AS (\r\n    SELECT DISTINCT IMO AS IMO\r\n    FROM {{model}}\r\n)\r\n\r\nSELECT\r\n    pt.IMO \r\nFROM\r\n    pt\r\nLEFT JOIN rs ON pt.IMO = rs.IMO\r\nWHERE\r\n    rs.IMO IS NULL\r\n\r\n{% endtest %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720542776.0278225, "supported_languages": null}, "macro.dbtProject_v2.test_IMO_mismatch_consumption": {"name": "test_IMO_mismatch_consumption", "resource_type": "macro", "package_name": "dbtProject_v2", "path": "tests\\generic\\IMO_mismatch_consumption.sql", "original_file_path": "tests\\generic\\IMO_mismatch_consumption.sql", "unique_id": "macro.dbtProject_v2.test_IMO_mismatch_consumption", "macro_sql": "{% test IMO_mismatch_consumption(model) %}\r\n\r\nWITH pt AS (\r\n    SELECT DISTINCT IMONUMBER AS IMO\r\n    FROM \"PANDT\".\"FPS\".\"dbo\".navis_db_fuel_consumption\r\n),\r\nrs AS (\r\n    SELECT DISTINCT IMO AS IMO\r\n    FROM {{model}}\r\n)\r\n\r\nSELECT\r\n    pt.IMO \r\nFROM\r\n    pt\r\nLEFT JOIN rs ON pt.IMO = rs.IMO\r\nWHERE\r\n    rs.IMO IS NULL\r\n\r\n{% endtest %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720542776.0278225, "supported_languages": null}, "macro.dbtProject_v2.test_reportId_mismatch_MAIN": {"name": "test_reportId_mismatch_MAIN", "resource_type": "macro", "package_name": "dbtProject_v2", "path": "tests\\generic\\reportId_mismatch_MAIN.sql", "original_file_path": "tests\\generic\\reportId_mismatch_MAIN.sql", "unique_id": "macro.dbtProject_v2.test_reportId_mismatch_MAIN", "macro_sql": "{% test reportId_mismatch_MAIN(model) %}\r\n\r\nWITH pt AS (\r\n    SELECT DISTINCT reportid AS id\r\n    FROM \"PANDT\".\"FPS\".\"dbo\".navis_db_me_operation\r\n),\r\nrs AS (\r\n    SELECT DISTINCT reportid AS id\r\n    FROM {{model}}\r\n)\r\n\r\nSELECT\r\n    pt.id AS reportid\r\nFROM\r\n    pt\r\nLEFT JOIN rs ON pt.id = rs.id\r\nWHERE\r\n    rs.id IS NULL\r\n\r\n{% endtest %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720542776.0278225, "supported_languages": null}, "macro.dbtProject_v2.test_reportId_mismatch_consumption": {"name": "test_reportId_mismatch_consumption", "resource_type": "macro", "package_name": "dbtProject_v2", "path": "tests\\generic\\reportId_mismatch_consumption.sql", "original_file_path": "tests\\generic\\reportId_mismatch_consumption.sql", "unique_id": "macro.dbtProject_v2.test_reportId_mismatch_consumption", "macro_sql": "{% test reportId_mismatch_consumption(model) %}\r\n\r\nWITH pt AS (\r\n    SELECT DISTINCT reportid AS id\r\n    FROM \"PANDT\".\"FPS\".\"dbo\".navis_db_fuel_consumption\r\n),\r\nrs AS (\r\n    SELECT DISTINCT reportid AS id\r\n    FROM {{model}}\r\n)\r\n\r\nSELECT\r\n    pt.id AS reportid\r\nFROM\r\n    pt\r\nLEFT JOIN rs ON pt.id = rs.id\r\nWHERE\r\n    rs.id IS NULL\r\n\r\n{% endtest %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720542776.0278225, "supported_languages": null}, "macro.dbtProject_v2.test_reportId_mismatch_Boiler": {"name": "test_reportId_mismatch_Boiler", "resource_type": "macro", "package_name": "dbtProject_v2", "path": "tests\\generic\\reportId_mismatch_Boiler.sql", "original_file_path": "tests\\generic\\reportId_mismatch_Boiler.sql", "unique_id": "macro.dbtProject_v2.test_reportId_mismatch_Boiler", "macro_sql": "{% test reportId_mismatch_Boiler(model) %}\r\n\r\nWITH pt AS (\r\n    SELECT DISTINCT reportid AS id\r\n    FROM \"PANDT\".\"FPS\".\"dbo\".navis_db_boiler_operation\r\n),\r\nrs AS (\r\n    SELECT DISTINCT reportid AS id\r\n    FROM {{model}}\r\n)\r\n\r\nSELECT\r\n    pt.id AS reportid\r\nFROM\r\n    pt\r\nLEFT JOIN rs ON pt.id = rs.id\r\nWHERE\r\n    rs.id IS NULL\r\n\r\n{% endtest %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720542776.0278225, "supported_languages": null}, "macro.dbtProject_v2.test_IMO_mismatch_Boiler": {"name": "test_IMO_mismatch_Boiler", "resource_type": "macro", "package_name": "dbtProject_v2", "path": "tests\\generic\\IMO_mismatch_Boiler.sql", "original_file_path": "tests\\generic\\IMO_mismatch_Boiler.sql", "unique_id": "macro.dbtProject_v2.test_IMO_mismatch_Boiler", "macro_sql": "{% test IMO_mismatch_Boiler(model) %}\r\n\r\nWITH pt AS (\r\n    SELECT DISTINCT IMONUMBER AS IMO\r\n    FROM \"PANDT\".\"FPS\".\"dbo\".navis_db_boiler_operation\r\n),\r\nrs AS (\r\n    SELECT DISTINCT IMO AS IMO\r\n    FROM {{model}}\r\n)\r\n\r\nSELECT\r\n    pt.IMO \r\nFROM\r\n    pt\r\nLEFT JOIN rs ON pt.IMO = rs.IMO\r\nWHERE\r\n    rs.IMO IS NULL\r\n\r\n{% endtest %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720542776.0278225, "supported_languages": null}, "macro.dbtProject_v2.test_IMO_mismatch_MAIN": {"name": "test_IMO_mismatch_MAIN", "resource_type": "macro", "package_name": "dbtProject_v2", "path": "tests\\generic\\IMO_mismatch_MAIN.sql", "original_file_path": "tests\\generic\\IMO_mismatch_MAIN.sql", "unique_id": "macro.dbtProject_v2.test_IMO_mismatch_MAIN", "macro_sql": "{% test IMO_mismatch_MAIN(model) %}\r\n\r\nWITH pt AS (\r\n    SELECT DISTINCT IMONUMBER AS IMO\r\n    FROM \"PANDT\".\"FPS\".\"dbo\".navis_db_me_operation\r\n),\r\nrs AS (\r\n    SELECT DISTINCT IMO AS IMO\r\n    FROM {{model}}\r\n)\r\n\r\nSELECT\r\n    pt.IMO \r\nFROM\r\n    pt\r\nLEFT JOIN rs ON pt.IMO = rs.IMO\r\nWHERE\r\n    rs.IMO IS NULL\r\n\r\n{% endtest %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720542776.0278225, "supported_languages": null}, "macro.dbtProject_v2.test_reportId_mismatch_AUX": {"name": "test_reportId_mismatch_AUX", "resource_type": "macro", "package_name": "dbtProject_v2", "path": "tests\\generic\\reportId_mismatch_AUX.sql", "original_file_path": "tests\\generic\\reportId_mismatch_AUX.sql", "unique_id": "macro.dbtProject_v2.test_reportId_mismatch_AUX", "macro_sql": "{% test reportId_mismatch_AUX(model) %}\r\n\r\nWITH pt AS (\r\n    SELECT DISTINCT reportid AS id\r\n    FROM \"PANDT\".\"FPS\".\"dbo\".navis_db_ae_operation\r\n),\r\nrs AS (\r\n    SELECT DISTINCT reportid AS id\r\n    FROM {{model}}\r\n)\r\n\r\nSELECT\r\n    pt.id AS reportid\r\nFROM\r\n    pt\r\nLEFT JOIN rs ON pt.id = rs.id\r\nWHERE\r\n    rs.id IS NULL\r\n\r\n{% endtest %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720542776.0278225, "supported_languages": null}, "macro.dbtProject_v2.test_reportId_mismatch_lubOil": {"name": "test_reportId_mismatch_lubOil", "resource_type": "macro", "package_name": "dbtProject_v2", "path": "tests\\generic\\reportId_mismatch_lubOil.sql", "original_file_path": "tests\\generic\\reportId_mismatch_lubOil.sql", "unique_id": "macro.dbtProject_v2.test_reportId_mismatch_lubOil", "macro_sql": "{% test reportId_mismatch_lubOil(model) %}\r\n\r\nWITH pt AS (\r\n    SELECT DISTINCT reportid AS id\r\n    FROM \"PANDT\".\"FPS\".\"dbo\".navis_db_lub_oil_consumption\r\n),\r\nrs AS (\r\n    SELECT DISTINCT reportid AS id\r\n    FROM {{model}}\r\n)\r\n\r\nSELECT\r\n    pt.id AS reportid\r\nFROM\r\n    pt\r\nLEFT JOIN rs ON pt.id = rs.id\r\nWHERE\r\n    rs.id IS NULL\r\n\r\n{% endtest %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720542776.0278225, "supported_languages": null}, "macro.dbtProject_v2.test_IMO_mismatch_lubOil": {"name": "test_IMO_mismatch_lubOil", "resource_type": "macro", "package_name": "dbtProject_v2", "path": "tests\\generic\\IMO_mismatch_lubOil.sql", "original_file_path": "tests\\generic\\IMO_mismatch_lubOil.sql", "unique_id": "macro.dbtProject_v2.test_IMO_mismatch_lubOil", "macro_sql": "{% test IMO_mismatch_lubOil(model) %}\r\n\r\nWITH pt AS (\r\n    SELECT DISTINCT IMONUMBER AS IMO\r\n    FROM \"PANDT\".\"FPS\".\"dbo\".navis_db_lub_oil_consumption\r\n),\r\nrs AS (\r\n    SELECT DISTINCT IMO AS IMO\r\n    FROM {{model}}\r\n)\r\n\r\nSELECT\r\n    pt.IMO \r\nFROM\r\n    pt\r\nLEFT JOIN rs ON pt.IMO = rs.IMO\r\nWHERE\r\n    rs.IMO IS NULL\r\n\r\n{% endtest %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1720542776.0278225, "supported_languages": null}}, "docs": {"doc.dbt.__overview__": {"name": "__overview__", "resource_type": "doc", "package_name": "dbt", "path": "overview.md", "original_file_path": "docs\\overview.md", "unique_id": "doc.dbt.__overview__", "block_contents": "### Welcome!\n\nWelcome to the auto-generated documentation for your dbt project!\n\n### Navigation\n\nYou can use the `Project` and `Database` navigation tabs on the left side of the window to explore the models\nin your project.\n\n#### Project Tab\nThe `Project` tab mirrors the directory structure of your dbt project. In this tab, you can see all of the\nmodels defined in your dbt project, as well as models imported from dbt packages.\n\n#### Database Tab\nThe `Database` tab also exposes your models, but in a format that looks more like a database explorer. This view\nshows relations (tables and views) grouped into database schemas. Note that ephemeral models are _not_ shown\nin this interface, as they do not exist in the database.\n\n### Graph Exploration\nYou can click the blue icon on the bottom-right corner of the page to view the lineage graph of your models.\n\nOn model pages, you'll see the immediate parents and children of the model you're exploring. By clicking the `Expand`\nbutton at the top-right of this lineage pane, you'll be able to see all of the models that are used to build,\nor are built from, the model you're exploring.\n\nOnce expanded, you'll be able to use the `--select` and `--exclude` model selection syntax to filter the\nmodels in the graph. For more information on model selection, check out the [dbt docs](https://docs.getdbt.com/docs/model-selection-syntax).\n\nNote that you can also right-click on models to interactively filter and explore the graph.\n\n---\n\n### More information\n\n- [What is dbt](https://docs.getdbt.com/docs/introduction)?\n- Read the [dbt viewpoint](https://docs.getdbt.com/docs/viewpoint)\n- [Installation](https://docs.getdbt.com/docs/installation)\n- Join the [dbt Community](https://www.getdbt.com/community/) for questions and discussion"}}, "exposures": {}, "metrics": {}, "selectors": {}, "disabled": {"model.dbtProject_v2.BTO_ReportSummariesEngine": [{"database": "Silver", "schema": "dbo", "name": "BTO_ReportSummariesEngine", "resource_type": "model", "package_name": "dbtProject_v2", "path": "silver\\BTO_ReportSummariesEngine.sql", "original_file_path": "models\\silver\\BTO_ReportSummariesEngine.sql", "unique_id": "model.dbtProject_v2.BTO_ReportSummariesEngine", "fqn": ["dbtProject_v2", "silver", "BTO_ReportSummariesEngine"], "alias": "BTO_ReportSummariesEngine", "checksum": {"name": "sha256", "checksum": "8f717e88b062307258eb2f382252fc14f6d5e804f991f710303da3e369986623"}, "config": {"enabled": false, "alias": null, "schema": "dbo", "database": "Silver", "tags": [], "meta": {}, "materialized": "ephemeral", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "ephemeral", "schema": "dbo", "database": "Silver", "enabled": false}, "created_at": 1720537838.5760376, "config_call_dict": {"materialized": "ephemeral", "enabled": false}, "relation_name": null, "raw_code": "{{ config(materialized='ephemeral', enabled = false) }}\r\n\r\nwith source as (\r\nselect\r\n\trs.reportId as reportId,\r\n    rs.IMO as IMO, \r\n    'Main' as EngineCategory, \r\n    CAST(JSON_VALUE(rsEngine.value, '$.name') as nvarchar(max)) as name,\r\n    CAST(JSON_VALUE(rsEngine.value, '$.runningHoursShaftGenerator') as nvarchar(max)) as runningHoursShaftGenerator,\r\n    CAST(JSON_VALUE(rsEngine.value, '$.averageShaftRpm') as nvarchar(max)) as averageShaftRpm,\r\n    CAST(JSON_VALUE(rsEngine.value, '$.shaftRevolutions') as nvarchar(max)) as shaftRevolutions,\r\n    CAST(JSON_VALUE(rsEngine.value, '$.generatorEfficiency') as nvarchar(max)) as generatorEfficiency ,\r\n    CAST(JSON_VALUE(rsEngine.value, '$.averageShaftPower') as nvarchar(max)) as averageShaftPower ,\r\n    CAST(JSON_VALUE(rsEngine.value, '$.generatedShaftEnergy') as nvarchar(max)) as generatedShaftEnergy ,\r\n    CAST(JSON_VALUE(rsEngine.value, '$.averageGeneratorPower') as nvarchar(max)) as averageGeneratorPower ,\r\n    CAST(JSON_VALUE(rsEngine.value, '$.relativePower') as nvarchar(max)) as relativePower,\r\n    CAST(JSON_VALUE(rsEngine.value, '$.generatedGeneratorEnergy') as nvarchar(max)) as generatedGeneratorEnergy,\r\n    CAST(JSON_VALUE(rsEngine.value, '$.propellerPitch') as nvarchar(max)) as propellerPitch,\r\n    CAST(JSON_VALUE(rsEngine.value, '$.slipThroughWater') as nvarchar(max)) as slipThroughWater,\r\n    CAST(JSON_VALUE(rsEngine.value, '$.slipOverGround') as nvarchar(max)) as slipOverGround,\r\n    CAST(JSON_VALUE(rsEngine.value, '$.engineDistance') as nvarchar(max)) as engineDistance,\r\n    CAST(JSON_VALUE(rsEngine.value, '$.relativeGeneratorPower') as nvarchar(max)) as relativeGeneratorPower,\r\n    CAST(JSON_VALUE(rsEngine.value, '$.load') as nvarchar(max)) as load,\r\n    CAST(JSON_QUERY(rsEngine.value, '$.lubOilConsumptions') as nvarchar(max)) as lubOilConsumptions,\r\n    CAST(JSON_VALUE(rsEngine.value, '$.averagePower') as nvarchar(max)) as averagePower,  \r\n    CAST(JSON_VALUE(rsEngine.value, '$.generatedEnergy') as nvarchar(max)) as generatedEnergy,  \r\n    CAST(JSON_VALUE(rsEngine.value, '$.sfoc') as nvarchar(max)) as sfoc,  \r\n    CAST(JSON_VALUE(rsEngine.value, '$.sfocIso') as nvarchar(max)) as sfocIso,  \r\n    CAST(JSON_VALUE(rsEngine.value, '$.averageNoxValue') as nvarchar(max)) as averageNoxValue,  \r\n    CAST(JSON_QUERY(rsEngine.value, '$.consumptions') as nvarchar(max)) as consumptions,\r\n    CAST(JSON_VALUE(rsEngine.value, '$.totalFoc') as nvarchar(max)) as totalFoc,  \r\n    CAST(JSON_VALUE(rsEngine.value, '$.totalFocIso') as nvarchar(max)) as totalFocIso,  \r\n    CAST(JSON_VALUE(rsEngine.value, '$.totalCo2') as nvarchar(max)) as totalCo2,  \r\n    CAST(JSON_VALUE(rsEngine.value, '$.no') as nvarchar(max)) as no, \r\n    CAST(JSON_VALUE(rsEngine.value, '$.runningHours') as nvarchar(max)) as runningHours, \r\n    getdate() as LoadDateTime, \r\n    rs.LOAD_ID as load_ID\r\nfrom {{ ref('bto_reportsummaries') }} as rs\r\ncross apply openjson(rs.json_data, '$.aggregationDetails.mainEngines') as rsEngine\r\nwhere isdeleted = 0\r\nUNION ALL\r\nselect \r\n\trs.reportId as reportId,\r\n    rs.IMO as IMO,  \r\n    'Aux' as EngineCategory, \r\n    CAST(JSON_VALUE(rsEngine.value, '$.name') as nvarchar(max)) as name,\r\n    CAST(JSON_VALUE(rsEngine.value, '$.runningHoursShaftGenerator') as nvarchar(max)) as runningHoursShaftGenerator,\r\n    CAST(JSON_VALUE(rsEngine.value, '$.averageShaftRpm') as nvarchar(max)) as averageShaftRpm,\r\n    CAST(JSON_VALUE(rsEngine.value, '$.shaftRevolutions') as nvarchar(max)) as shaftRevolutions,\r\n    CAST(JSON_VALUE(rsEngine.value, '$.generatorEfficiency') as nvarchar(max)) as generatorEfficiency ,\r\n    CAST(JSON_VALUE(rsEngine.value, '$.averageShaftPower') as nvarchar(max)) as averageShaftPower ,\r\n    CAST(JSON_VALUE(rsEngine.value, '$.generatedShaftEnergy') as nvarchar(max)) as generatedShaftEnergy ,\r\n    CAST(JSON_VALUE(rsEngine.value, '$.averageGeneratorPower') as nvarchar(max)) as averageGeneratorPower ,\r\n    CAST(JSON_VALUE(rsEngine.value, '$.relativePower') as nvarchar(max)) as relativePower,\r\n    CAST(JSON_VALUE(rsEngine.value, '$.generatedGeneratorEnergy') as nvarchar(max)) as generatedGeneratorEnergy,\r\n    CAST(JSON_VALUE(rsEngine.value, '$.propellerPitch') as nvarchar(max)) as propellerPitch,\r\n    CAST(JSON_VALUE(rsEngine.value, '$.slipThroughWater') as nvarchar(max)) as slipThroughWater,\r\n    CAST(JSON_VALUE(rsEngine.value, '$.slipOverGround') as nvarchar(max)) as slipOverGround,\r\n    CAST(JSON_VALUE(rsEngine.value, '$.engineDistance') as nvarchar(max)) as engineDistance,\r\n    CAST(JSON_VALUE(rsEngine.value, '$.relativeGeneratorPower') as nvarchar(max)) as relativeGeneratorPower,\r\n    CAST(JSON_VALUE(rsEngine.value, '$.load') as nvarchar(max)) as load,\r\n    CAST(JSON_QUERY(rsEngine.value, '$.lubOilConsumptions') as nvarchar(max)) as lubOilConsumptions,\r\n    CAST(JSON_VALUE(rsEngine.value, '$.averagePower') as nvarchar(max)) as averagePower,  \r\n    CAST(JSON_VALUE(rsEngine.value, '$.generatedEnergy') as nvarchar(max)) as generatedEnergy,  \r\n    CAST(JSON_VALUE(rsEngine.value, '$.sfoc') as nvarchar(max)) as sfoc,  \r\n    CAST(JSON_VALUE(rsEngine.value, '$.sfocIso') as nvarchar(max)) as sfocIso,  \r\n    CAST(JSON_VALUE(rsEngine.value, '$.averageNoxValue') as nvarchar(max)) as averageNoxValue,  \r\n    CAST(JSON_QUERY(rsEngine.value, '$.consumptions') as nvarchar(max)) as consumptions,\r\n    CAST(JSON_VALUE(rsEngine.value, '$.totalFoc') as nvarchar(max)) as totalFoc,  \r\n    CAST(JSON_VALUE(rsEngine.value, '$.totalFocIso') as nvarchar(max)) as totalFocIso,  \r\n    CAST(JSON_VALUE(rsEngine.value, '$.totalCo2') as nvarchar(max)) as totalCo2,  \r\n    CAST(JSON_VALUE(rsEngine.value, '$.no') as nvarchar(max)) as no, \r\n    CAST(JSON_VALUE(rsEngine.value, '$.runningHours') as nvarchar(max)) as runningHours,  \r\n    getdate() as LoadDateTime,\r\n    rs.LOAD_ID as load_ID\r\nfrom {{ ref('bto_reportsummaries') }} as rs\r\ncross apply openjson(rs.json_data, '$.aggregationDetails.auxEngines') as rsEngine\r\nwhere isdeleted = 0\r\n)\r\nselect * from source", "language": "sql", "refs": [["bto_reportsummaries"], ["bto_reportsummaries"]], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": []}, "compiled_path": null}], "model.dbtProject_v2.bto_events": [{"database": "Bronze", "schema": "dbo", "name": "bto_events", "resource_type": "model", "package_name": "dbtProject_v2", "path": "bronze\\bto_events.sql", "original_file_path": "models\\bronze\\bto_events.sql", "unique_id": "model.dbtProject_v2.bto_events", "fqn": ["dbtProject_v2", "bronze", "bto_events"], "alias": "bto_events", "checksum": {"name": "sha256", "checksum": "df4d6cd0eb3c1f0ab6a286e66432a58cf7e894f47fbd8536273ca672688f0ad8"}, "config": {"enabled": false, "alias": null, "schema": "dbo", "database": "Bronze", "tags": [], "meta": {}, "materialized": "incremental", "incremental_strategy": "delete+insert", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": "eventId", "on_schema_change": "sync_all_columns", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "as_columnstore": false, "post-hook": [{"sql": "\n            UPDATE {{ source('stage', 'api_bto_Events_Delta') }}\n            SET isNormalized = 1\n            WHERE LOAD_ID = {{ max_loadid('source', 'api_bto_Events_Delta') }}\n            AND isError = 0", "transaction": true, "index": null}], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "incremental", "schema": "dbo", "database": "Bronze", "as_columnstore": false, "unique_key": "eventId", "incremental_strategy": "delete+insert", "on_schema_change": "sync_all_columns", "enabled": false, "post-hook": ["\n            UPDATE {{ source('stage', 'api_bto_Events_Delta') }}\n            SET isNormalized = 1\n            WHERE LOAD_ID = {{ max_loadid('source', 'api_bto_Events_Delta') }}\n            AND isError = 0"]}, "created_at": 1720545157.4402516, "config_call_dict": {"materialized": "incremental", "as_columnstore": false, "unique_key": "eventId", "incremental_strategy": "delete+insert", "on_schema_change": "sync_all_columns", "enabled": false, "post-hook": ["\n            UPDATE {{ source('stage', 'api_bto_Events_Delta') }}\n            SET isNormalized = 1\n            WHERE LOAD_ID = {{ max_loadid('source', 'api_bto_Events_Delta') }}\n            AND isError = 0"]}, "relation_name": "\"Bronze\".\"dbo\".\"bto_events\"", "raw_code": "{{ config(\r\n        materialized = 'incremental',\r\n        as_columnstore = false,\r\n        unique_key = 'eventId',\r\n        incremental_strategy = 'delete+insert',\r\n        on_schema_change = 'sync_all_columns',\r\n        enabled = false, \r\n        post_hook = \"\r\n            UPDATE {{ source('stage', 'api_bto_Events_Delta') }}\r\n            SET isNormalized = 1\r\n            WHERE LOAD_ID = {{ max_loadid('source', 'api_bto_Events_Delta') }}\r\n            AND isError = 0\"\r\n) }}\r\n\r\nselect \r\n\tIMO, \r\n\tJSON_VALUE(sec.value, '$.id') as eventId, \r\n\t[value] as json_data, \r\n\tgetDate() as LoadDateTime, \r\n\tload_id\r\nfrom {{source('stage','api_bto_Events_Delta')}} as main\r\ncross apply openjson(main.rawdata, '$.items') as sec \r\nwhere Load_ID = {{ max_loadid('source', 'api_bto_Events_Delta') }}\r\nand IsError = 0", "language": "sql", "refs": [], "sources": [["stage", "api_bto_Events_Delta"], ["stage", "api_bto_Events_Delta"]], "metrics": [], "depends_on": {"macros": ["macro.dbtProject_v2.max_loadid"], "nodes": []}, "compiled_path": null}], "model.dbtProject_v2.BTO_Events": [{"database": "Silver", "schema": "dbo", "name": "BTO_Events", "resource_type": "model", "package_name": "dbtProject_v2", "path": "silver\\BTO_Events.sql", "original_file_path": "models\\silver\\BTO_Events.sql", "unique_id": "model.dbtProject_v2.BTO_Events", "fqn": ["dbtProject_v2", "silver", "BTO_Events"], "alias": "BTO_Events", "checksum": {"name": "sha256", "checksum": "2f3cce619086b70080e130049171f64054b2f79cc084245b78e9cc09f10eb764"}, "config": {"enabled": false, "alias": null, "schema": "dbo", "database": "Silver", "tags": [], "meta": {}, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "schema": "dbo", "database": "Silver", "enabled": false}, "created_at": 1720545452.0794997, "config_call_dict": {"enabled": false}, "relation_name": "\"Silver\".\"dbo\".\"BTO_Events\"", "raw_code": "{{ \r\nconfig(\r\n\tenabled = false\r\n)\r\n}}\r\n\r\n\r\nelect \r\n\tmain.IMO, \r\n\tmain.eventId, \r\n\tj.customId,\r\n\tj.timeStamp,\r\n\tj.eventType,\r\n\tj.voyageName,\r\n\tj.portUnloc,\r\n\tj.portName,\r\n\tj.portTerminalCode,\r\n\tj.link,\r\n\tgetdate() as LoadDateTime,\r\n\tmain.load_id\r\nfrom {{ ref('bto_events') }} main\r\nCROSS APPLY OPENJSON(json_data)\r\n\twith (\r\n\t\teventId int '$.id',\r\n\t\tcustomId varchar(max) '$.customId',\r\n\t\ttimeStamp datetimeoffset '$.timeStamp',\r\n\t\teventType varchar(max) '$.eventType',\r\n\t\timoNumber int '$.imoNumber',\r\n\t\tvoyageName varchar(max) '$.voyageName',\r\n\t\tportUnloc varchar(max) '$.portUnloc',\r\n\t\tportName varchar(max) '$.portName',\r\n\t\tportTerminalCode varchar(max) '$.portTerminalCode',\r\n\t\tlink varchar(max) '$.link'\r\n\t) j", "language": "sql", "refs": [["bto_events"]], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": []}, "compiled_path": null}]}, "parent_map": {"model.dbtProject_v2.bto_legsummary": ["source.dbtProject_v2.stage.api_bto_LegSummary_Delta", "source.dbtProject_v2.stage.api_bto_LegSummary_Delta"], "model.dbtProject_v2.BTO_LegSummary": ["model.dbtProject_v2.bto_legsummary"], "model.dbtProject_v2.BTO_Reports_Boiler": ["model.dbtProject_v2.bto_reportsummaries", "model.dbtProject_v2.bto_reportsummaries"], "model.dbtProject_v2.BTO_Reports_Consumptions": ["model.dbtProject_v2.bto_reportsummaries", "model.dbtProject_v2.bto_reportsummaries", "model.dbtProject_v2.bto_reportsummaries", "model.dbtProject_v2.bto_reportsummaries", "model.dbtProject_v2.bto_reportsummaries", "model.dbtProject_v2.bto_reportsummaries"], "model.dbtProject_v2.BTO_Reports_Engines_AUX": ["model.dbtProject_v2.bto_reportsummaries", "model.dbtProject_v2.bto_reportsummaries"], "model.dbtProject_v2.BTO_Reports_Engines_MAIN": ["model.dbtProject_v2.bto_reportsummaries", "model.dbtProject_v2.bto_reportsummaries"], "model.dbtProject_v2.BTO_Reports_LubOil": ["model.dbtProject_v2.bto_reportsummaries", "model.dbtProject_v2.bto_reportsummaries", "model.dbtProject_v2.bto_reportsummaries", "model.dbtProject_v2.bto_reportsummaries", "model.dbtProject_v2.bto_reportsummaries", "model.dbtProject_v2.bto_reportsummaries"], "model.dbtProject_v2.bto_Ships": ["model.dbtProject_v2.bto_ships"], "model.dbtProject_v2.btr_Ships": ["model.dbtProject_v2.btr_ships"], "model.dbtProject_v2.api_bto_shipsDeltaReports_expanded": ["model.dbtProject_v2.bto_reportsummaries", "model.dbtProject_v2.bto_reportsummaries", "source.dbtProject_v2.stage.api_bto_shipsDeltaReports", "source.dbtProject_v2.stage.api_bto_shipsDeltaReports_expanded"], "model.dbtProject_v2.lookup_shipsLastVersion": ["model.dbtProject_v2.bto_ReportSummaries", "model.dbtProject_v2.lookup_ships"], "test.dbtProject_v2.not_null_bto_legsummary_legEventId.86128d4d88": ["model.dbtProject_v2.bto_legsummary"], "test.dbtProject_v2.unique_bto_legsummary_legEventId.373a94c272": ["model.dbtProject_v2.bto_legsummary"], "test.dbtProject_v2.missing_legeventId_LS_BTO_LegSummary_.7966b9e8c0": ["model.dbtProject_v2.BTO_LegSummary"], "test.dbtProject_v2.full_table_scan_LS_BTO_LegSummary_.e2c4d34988": ["model.dbtProject_v2.BTO_LegSummary"], "test.dbtProject_v2.reportId_mismatch_consumption_BTO_Reports_Consumptions_.be82d6d8be": ["model.dbtProject_v2.BTO_Reports_Consumptions"], "test.dbtProject_v2.IMO_mismatch_consumption_BTO_Reports_Consumptions_.8b2d94804c": ["model.dbtProject_v2.BTO_Reports_Consumptions"], "test.dbtProject_v2.reportId_mismatch_Boiler_BTO_Reports_Boiler_.b407bfebad": ["model.dbtProject_v2.BTO_Reports_Boiler"], "test.dbtProject_v2.IMO_mismatch_Boiler_BTO_Reports_Boiler_.dd20263b34": ["model.dbtProject_v2.BTO_Reports_Boiler"], "test.dbtProject_v2.reportId_mismatch_lubOil_BTO_Reports_LubOil_.03afc6bce4": ["model.dbtProject_v2.BTO_Reports_LubOil"], "test.dbtProject_v2.IMO_mismatch_lubOil_BTO_Reports_LubOil_.09c59367a7": ["model.dbtProject_v2.BTO_Reports_LubOil"], "test.dbtProject_v2.reportId_mismatch_MAIN_BTO_Reports_Engines_MAIN_.1475841216": ["model.dbtProject_v2.BTO_Reports_Engines_MAIN"], "test.dbtProject_v2.IMO_mismatch_MAIN_BTO_Reports_Engines_MAIN_.1470dfcd66": ["model.dbtProject_v2.BTO_Reports_Engines_MAIN"], "test.dbtProject_v2.reportId_mismatch_AUX_BTO_Reports_Engines_AUX_.bbdc284253": ["model.dbtProject_v2.BTO_Reports_Engines_AUX"], "test.dbtProject_v2.IMO_mismatch_AUX_BTO_Reports_Engines_AUX_.6c1d9891fe": ["model.dbtProject_v2.BTO_Reports_Engines_AUX"], "model.dbtProject_v2.bto_ships": ["source.dbtProject_v2.stage.api_bto_ships", "source.dbtProject_v2.stage.api_bto_ships"], "model.dbtProject_v2.bto_reportsummaries": ["source.dbtProject_v2.stage.api_bto_shipsReportSDelta"], "model.dbtProject_v2.btr_ships": ["source.dbtProject_v2.stage.api_btr_ships", "source.dbtProject_v2.stage.api_btr_ships"], "model.dbtProject_v2.lookup_ships": ["model.dbtProject_v2.bto_Ships", "model.dbtProject_v2.btr_Ships", "source.dbtProject_v2.corpdata.DimVesselSS"], "test.dbtProject_v2.not_null_bto_ships_IMO.c3725a3f1d": ["model.dbtProject_v2.bto_ships"], "test.dbtProject_v2.unique_bto_ships_IMO.c014fb61fe": ["model.dbtProject_v2.bto_ships"], "test.dbtProject_v2.not_null_bto_reportsummaries_reportId.fcf84dbb54": ["model.dbtProject_v2.bto_reportsummaries"], "test.dbtProject_v2.unique_bto_reportsummaries_reportId.34da42c00b": ["model.dbtProject_v2.bto_reportsummaries"], "test.dbtProject_v2.not_null_bto_reportsummaries_IMO.1ab8fbadce": ["model.dbtProject_v2.bto_reportsummaries"], "test.dbtProject_v2.not_null_btr_ships_IMO.78f4cb9e48": ["model.dbtProject_v2.btr_ships"], "test.dbtProject_v2.unique_btr_ships_IMO.30bdeb435d": ["model.dbtProject_v2.btr_ships"], "test.dbtProject_v2.missing_imo_lookupships_lookup_ships_.83d8c65d69": ["model.dbtProject_v2.lookup_ships", "source.dbtProject_v2.corpdata.DimVesselSS"], "model.dbtProject_v2.bto_ReportSummaries": ["model.dbtProject_v2.bto_reportsummaries"], "test.dbtProject_v2.not_null_bto_ReportSummaries_reportId.b592e58cde": ["model.dbtProject_v2.bto_ReportSummaries"], "test.dbtProject_v2.unique_bto_ReportSummaries_reportId.5afa2755b6": ["model.dbtProject_v2.bto_ReportSummaries"], "test.dbtProject_v2.not_null_bto_ReportSummaries_IMO.63f9901f8b": ["model.dbtProject_v2.bto_ReportSummaries"], "test.dbtProject_v2.relationships_bto_ReportSummaries_legeventid__legEventId__ref_BTO_LegSummary_.556ee0b77f": ["model.dbtProject_v2.BTO_LegSummary", "model.dbtProject_v2.bto_ReportSummaries"], "test.dbtProject_v2.dbt_utils_recency_bto_ReportSummaries_day__timestamputc__1.2ed31da78c": ["model.dbtProject_v2.bto_ReportSummaries"], "test.dbtProject_v2.missing_imo_RS_bto_ReportSummaries_.db41486cf2": ["model.dbtProject_v2.bto_ReportSummaries"], "test.dbtProject_v2.missing_reportId_RS_bto_ReportSummaries_.bd69a5aa7f": ["model.dbtProject_v2.bto_ReportSummaries"], "test.dbtProject_v2.aggregate_reportId_RS_bto_ReportSummaries_.122b7476cd": ["model.dbtProject_v2.bto_ReportSummaries"], "source.dbtProject_v2.stage.api_bto_ships": [], "source.dbtProject_v2.stage.api_btr_ships": [], "source.dbtProject_v2.stage.api_bto_shipsDeltaReports": [], "source.dbtProject_v2.stage.api_bto_shipsReportSDelta": [], "source.dbtProject_v2.stage.api_bto_LegSummary_Delta": [], "source.dbtProject_v2.stage.api_bto_shipsDeltaReports_expanded": [], "source.dbtProject_v2.stage.api_bto_Events_Delta": [], "source.dbtProject_v2.corpdata.DimVesselSS": []}, "child_map": {"model.dbtProject_v2.bto_legsummary": ["model.dbtProject_v2.BTO_LegSummary", "test.dbtProject_v2.not_null_bto_legsummary_legEventId.86128d4d88", "test.dbtProject_v2.unique_bto_legsummary_legEventId.373a94c272"], "model.dbtProject_v2.BTO_LegSummary": ["test.dbtProject_v2.full_table_scan_LS_BTO_LegSummary_.e2c4d34988", "test.dbtProject_v2.missing_legeventId_LS_BTO_LegSummary_.7966b9e8c0", "test.dbtProject_v2.relationships_bto_ReportSummaries_legeventid__legEventId__ref_BTO_LegSummary_.556ee0b77f"], "model.dbtProject_v2.BTO_Reports_Boiler": ["test.dbtProject_v2.IMO_mismatch_Boiler_BTO_Reports_Boiler_.dd20263b34", "test.dbtProject_v2.reportId_mismatch_Boiler_BTO_Reports_Boiler_.b407bfebad"], "model.dbtProject_v2.BTO_Reports_Consumptions": ["test.dbtProject_v2.IMO_mismatch_consumption_BTO_Reports_Consumptions_.8b2d94804c", "test.dbtProject_v2.reportId_mismatch_consumption_BTO_Reports_Consumptions_.be82d6d8be"], "model.dbtProject_v2.BTO_Reports_Engines_AUX": ["test.dbtProject_v2.IMO_mismatch_AUX_BTO_Reports_Engines_AUX_.6c1d9891fe", "test.dbtProject_v2.reportId_mismatch_AUX_BTO_Reports_Engines_AUX_.bbdc284253"], "model.dbtProject_v2.BTO_Reports_Engines_MAIN": ["test.dbtProject_v2.IMO_mismatch_MAIN_BTO_Reports_Engines_MAIN_.1470dfcd66", "test.dbtProject_v2.reportId_mismatch_MAIN_BTO_Reports_Engines_MAIN_.1475841216"], "model.dbtProject_v2.BTO_Reports_LubOil": ["test.dbtProject_v2.IMO_mismatch_lubOil_BTO_Reports_LubOil_.09c59367a7", "test.dbtProject_v2.reportId_mismatch_lubOil_BTO_Reports_LubOil_.03afc6bce4"], "model.dbtProject_v2.bto_Ships": ["model.dbtProject_v2.lookup_ships"], "model.dbtProject_v2.btr_Ships": ["model.dbtProject_v2.lookup_ships"], "model.dbtProject_v2.api_bto_shipsDeltaReports_expanded": [], "model.dbtProject_v2.lookup_shipsLastVersion": [], "test.dbtProject_v2.not_null_bto_legsummary_legEventId.86128d4d88": [], "test.dbtProject_v2.unique_bto_legsummary_legEventId.373a94c272": [], "test.dbtProject_v2.missing_legeventId_LS_BTO_LegSummary_.7966b9e8c0": [], "test.dbtProject_v2.full_table_scan_LS_BTO_LegSummary_.e2c4d34988": [], "test.dbtProject_v2.reportId_mismatch_consumption_BTO_Reports_Consumptions_.be82d6d8be": [], "test.dbtProject_v2.IMO_mismatch_consumption_BTO_Reports_Consumptions_.8b2d94804c": [], "test.dbtProject_v2.reportId_mismatch_Boiler_BTO_Reports_Boiler_.b407bfebad": [], "test.dbtProject_v2.IMO_mismatch_Boiler_BTO_Reports_Boiler_.dd20263b34": [], "test.dbtProject_v2.reportId_mismatch_lubOil_BTO_Reports_LubOil_.03afc6bce4": [], "test.dbtProject_v2.IMO_mismatch_lubOil_BTO_Reports_LubOil_.09c59367a7": [], "test.dbtProject_v2.reportId_mismatch_MAIN_BTO_Reports_Engines_MAIN_.1475841216": [], "test.dbtProject_v2.IMO_mismatch_MAIN_BTO_Reports_Engines_MAIN_.1470dfcd66": [], "test.dbtProject_v2.reportId_mismatch_AUX_BTO_Reports_Engines_AUX_.bbdc284253": [], "test.dbtProject_v2.IMO_mismatch_AUX_BTO_Reports_Engines_AUX_.6c1d9891fe": [], "model.dbtProject_v2.bto_ships": ["model.dbtProject_v2.bto_Ships", "test.dbtProject_v2.not_null_bto_ships_IMO.c3725a3f1d", "test.dbtProject_v2.unique_bto_ships_IMO.c014fb61fe"], "model.dbtProject_v2.bto_reportsummaries": ["model.dbtProject_v2.BTO_Reports_Boiler", "model.dbtProject_v2.BTO_Reports_Boiler", "model.dbtProject_v2.BTO_Reports_Consumptions", "model.dbtProject_v2.BTO_Reports_Consumptions", "model.dbtProject_v2.BTO_Reports_Consumptions", "model.dbtProject_v2.BTO_Reports_Consumptions", "model.dbtProject_v2.BTO_Reports_Consumptions", "model.dbtProject_v2.BTO_Reports_Consumptions", "model.dbtProject_v2.BTO_Reports_Engines_AUX", "model.dbtProject_v2.BTO_Reports_Engines_AUX", "model.dbtProject_v2.BTO_Reports_Engines_MAIN", "model.dbtProject_v2.BTO_Reports_Engines_MAIN", "model.dbtProject_v2.BTO_Reports_LubOil", "model.dbtProject_v2.BTO_Reports_LubOil", "model.dbtProject_v2.BTO_Reports_LubOil", "model.dbtProject_v2.BTO_Reports_LubOil", "model.dbtProject_v2.BTO_Reports_LubOil", "model.dbtProject_v2.BTO_Reports_LubOil", "model.dbtProject_v2.api_bto_shipsDeltaReports_expanded", "model.dbtProject_v2.api_bto_shipsDeltaReports_expanded", "model.dbtProject_v2.bto_ReportSummaries", "test.dbtProject_v2.not_null_bto_reportsummaries_IMO.1ab8fbadce", "test.dbtProject_v2.not_null_bto_reportsummaries_reportId.fcf84dbb54", "test.dbtProject_v2.unique_bto_reportsummaries_reportId.34da42c00b"], "model.dbtProject_v2.btr_ships": ["model.dbtProject_v2.btr_Ships", "test.dbtProject_v2.not_null_btr_ships_IMO.78f4cb9e48", "test.dbtProject_v2.unique_btr_ships_IMO.30bdeb435d"], "model.dbtProject_v2.lookup_ships": ["model.dbtProject_v2.lookup_shipsLastVersion", "test.dbtProject_v2.missing_imo_lookupships_lookup_ships_.83d8c65d69"], "test.dbtProject_v2.not_null_bto_ships_IMO.c3725a3f1d": [], "test.dbtProject_v2.unique_bto_ships_IMO.c014fb61fe": [], "test.dbtProject_v2.not_null_bto_reportsummaries_reportId.fcf84dbb54": [], "test.dbtProject_v2.unique_bto_reportsummaries_reportId.34da42c00b": [], "test.dbtProject_v2.not_null_bto_reportsummaries_IMO.1ab8fbadce": [], "test.dbtProject_v2.not_null_btr_ships_IMO.78f4cb9e48": [], "test.dbtProject_v2.unique_btr_ships_IMO.30bdeb435d": [], "test.dbtProject_v2.missing_imo_lookupships_lookup_ships_.83d8c65d69": [], "model.dbtProject_v2.bto_ReportSummaries": ["model.dbtProject_v2.lookup_shipsLastVersion", "test.dbtProject_v2.aggregate_reportId_RS_bto_ReportSummaries_.122b7476cd", "test.dbtProject_v2.dbt_utils_recency_bto_ReportSummaries_day__timestamputc__1.2ed31da78c", "test.dbtProject_v2.missing_imo_RS_bto_ReportSummaries_.db41486cf2", "test.dbtProject_v2.missing_reportId_RS_bto_ReportSummaries_.bd69a5aa7f", "test.dbtProject_v2.not_null_bto_ReportSummaries_IMO.63f9901f8b", "test.dbtProject_v2.not_null_bto_ReportSummaries_reportId.b592e58cde", "test.dbtProject_v2.relationships_bto_ReportSummaries_legeventid__legEventId__ref_BTO_LegSummary_.556ee0b77f", "test.dbtProject_v2.unique_bto_ReportSummaries_reportId.5afa2755b6"], "test.dbtProject_v2.not_null_bto_ReportSummaries_reportId.b592e58cde": [], "test.dbtProject_v2.unique_bto_ReportSummaries_reportId.5afa2755b6": [], "test.dbtProject_v2.not_null_bto_ReportSummaries_IMO.63f9901f8b": [], "test.dbtProject_v2.relationships_bto_ReportSummaries_legeventid__legEventId__ref_BTO_LegSummary_.556ee0b77f": [], "test.dbtProject_v2.dbt_utils_recency_bto_ReportSummaries_day__timestamputc__1.2ed31da78c": [], "test.dbtProject_v2.missing_imo_RS_bto_ReportSummaries_.db41486cf2": [], "test.dbtProject_v2.missing_reportId_RS_bto_ReportSummaries_.bd69a5aa7f": [], "test.dbtProject_v2.aggregate_reportId_RS_bto_ReportSummaries_.122b7476cd": [], "source.dbtProject_v2.stage.api_bto_ships": ["model.dbtProject_v2.bto_ships", "model.dbtProject_v2.bto_ships"], "source.dbtProject_v2.stage.api_btr_ships": ["model.dbtProject_v2.btr_ships", "model.dbtProject_v2.btr_ships"], "source.dbtProject_v2.stage.api_bto_shipsDeltaReports": ["model.dbtProject_v2.api_bto_shipsDeltaReports_expanded"], "source.dbtProject_v2.stage.api_bto_shipsReportSDelta": ["model.dbtProject_v2.bto_reportsummaries"], "source.dbtProject_v2.stage.api_bto_LegSummary_Delta": ["model.dbtProject_v2.bto_legsummary", "model.dbtProject_v2.bto_legsummary"], "source.dbtProject_v2.stage.api_bto_shipsDeltaReports_expanded": ["model.dbtProject_v2.api_bto_shipsDeltaReports_expanded"], "source.dbtProject_v2.stage.api_bto_Events_Delta": [], "source.dbtProject_v2.corpdata.DimVesselSS": ["model.dbtProject_v2.lookup_ships", "test.dbtProject_v2.missing_imo_lookupships_lookup_ships_.83d8c65d69"]}}